// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

// THIS IS THE KEY CHANGE for your existing model
model Resume {
  id        String   @id @default(cuid())
  userId    String
  title     String
  atsScore  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Link to the new User model required by Next-Auth
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  personalInfo PersonalInfo?
  education    EducationEntry[]
  experience   ExperienceEntry[]
  skills       SkillEntry[]
  projects     ProjectEntry[]

  @@index([userId])
}

// These are the models required by Next-Auth Prisma Adapter
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  
  // This is the other side of the relation
  resumes       Resume[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Your other models (PersonalInfo, EducationEntry, etc.) remain unchanged.
// Just ensure they are still in the file.
// ... (keep PersonalInfo, EducationEntry, ExperienceEntry, SkillEntry, ProjectEntry models as they are)
model PersonalInfo {
  id        String  @id @default(cuid())
  firstName String
  lastName  String
  email     String
  phone     String
  location  String
  linkedin  String?
  website   String?
  summary   String  @db.Text
  resume    Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  resumeId  String @unique
}

model EducationEntry {
  id           String    @id @default(cuid())
  institution  String
  degree       String
  field        String
  startDate    String
  endDate      String
  gpa          String?
  achievements String[]  @default([])
  resume       Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  resumeId     String
  @@index([resumeId])
}

model ExperienceEntry {
  id                  String    @id @default(cuid())
  company             String
  position            String
  startDate           String
  endDate             String
  description         String    @db.Text
  enhancedDescription String?   @db.Text
  achievements        String[]  @default([])
  targetCompanyValues String?
  resume              Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  resumeId            String
  @@index([resumeId])
}

model SkillEntry {
  id       String @id @default(cuid())
  name     String
  level    String
  category String
  resume   Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  resumeId String
  @@index([resumeId])
  @@unique([resumeId, name])
}

model ProjectEntry {
  id           String   @id @default(cuid())
  name         String
  description  String   @db.Text
  technologies String[] @default([])
  url          String?
  github       String?
  resume       Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  resumeId     String
  @@index([resumeId])
}