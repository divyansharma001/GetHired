This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
.gitignore
app/(auth)/sign-in/[[...sign-in]]/page.tsx
app/(auth)/sign-up/[[...sign-up]]/page.tsx
app/api/ai/ats-score/route.ts
app/api/ai/enhance-experience/route.ts
app/api/ai/enhance-project/route.ts
app/api/ai/enhance-summary/route.ts
app/api/ai/generate-cover-letter/route.ts
app/api/resumes/[resumeId]/route.ts
app/api/resumes/route.ts
app/dashboard/create-resume/page.tsx
app/dashboard/page.tsx
app/globals.css
app/layout.tsx
app/page.tsx
components/dashboard/dashboard-content.tsx
components/landing/landing-page.tsx
components/landing/sliding-company.tsx
components/resume/ats-score-display.tsx
components/resume/resume-form.tsx
components/resume/resume-preview.tsx
components/resume/sections/education.tsx
components/resume/sections/experience.tsx
components/resume/sections/personal-info.tsx
components/resume/sections/projects.tsx
components/resume/sections/skills.tsx
components/resume/templates/simple-template.tsx
components/ui/button.tsx
components/ui/card.tsx
components/ui/input.tsx
components/ui/label.tsx
components/ui/progress.tsx
components/ui/select.tsx
components/ui/textarea.tsx
context/theme-provider.tsx
eslint.config.mjs
hooks/use-resume.ts
hooks/useShallowResumeSelector.ts
lib/ai/ats-scorer.ts
lib/ai/cover-letter-generator.ts
lib/ai/experience-enhancer.ts
lib/ai/gemini.ts
lib/ai/project-enhancer.ts
lib/ai/summary-enhancer.ts
lib/db.ts
lib/utils.ts
middleware.ts
next.config.ts
package.json
postcss.config.mjs
prisma/migrations/20250524181712_init_resume_models/migration.sql
prisma/migrations/20250525094131_modified_experience_entry/migration.sql
prisma/migrations/migration_lock.toml
prisma/schema.prisma
public/file.svg
public/globe.svg
public/next.svg
public/vercel.svg
public/window.svg
README.md
tailwind.config.ts
tsconfig.json
types/resume.ts
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="app/api/ai/ats-score/route.ts">
// app/api/ai/ats-score/route.ts
import { NextResponse } from 'next/server';
import { auth } from '@clerk/nextjs/server';
import { getAtsScoreAndSuggestions } from '@/lib/ai/ats-scorer';
import { ResumeData } from '@/types/resume';

export async function POST(request: Request) {
  try {
    const { userId } = await auth();
    if (!userId) {
      return new NextResponse('Unauthorized', { status: 401 });
    }

    const resumeData = await request.json() as Partial<ResumeData>;
    if (!resumeData || Object.keys(resumeData).length === 0) {
      return new NextResponse('Resume data is required', { status: 400 });
    }
    
    // console.log("Received resume data for ATS scoring:", JSON.stringify(resumeData, null, 2));


    const atsDetails = await getAtsScoreAndSuggestions(resumeData);
    return NextResponse.json(atsDetails);

  } catch (error) {
    console.error('[API_ATS_SCORE_ERROR]', error);
    return new NextResponse('Internal Server Error while calculating ATS score', { status: 500 });
  }
}
</file>

<file path="app/api/ai/enhance-project/route.ts">
// app/api/ai/enhance-project/route.ts
import { NextResponse } from 'next/server';
import { auth } from '@clerk/nextjs/server';
import { enhanceProjectDescription } from '@/lib/ai/project-enhancer';

export async function POST(request: Request) {
  try {
    const { userId } = await auth();
    if (!userId) return new NextResponse('Unauthorized', { status: 401 });

    const body = await request.json();
    const { projectName, currentDescription, technologies, resumeTitle } = body;

    if (!projectName || !currentDescription) {
      return new NextResponse('Project name and description are required', { status: 400 });
    }

    const enhancedData = await enhanceProjectDescription({ projectName, currentDescription, technologies, resumeTitle });
    return NextResponse.json(enhancedData);
  } catch (error) {
    console.error('[API_ENHANCE_PROJECT_ERROR]', error);
    return new NextResponse('Internal Server Error while enhancing project', { status: 500 });
  }
}
</file>

<file path="app/api/ai/enhance-summary/route.ts">
// app/api/ai/enhance-summary/route.ts
import { NextResponse } from 'next/server';
import { auth } from '@clerk/nextjs/server';
import { enhanceSummary } from '@/lib/ai/summary-enhancer';

export async function POST(request: Request) {
  try {
    const { userId } = await auth();
    if (!userId) {
      return new NextResponse('Unauthorized', { status: 401 });
    }

    const body = await request.json();
    const { currentSummary, resumeTitle } = body;

    if (!currentSummary) {
      return new NextResponse('Current summary is required', { status: 400 });
    }

    const enhancedData = await enhanceSummary({ currentSummary, resumeTitle });
    return NextResponse.json(enhancedData);

  } catch (error) {
    console.error('[API_ENHANCE_SUMMARY_ERROR]', error);
    return new NextResponse('Internal Server Error while enhancing summary', { status: 500 });
  }
}
</file>

<file path="app/api/ai/generate-cover-letter/route.ts">
// app/api/ai/generate-cover-letter/route.ts
import { NextResponse } from 'next/server';
import { auth } from '@clerk/nextjs/server';
import { generateCoverLetter } from '@/lib/ai/cover-letter-generator';
import { ResumeData } from '@/types/resume';

export async function POST(request: Request) {
  try {
    const { userId } = await auth();
    if (!userId) {
      return new NextResponse('Unauthorized', { status: 401 });
    }

    const body = await request.json();
    const { resumeData, jobTitle, companyName, specificPoints, tone } = body as {
        resumeData: Partial<ResumeData>;
        jobTitle: string;
        companyName: string;
        specificPoints?: string;
        tone?: 'formal' | 'semi-formal' | 'enthusiastic';
    };

    if (!resumeData || !jobTitle || !companyName) {
      return new NextResponse('Missing required fields (resumeData, jobTitle, companyName)', { status: 400 });
    }
     if (!resumeData.personalInfo || !resumeData.personalInfo.firstName) {
       return new NextResponse('Resume data must include at least personal information with a first name.', { status: 400 });
     }


    const coverLetterOutput = await generateCoverLetter({
        resumeData,
        jobTitle,
        companyName,
        specificPoints,
        tone
    });
    return NextResponse.json(coverLetterOutput);

  } catch (error) {
    console.error('[API_GENERATE_COVER_LETTER_ERROR]', error);
    return new NextResponse('Internal Server Error while generating cover letter', { status: 500 });
  }
}
</file>

<file path="app/dashboard/page.tsx">
// app/dashboard/page.tsx
import { auth } from '@clerk/nextjs/server';
import { redirect } from 'next/navigation';
import DashboardContent from "@/components/dashboard/dashboard-content"

export default async function Dashboard() {
  const { userId } = await auth();

  if (!userId) {
    redirect('/sign-in');
  }

  return <DashboardContent userId={userId} />;
}
</file>

<file path="app/page.tsx">
import LandingPage from '@/components/landing/landing-page'

export default function Home() {
  return <LandingPage />
}
</file>

<file path="components/landing/sliding-company.tsx">
import React from 'react';
import { useTheme } from '@/context/theme-provider';

const SlidingCompanies = () => {
  const { theme } = useTheme();
  const isDark = theme === 'dark';

  // Refined theme classes for a more professional and "black" dark mode
  const themeClasses = {
    // Dark Mode: Aiming for a deep, almost black background with subtle contrasts
    // Light Mode: Clean, high-contrast professional look
    bgAlt: isDark ? 'bg-gray-900' : 'bg-white', // Dark: pure black; Light: pure white
    border: isDark ? 'border-neutral-800' : 'border-neutral-200', // Dark: subtle dark border; Light: subtle light border
    textMuted: isDark ? 'text-neutral-400' : 'text-neutral-500', // Dark: readable muted on black; Light: standard muted
    text: isDark ? 'text-neutral-200' : 'text-neutral-800', // Dark: light gray for company names; Light: dark gray for company names
  };

  const companies = ['Google', 'Microsoft', 'Apple', 'Amazon', 'Netflix', 'Meta', 'Tesla', 'Oracle']; // Added a couple more for better visual fill
  
  return (
    <section className={`${themeClasses.bgAlt} py-16 border-y ${themeClasses.border} overflow-hidden transition-colors duration-500 ease-in-out`}>
      <div className="max-w-7xl mx-auto px-4 sm:px-6">
        <p className={`text-center ${themeClasses.textMuted} mb-10 text-sm font-medium tracking-wide transition-colors duration-500 ease-in-out`}>
          TRUSTED BY INNOVATORS AT GLOBAL LEADERS
        </p>
        
        <div className="relative">
          <div className="flex animate-slide items-center"> {/* Added items-center for vertical alignment if font sizes differ slightly */}
            {/* First set of companies */}
            {companies.map((company, index) => (
              <div 
                key={`first-${index}`} 
                className={`flex-shrink-0 mx-10 sm:mx-14 text-xl sm:text-2xl font-semibold ${themeClasses.text} hover:opacity-100 transition-all duration-300 cursor-default opacity-70 group-hover:opacity-100`}
              >
                {company}
              </div>
            ))}
            {/* Duplicate set for seamless loop */}
            {companies.map((company, index) => (
              <div 
                key={`second-${index}`} 
                className={`flex-shrink-0 mx-10 sm:mx-14 text-xl sm:text-2xl font-semibold ${themeClasses.text} hover:opacity-100 transition-all duration-300 cursor-default opacity-70 group-hover:opacity-100`}
              >
                {company}
              </div>
            ))}
          </div>
        </div>
      </div>
      
      <style jsx>{`
        @keyframes slide {
          0% {
            transform: translateX(0);
          }
          100% {
            transform: translateX(-50%); /* Adjust if total width of companies changes significantly */
          }
        }
        
        .animate-slide {
          animation: slide 30s linear infinite; /* Increased duration for smoother, slower scroll */
        }
        
        /* Consider pausing on hover of the entire track, not just individual items */
        .relative:hover .animate-slide { 
          animation-play-state: paused;
        }
      `}</style>
    </section>
  );
};

export default SlidingCompanies;
</file>

<file path="components/resume/templates/simple-template.tsx">
// components/resume/templates/simple-template.tsx
import React from 'react';
import { ResumeData } from '@/types/resume';

interface SimpleTemplateProps {
  resumeData: ResumeData;
  isPreview?: boolean; // To slightly adjust styles if used for on-page preview vs PDF capture
}

// Basic inline styles - for PDF generation, external CSS is harder to manage with html2canvas
const styles = {
  container: { fontFamily: 'Arial, sans-serif', padding: '40px', color: '#333', width: '210mm', minHeight: '297mm', backgroundColor: '#fff' }, // A4 size approx
  header: { textAlign: 'center' as const, marginBottom: '30px' },
  name: { fontSize: '28px', fontWeight: 'bold' as const, marginBottom: '5px' },
  contact: { fontSize: '12px', marginBottom: '20px' },
  section: { marginBottom: '20px' },
  sectionTitle: { fontSize: '18px', fontWeight: 'bold' as const, borderBottom: '2px solid #333', paddingBottom: '5px', marginBottom: '10px' },
  subHeader: { fontSize: '14px', fontWeight: 'bold' as const, marginBottom: '3px' },
  dateRange: { fontSize: '12px', fontStyle: 'italic' as const, color: '#555', marginBottom: '5px' },
  listItem: { marginBottom: '8px', fontSize: '12px', lineHeight: '1.4' },
  bullet: { listStyleType: 'disc' as const, marginLeft: '20px', paddingLeft: '5px'},
  paragraph: { fontSize: '12px', lineHeight: '1.4', marginBottom: '10px', whiteSpace: 'pre-line' as const },
  skillItem: { display: 'inline-block', marginRight: '10px', marginBottom: '5px', fontSize: '12px', padding: '3px 6px', backgroundColor: '#f0f0f0', borderRadius: '3px'}
};

const SimpleTemplate: React.FC<SimpleTemplateProps> = ({ resumeData }) => {
  if (!resumeData || !resumeData.personalInfo) {
    return <div style={styles.container}><p>Loading resume data...</p></div>;
  }
  const { personalInfo, experience, education, skills, projects } = resumeData;

  return (
    <div id="resume-content-for-pdf" style={styles.container}>
      <div style={styles.header}>
        <h1 style={styles.name}>{personalInfo.firstName} {personalInfo.lastName}</h1>
        <p style={styles.contact}>
          {personalInfo.location} | {personalInfo.phone} | {personalInfo.email}
          {personalInfo.linkedin && ` | ${personalInfo.linkedin}`}
          {personalInfo.website && ` | ${personalInfo.website}`}
        </p>
      </div>

      {personalInfo.summary && (
        <div style={styles.section}>
          <h2 style={styles.sectionTitle}>Summary</h2>
          <p style={styles.paragraph}>{personalInfo.summary}</p>
        </div>
      )}

      {experience && experience.length > 0 && (
        <div style={styles.section}>
          <h2 style={styles.sectionTitle}>Experience</h2>
          {experience.map((exp, index) => (
            <div key={`exp-${exp.id || index}`} style={styles.listItem}>
              <h3 style={styles.subHeader}>{exp.position} - {exp.company}</h3>
              <p style={styles.dateRange}>{exp.startDate} - {exp.endDate}</p>
              <p style={styles.paragraph}>{exp.description}</p>
              {exp.achievements && exp.achievements.length > 0 && (
                <ul style={styles.bullet}>
                  {exp.achievements.map((ach, i) => ach && <li key={i}>{ach}</li>)}
                </ul>
              )}
            </div>
          ))}
        </div>
      )}

      {education && education.length > 0 && (
        <div style={styles.section}>
          <h2 style={styles.sectionTitle}>Education</h2>
          {education.map((edu, index) => (
            <div key={`edu-${edu.id || index}`} style={styles.listItem}>
              <h3 style={styles.subHeader}>{edu.degree} in {edu.field}</h3>
              <p>{edu.institution}</p>
              <p style={styles.dateRange}>{edu.startDate} - {edu.endDate} {edu.gpa && `| GPA: ${edu.gpa}`}</p>
              {edu.achievements && edu.achievements.length > 0 && (
                <ul style={styles.bullet}>
                  {edu.achievements.map((ach, i) => ach && <li key={i}>{ach}</li>)}
                </ul>
              )}
            </div>
          ))}
        </div>
      )}

      {skills && skills.length > 0 && (
        <div style={styles.section}>
          <h2 style={styles.sectionTitle}>Skills</h2>
          <div>
            {skills.map((skill, index) => (
              skill.name && <span key={`skill-${skill.id || index}`} style={styles.skillItem}>{skill.name}</span>
            ))}
          </div>
        </div>
      )}

      {projects && projects.length > 0 && (
        <div style={styles.section}>
          <h2 style={styles.sectionTitle}>Projects</h2>
          {projects.map((proj, index) => (
            <div key={`proj-${proj.id || index}`} style={styles.listItem}>
              <h3 style={styles.subHeader}>{proj.name}</h3>
              <p style={styles.paragraph}>{proj.description}</p>
              {proj.technologies && proj.technologies.length > 0 && <p style={{fontSize: '11px', color: '#444'}}><em>Technologies: {proj.technologies.join(', ')}</em></p>}
              {proj.url && <p style={{fontSize: '11px'}}><a href={proj.url} target="_blank" rel="noopener noreferrer">Project Link</a></p>}
              {proj.github && <p style={{fontSize: '11px'}}><a href={proj.github} target="_blank" rel="noopener noreferrer">GitHub Repo</a></p>}
            </div>
          ))}
        </div>
      )}
    </div>
  );
};

export default SimpleTemplate;
</file>

<file path="eslint.config.mjs">
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;
</file>

<file path="lib/ai/cover-letter-generator.ts">
// lib/ai/cover-letter-generator.ts
import { model, generationConfig, safetySettings } from './gemini';
import { ResumeData } from '@/types/resume'; // Assuming you'll pass the resume data

interface GenerateCoverLetterPayload {
  resumeData: Partial<ResumeData>; // Pass the relevant parts of the resume
  jobTitle: string;
  companyName: string;
  specificPoints?: string; // Optional: User-provided points to emphasize
  tone?: 'formal' | 'semi-formal' | 'enthusiastic'; // Optional: tone for the letter
}

interface GeneratedCoverLetterOutput {
  coverLetterText: string;
  // suggestions?: string[]; // Optional: suggestions for improvement or customization
}

// Helper to quickly summarize resume for the prompt
function summarizeResumeForCoverLetter(resumeData: Partial<ResumeData>): string {
  let summary = "Key qualifications include: ";
  if (resumeData.personalInfo?.summary) {
    summary += `Professional Summary: ${resumeData.personalInfo.summary.substring(0, 200)}... `;
  }
  if (resumeData.experience && resumeData.experience.length > 0) {
    const topExperience = resumeData.experience[0];
    summary += `Recent experience as ${topExperience.position} at ${topExperience.company}. `;
  }
  if (resumeData.skills && resumeData.skills.length > 0) {
    summary += `Top skills: ${resumeData.skills.slice(0, 5).map(s => s.name).join(', ')}. `;
  }
  return summary;
}


export async function generateCoverLetter(
  payload: GenerateCoverLetterPayload
): Promise<GeneratedCoverLetterOutput> {
  const { resumeData, jobTitle, companyName, specificPoints, tone = 'semi-formal' } = payload;

  const resumeSummary = summarizeResumeForCoverLetter(resumeData);

  let promptContext = `The candidate's resume highlights: ${resumeSummary}\n`;
  if (specificPoints) {
    promptContext += `The candidate wants to specifically emphasize: "${specificPoints}".\n`;
  }

  const prompt = `
    You are an expert career advisor and professional writer.
    Generate a compelling and tailored cover letter based on the following information.
    The candidate is applying for the role of "${jobTitle}" at "${companyName}".
    The desired tone for the cover letter is "${tone}".

    ${promptContext}

    The cover letter should:
    1.  Start with a professional greeting. If a hiring manager name is not provided, use a generic professional greeting.
    2.  Clearly state the position being applied for and where it was seen (if applicable, otherwise omit).
    3.  Briefly introduce the candidate and express strong interest in the role and company.
    4.  Highlight 2-3 key skills or experiences from the candidate's resume summary that directly align with the target job title.
    5.  If specific points to emphasize were provided, weave them naturally into the letter.
    6.  Show enthusiasm for the specific company, "${companyName}". Briefly mention why the company is a good fit or what excites the candidate about it (you can make a plausible inference if not specified).
    7.  Conclude with a call to action, expressing eagerness for an interview.
    8.  End with a professional closing.

    The candidate's name is ${resumeData.personalInfo?.firstName || ''} ${resumeData.personalInfo?.lastName || ''}.
    Their contact email is ${resumeData.personalInfo?.email || '[Candidate Email]'} and phone is ${resumeData.personalInfo?.phone || '[Candidate Phone]'}.
    Include the candidate's name and contact information at the end of the letter or in a standard letterhead format if you can represent that in text.

    Output MUST be a valid JSON object with the following structure:
    \`\`\`json
    {
      "coverLetterText": "The full text of the generated cover letter here, formatted with paragraphs (use \\n for newlines)."
    }
    \`\`\`
    Ensure the "coverLetterText" is a single string with appropriate newline characters for formatting.
    Do not include any explanatory text or markdown formatting outside the JSON object.
  `;

  try {
    // Adjust generationConfig if not expecting JSON directly for this, or keep it
    const customGenerationConfig = { ...generationConfig, responseMimeType: "application/json" }; // Ensure JSON output
    const chatSession = model.startChat({ generationConfig: customGenerationConfig, safetySettings, history: [] });
    const result = await chatSession.sendMessage(prompt);
    const responseText = result.response.text();

    console.log("[Cover Letter Generator] Gemini Raw Response:", responseText);

    let cleanedJsonText = responseText.trim();
    // Basic cleaning, assuming responseMimeType: "application/json" works well
    const jsonMatch = cleanedJsonText.match(/(\{[\s\S]*\})/);
    if (jsonMatch && jsonMatch[0]) {
        cleanedJsonText = jsonMatch[0];
    } else {
        if (cleanedJsonText.startsWith('```json')) cleanedJsonText = cleanedJsonText.substring(7);
        if (cleanedJsonText.endsWith('```')) cleanedJsonText = cleanedJsonText.substring(0, cleanedJsonText.length - 3);
        cleanedJsonText = cleanedJsonText.trim();
    }


    if (!cleanedJsonText) {
        throw new Error("Cleaned JSON text for cover letter is empty from AI.");
    }
    const parsedResult = JSON.parse(cleanedJsonText) as GeneratedCoverLetterOutput;

    if (!parsedResult.coverLetterText) {
      throw new Error("AI response for cover letter is missing 'coverLetterText' field.");
    }
    return parsedResult;

  } catch (error) {
    console.error("Error generating cover letter with AI:", error);
    return {
      coverLetterText: `Dear Hiring Manager,\n\nI am writing to express my interest in the ${jobTitle} position at ${companyName}. (AI generation failed, please write manually or try again.)\n\nSincerely,\n${resumeData.personalInfo?.firstName || ''} ${resumeData.personalInfo?.lastName || ''}`,
    };
  }
}
</file>

<file path="lib/ai/gemini.ts">
// lib/ai/gemini.ts
import { GoogleGenerativeAI, HarmCategory, HarmBlockThreshold } from "@google/generative-ai";

const apiKey = process.env.GEMINI_API_KEY;
if (!apiKey) {
  throw new Error("GEMINI_API_KEY is not defined in environment variables");
}

const genAI = new GoogleGenerativeAI(apiKey);

const model = genAI.getGenerativeModel({
  model: "gemini-1.5-flash-latest", // Or another suitable model
});

const generationConfig = {
  temperature: 0.7, // Adjust for creativity vs. factuality
  topP: 0.95,
  topK: 64,
  maxOutputTokens: 8192, // Adjust as needed
  responseMimeType: "application/json", // Expect JSON output
};

const safetySettings = [
  { category: HarmCategory.HARM_CATEGORY_HARASSMENT, threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE },
  { category: HarmCategory.HARM_CATEGORY_HATE_SPEECH, threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE },
  { category: HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT, threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE },
  { category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT, threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE },
];

export { model, generationConfig, safetySettings };
</file>

<file path="lib/ai/project-enhancer.ts">
// lib/ai/project-enhancer.ts
import { model, generationConfig, safetySettings } from './gemini';

interface EnhanceProjectPayload {
  projectName: string;
  currentDescription: string;
  technologies?: string[];
  resumeTitle?: string; // For context
}

interface EnhancedProjectOutput {
  enhancedDescription: string;
  // suggestions?: string[]; // e.g., suggest adding impact metrics
}

export async function enhanceProjectDescription(
  payload: EnhanceProjectPayload
): Promise<EnhancedProjectOutput> {
  const { projectName, currentDescription, technologies = [], resumeTitle } = payload;

  let contextText = `The user is describing a project named "${projectName}" for their resume`;
  if (resumeTitle) contextText += ` (resume titled "${resumeTitle}")`;
  if (technologies.length > 0) contextText += `. Key technologies used: ${technologies.join(', ')}`;
  contextText += ".";

  const prompt = `
    You are an expert resume writing assistant.
    ${contextText}
    The user has provided the following draft for their project description:

    Current Description:
    "${currentDescription}"

    Task:
    Rewrite this "Current Description" to be more impactful, concise, and clearly articulate the project's purpose, the user's role/contributions, and key outcomes or features. 
    Focus on using strong action verbs and highlighting technical skills demonstrated. If possible, frame contributions in a way that suggests impact.

    Output MUST be a valid JSON object with the following structure:
    \`\`\`json
    {
      "enhancedDescription": "The rewritten, impactful project description here."
    }
    \`\`\`
    Ensure all string values in the JSON are properly escaped.
    Do not include any explanatory text or markdown formatting outside the JSON object.
    Your entire response must start with "{" and end with "}".
  `;

  try {
    const chatSession = model.startChat({ generationConfig, safetySettings, history: [] });
    const result = await chatSession.sendMessage(prompt);
    const responseText = result.response.text();
    console.log("[Project Enhancer] Gemini Raw:", responseText);
    let cleanedJsonText = responseText.trim();
    const jsonMatch = cleanedJsonText.match(/(\{[\s\S]*\})/);
    if (jsonMatch && jsonMatch[0]) cleanedJsonText = jsonMatch[0];
    else { /* ... cleaning logic ... */ 
        if (cleanedJsonText.startsWith('```json')) cleanedJsonText = cleanedJsonText.substring(7);
        else if (cleanedJsonText.startsWith('```')) cleanedJsonText = cleanedJsonText.substring(3);
        if (cleanedJsonText.endsWith('```')) cleanedJsonText = cleanedJsonText.substring(0, cleanedJsonText.length - 3);
        cleanedJsonText = cleanedJsonText.trim();
    }
    console.log("[Project Enhancer] Cleaned JSON:", cleanedJsonText);
    if (!cleanedJsonText) throw new Error("Cleaned JSON empty from AI for project.");
    const parsedResult = JSON.parse(cleanedJsonText) as EnhancedProjectOutput;
    if (!parsedResult.enhancedDescription) throw new Error("AI response for project enhancement missing 'enhancedDescription'.");
    return parsedResult;
  } catch (error) {
    console.error("Error enhancing project with AI:", error);
    return { enhancedDescription: currentDescription + " (AI enhancement failed, please review manually)" };
  }
}
</file>

<file path="lib/ai/summary-enhancer.ts">
// lib/ai/summary-enhancer.ts
import { model, generationConfig, safetySettings } from './gemini';

interface EnhanceSummaryPayload {
  currentSummary: string;
  resumeTitle?: string; // For context
  // You could add targetJobTitle, keySkills from resume for more context
}

interface EnhancedSummaryOutput {
  enhancedSummary: string;
  // suggestions?: string[]; // Optional: suggestions on what was improved
}

export async function enhanceSummary(
  payload: EnhanceSummaryPayload
): Promise<EnhancedSummaryOutput> {
  const { currentSummary, resumeTitle } = payload;

  let contextText = "The user is writing a professional summary for their resume";
  if (resumeTitle) contextText += ` titled "${resumeTitle}"`;
  contextText += ".";

  const prompt = `
    You are an expert resume writing assistant.
    ${contextText}
    The user has provided the following draft for their professional summary:

    Current Summary:
    "${currentSummary}"

    Task:
    Rewrite this "Current Summary" to be more impactful, concise (ideally 2-4 powerful sentences), and ATS-friendly. 
    Focus on highlighting key skills, quantifiable achievements (if inferable or generally applicable), and career aspirations relevant to a professional resume.
    Ensure the tone is professional and confident.

    Output MUST be a valid JSON object with the following structure:
    \`\`\`json
    {
      "enhancedSummary": "The rewritten, impactful professional summary here."
    }
    \`\`\`
    Ensure all string values in the JSON are properly escaped.
    Do not include any explanatory text or markdown formatting outside the JSON object.
    Your entire response must start with "{" and end with "}".
  `;

  try {
    const chatSession = model.startChat({ generationConfig, safetySettings, history: [] });
    const result = await chatSession.sendMessage(prompt);
    const responseText = result.response.text();

    console.log("[Summary Enhancer] Gemini Raw Response:", responseText);

    let cleanedJsonText = responseText.trim();
    const jsonMatch = cleanedJsonText.match(/(\{[\s\S]*\})/);
    if (jsonMatch && jsonMatch[0]) cleanedJsonText = jsonMatch[0];
    else { 
        if (cleanedJsonText.startsWith('```json')) cleanedJsonText = cleanedJsonText.substring(7);
        else if (cleanedJsonText.startsWith('```')) cleanedJsonText = cleanedJsonText.substring(3);
        if (cleanedJsonText.endsWith('```')) cleanedJsonText = cleanedJsonText.substring(0, cleanedJsonText.length - 3);
        cleanedJsonText = cleanedJsonText.trim();
    }

    console.log("[Summary Enhancer] Cleaned JSON:", cleanedJsonText);
    if (!cleanedJsonText) throw new Error("Cleaned JSON text is empty from AI for summary.");

    const parsedResult = JSON.parse(cleanedJsonText) as EnhancedSummaryOutput;

    if (!parsedResult.enhancedSummary) {
      throw new Error("AI response for summary enhancement is missing 'enhancedSummary' field.");
    }
    return parsedResult;

  } catch (error) {
    console.error("Error enhancing summary with AI:", error);
    return {
      enhancedSummary: currentSummary + " (AI enhancement failed, please review manually)",
    };
  }
}
</file>

<file path="lib/db.ts">
// lib/db.ts
import { PrismaClient } from '@prisma/client';

declare global {
  // allow global `var` declarations
  // eslint-disable-next-line no-unused-vars, no-var
  var prisma: PrismaClient | undefined;
}

export const prisma =
  global.prisma ||
  new PrismaClient({
    // log: ['query', 'info', 'warn', 'error'], // Optional: for debugging
  });

if (process.env.NODE_ENV !== 'production') global.prisma = prisma;
</file>

<file path="middleware.ts">
// middleware.ts
import { clerkMiddleware, createRouteMatcher } from '@clerk/nextjs/server';

const isProtectedRoute = createRouteMatcher([
  '/dashboard(.*)', // Protects /dashboard and any sub-routes
]);

// The middleware function itself needs to be async to use await inside it
export default clerkMiddleware(async (authProvider, req) => { // Renamed 'auth' to 'authProvider' for clarity
  // Await the promise returned by authProvider() to get the actual auth object
  const authObject = await authProvider(); 

  const { userId, redirectToSignIn } = authObject; // Destructure from the resolved authObject

  if (isProtectedRoute(req)) {
    if (!userId) {
      // If it's a protected route and the user is not signed in,
      // redirect them to the sign-in page.
      return redirectToSignIn({ returnBackUrl: req.url });
    }
  }
});

export const config = {
  matcher: [
    '/((?!_next/static|_next/image|favicon.ico|api/public).*)',
    '/',
  ],
};
</file>

<file path="next.config.ts">
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  /* config options here */
};

export default nextConfig;
</file>

<file path="postcss.config.mjs">
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;
</file>

<file path="prisma/migrations/20250524181712_init_resume_models/migration.sql">
-- CreateTable
CREATE TABLE "Resume" (
    "id" TEXT NOT NULL,
    "userId" TEXT NOT NULL,
    "title" TEXT NOT NULL,
    "atsScore" INTEGER NOT NULL DEFAULT 0,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "Resume_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "PersonalInfo" (
    "id" TEXT NOT NULL,
    "firstName" TEXT NOT NULL,
    "lastName" TEXT NOT NULL,
    "email" TEXT NOT NULL,
    "phone" TEXT NOT NULL,
    "location" TEXT NOT NULL,
    "linkedin" TEXT,
    "website" TEXT,
    "summary" TEXT NOT NULL,
    "resumeId" TEXT NOT NULL,

    CONSTRAINT "PersonalInfo_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "EducationEntry" (
    "id" TEXT NOT NULL,
    "institution" TEXT NOT NULL,
    "degree" TEXT NOT NULL,
    "field" TEXT NOT NULL,
    "startDate" TEXT NOT NULL,
    "endDate" TEXT NOT NULL,
    "gpa" TEXT,
    "achievements" TEXT[] DEFAULT ARRAY[]::TEXT[],
    "resumeId" TEXT NOT NULL,

    CONSTRAINT "EducationEntry_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "ExperienceEntry" (
    "id" TEXT NOT NULL,
    "company" TEXT NOT NULL,
    "position" TEXT NOT NULL,
    "startDate" TEXT NOT NULL,
    "endDate" TEXT NOT NULL,
    "description" TEXT NOT NULL,
    "enhancedDescription" TEXT,
    "achievements" TEXT[] DEFAULT ARRAY[]::TEXT[],
    "resumeId" TEXT NOT NULL,

    CONSTRAINT "ExperienceEntry_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "SkillEntry" (
    "id" TEXT NOT NULL,
    "name" TEXT NOT NULL,
    "level" TEXT NOT NULL,
    "category" TEXT NOT NULL,
    "resumeId" TEXT NOT NULL,

    CONSTRAINT "SkillEntry_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "ProjectEntry" (
    "id" TEXT NOT NULL,
    "name" TEXT NOT NULL,
    "description" TEXT NOT NULL,
    "technologies" TEXT[] DEFAULT ARRAY[]::TEXT[],
    "url" TEXT,
    "github" TEXT,
    "resumeId" TEXT NOT NULL,

    CONSTRAINT "ProjectEntry_pkey" PRIMARY KEY ("id")
);

-- CreateIndex
CREATE INDEX "Resume_userId_idx" ON "Resume"("userId");

-- CreateIndex
CREATE UNIQUE INDEX "PersonalInfo_resumeId_key" ON "PersonalInfo"("resumeId");

-- CreateIndex
CREATE INDEX "EducationEntry_resumeId_idx" ON "EducationEntry"("resumeId");

-- CreateIndex
CREATE INDEX "ExperienceEntry_resumeId_idx" ON "ExperienceEntry"("resumeId");

-- CreateIndex
CREATE INDEX "SkillEntry_resumeId_idx" ON "SkillEntry"("resumeId");

-- CreateIndex
CREATE UNIQUE INDEX "SkillEntry_resumeId_name_key" ON "SkillEntry"("resumeId", "name");

-- CreateIndex
CREATE INDEX "ProjectEntry_resumeId_idx" ON "ProjectEntry"("resumeId");

-- AddForeignKey
ALTER TABLE "PersonalInfo" ADD CONSTRAINT "PersonalInfo_resumeId_fkey" FOREIGN KEY ("resumeId") REFERENCES "Resume"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "EducationEntry" ADD CONSTRAINT "EducationEntry_resumeId_fkey" FOREIGN KEY ("resumeId") REFERENCES "Resume"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "ExperienceEntry" ADD CONSTRAINT "ExperienceEntry_resumeId_fkey" FOREIGN KEY ("resumeId") REFERENCES "Resume"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "SkillEntry" ADD CONSTRAINT "SkillEntry_resumeId_fkey" FOREIGN KEY ("resumeId") REFERENCES "Resume"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "ProjectEntry" ADD CONSTRAINT "ProjectEntry_resumeId_fkey" FOREIGN KEY ("resumeId") REFERENCES "Resume"("id") ON DELETE CASCADE ON UPDATE CASCADE;
</file>

<file path="prisma/migrations/20250525094131_modified_experience_entry/migration.sql">
-- AlterTable
ALTER TABLE "ExperienceEntry" ADD COLUMN     "targetCompanyValues" TEXT;
</file>

<file path="prisma/migrations/migration_lock.toml">
# Please do not edit this file manually
# It should be added in your version-control system (e.g., Git)
provider = "postgresql"
</file>

<file path="public/file.svg">
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>
</file>

<file path="public/globe.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>
</file>

<file path="public/next.svg">
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>
</file>

<file path="public/vercel.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>
</file>

<file path="public/window.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>
</file>

<file path=".gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

/lib/generated/prisma
</file>

<file path="app/(auth)/sign-in/[[...sign-in]]/page.tsx">
// app/(auth)/sign-in/[[...sign-in]]/page.tsx
import { SignIn } from '@clerk/nextjs';

export default function Page() {
  return (
    // Use body background from globals.css for consistency
    <div className="min-h-screen flex items-center justify-center p-6"> 
      <SignIn />
    </div>
  );
}
// Apply similar minimal wrapper for sign-up page
</file>

<file path="app/(auth)/sign-up/[[...sign-up]]/page.tsx">
// app/(auth)/sign-in/[[...sign-in]]/page.tsx
import { SignUp } from '@clerk/nextjs';

export default function Page() {
  return (
    // Use body background from globals.css for consistency
    <div className="min-h-screen flex items-center justify-center p-6"> 
      <SignUp />
    </div>
  );
}
// Apply similar minimal wrapper for sign-up page
</file>

<file path="app/api/ai/enhance-experience/route.ts">
// app/api/ai/enhance-experience/route.ts
import { NextResponse } from 'next/server';
import { auth } from '@clerk/nextjs/server';
import { enhanceExperienceEntry } from '@/lib/ai/experience-enhancer';

export async function POST(request: Request) {
  try {
    const { userId } = await auth();
    if (!userId) {
      return new NextResponse('Unauthorized', { status: 401 });
    }

    const body = await request.json();
    const { description, achievements, title, jobTitle, targetCompanyValues } = body; // <<< Destructure targetCompanyValues

    if (!description) {
      return new NextResponse('Experience description is required', { status: 400 });
    }

    // Pass targetCompanyValues to the enhancer function
    const enhancedData = await enhanceExperienceEntry({
        description,
        achievements,
        title,
        jobTitle,
        targetCompanyValues // <<< Pass here
    });
    return NextResponse.json(enhancedData);

  } catch (error) {
    console.error('[API_ENHANCE_EXPERIENCE_ERROR]', error);
    return new NextResponse('Internal Server Error while enhancing experience', { status: 500 });
  }
}
</file>

<file path="components/resume/resume-form.tsx">
// components/resume/resume-form.tsx
'use client'; // Add client directive

import React from 'react';
import PersonalInfoSection from './sections/personal-info';
import EducationSection from './sections/education';
import ExperienceSection from './sections/experience';
import SkillsSection from './sections/skills';
import ProjectsSection from './sections/projects';
import SimpleTemplate from './templates/simple-template'; // Import the template
import { useShallowResumeSelector } from '@/hooks/useShallowResumeSelector'; // Import store selector
import { useTheme } from '@/context/theme-provider'; // Import useTheme
import { cn } from '@/lib/utils'; // Import cn

interface ResumeFormProps {
  currentStep: number;
}

// Define AppTheme for this component's specific needs or import centrally
function getReviewSectionTheme(isDark: boolean) {
  return {
    textHeading: isDark ? 'text-neutral-100' : 'text-neutral-800',
    textMuted: isDark ? 'text-neutral-400' : 'text-neutral-500',
    borderSecondary: isDark ? 'border-neutral-700/50' : 'border-neutral-200',
    previewContainerBg: isDark ? 'bg-neutral-800/50' : 'bg-white', // Background for the preview wrapper
    previewContainerBorder: isDark ? 'border-neutral-700' : 'border-neutral-300',
  };
}


const ResumeForm: React.FC<ResumeFormProps> = ({ currentStep }) => {
  const resumeData = useShallowResumeSelector(); // Get all resume data
  const { theme } = useTheme();
  const isDark = theme === 'dark';
  const reviewTheme = getReviewSectionTheme(isDark);

  return (
    <div>
      {currentStep === 0 && <PersonalInfoSection />}
      {currentStep === 1 && <EducationSection />}
      {currentStep === 2 && <ExperienceSection />}
      {currentStep === 3 && <SkillsSection />}
      {currentStep === 4 && <ProjectsSection />}
      {currentStep === 5 && ( // Review step
        <div className="space-y-6">
          <div className="border-b pb-4" style={{ borderColor: reviewTheme.borderSecondary }}>
            <h2 className={cn("text-xl sm:text-2xl font-semibold", reviewTheme.textHeading)}>Review Your Resume</h2>
            <p className={cn("text-sm mt-1", reviewTheme.textMuted)}>
              This is a preview of how your resume will look when downloaded. Make any final adjustments in previous steps if needed.
            </p>
          </div>
          
          {/* Container for the SimpleTemplate to control its display within the form area */}
          <div className={cn(
              "p-4 sm:p-6 border rounded-lg shadow-lg overflow-x-auto", // Added overflow-x-auto
              reviewTheme.previewContainerBg, 
              reviewTheme.previewContainerBorder
            )}
          >
            {/* 
              The SimpleTemplate uses inline styles and is designed for A4.
              It might be wider than the form container. We can scale it down
              or let it be scrollable. For accuracy, letting it be scrollable (overflow-x-auto)
              is better than scaling and distorting proportions.
            */}
            <div 
              id="review-step-preview" 
              className="mx-auto" // Center the A4 template if container is wider
              style={{ 
                width: '210mm', // A4 width, ensure units are correct for display
                minHeight: '297mm', // A4 height
                // transform: 'scale(0.8)', // Optional: scale down to fit better
                // transformOrigin: 'top left', // If scaling
              }}
            >
              <SimpleTemplate resumeData={resumeData} />
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default ResumeForm;
</file>

<file path="components/resume/sections/education.tsx">
/* eslint-disable @typescript-eslint/no-unused-vars */
// components/resume/sections/education.tsx
'use client';
import React, { useEffect } from 'react';
import { useForm, useFieldArray, Controller } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import * as z from 'zod';
import { useResumeStore } from '@/hooks/use-resume';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { Button } from '@/components/ui/button';
// eslint-disable-next-line @typescript-eslint/no-unused-vars
import { EducationEntry } from '@/types/resume';
import { PlusCircle, Trash2, CalendarDays } from 'lucide-react';
import { useTheme } from '@/context/theme-provider'; // Import useTheme
import { cn } from '@/lib/utils'; // Import cn

const educationEntrySchema = z.object({
  id: z.string(),
  institution: z.string().min(1, "Institution name is required"),
  degree: z.string().min(1, "Degree is required"),
  field: z.string().min(1, "Field of study is required"),
  startDate: z.string().min(4, "Start date is required (e.g., YYYY or YYYY-MM)"),
  endDate: z.string().min(4, "End date is required (e.g., YYYY, YYYY-MM or Present)"),
  gpa: z.string().optional(),
  achievements: z.string().optional(),
});

const educationSchema = z.object({
  education: z.array(educationEntrySchema),
});

type EducationFormData = z.infer<typeof educationSchema>;

// Define AppTheme directly for this component (or import from a central config)
function getAppTheme(isDark: boolean) {
  return {
    textHeading: isDark ? 'text-neutral-100' : 'text-neutral-800',
    textMuted: isDark ? 'text-neutral-400' : 'text-neutral-500',
    borderSecondary: isDark ? 'border-neutral-700/50' : 'border-neutral-200',
    errorText: isDark ? 'text-red-400' : 'text-red-500',
    // Styles for individual entry cards/sections
    entryCardBg: isDark ? 'bg-neutral-700/30' : 'bg-slate-50',
    entryCardBorder: isDark ? 'border-neutral-600/50' : 'border-slate-200',
    iconColor: isDark ? 'text-neutral-400' : 'text-neutral-500',
  };
}

const EducationSection: React.FC = () => {
  const { education, updateEducation: updateStoreEducation, addEducation: addStoreEducation, removeEducation: removeStoreEducation } = useResumeStore();
  const { theme } = useTheme();
  const isDark = theme === 'dark';
  const appTheme = getAppTheme(isDark);

  const { control, register, handleSubmit, watch, formState: { errors }, reset } = useForm<EducationFormData>({
    resolver: zodResolver(educationSchema),
    defaultValues: { education: [] }, // Initialize with empty array, then populate via useEffect
  });

  useEffect(() => {
    // Populate RHF with data from Zustand store when component mounts or store data changes
    const storeEducation = education.map(edu => ({
      ...edu,
      achievements: edu.achievements?.join('\n') || '',
    }));
    reset({ education: storeEducation });
  }, [education, reset]);


  const { fields, append, remove } = useFieldArray({
    control,
    name: "education",
  });

  useEffect(() => {
    const subscription = watch((value, { name, type }) => {
      if (type === 'change' && value.education) { // Only update store on actual field changes
        value.education.forEach((eduData, index) => {
          if (eduData && fields[index]) { // Ensure field exists
            const achievementsArray = eduData.achievements?.split('\n').filter(ach => ach.trim() !== '');
            // Ensure ID is preserved from RHF 'fields' if `eduData.id` is undefined (can happen if RHF adds temp ID)
            const idToUpdate = eduData.id || fields[index].id;
            updateStoreEducation(index, { ...eduData, id: idToUpdate, achievements: achievementsArray });
          }
        });
      }
    });
    return () => subscription.unsubscribe();
  }, [watch, updateStoreEducation, fields]);

  const handleAddEducation = () => {
    const newId = addStoreEducation(); // Add to store, get new ID
    append({ 
      id: newId, // Use the ID from the store
      institution: '', 
      degree: '', 
      field: '', 
      startDate: '', 
      endDate: '', 
      gpa: '', 
      achievements: '' 
    });
  };

  const handleRemoveEducation = (index: number) => {
    const eduIdToRemove = fields[index].id;
    removeStoreEducation(eduIdToRemove); // Remove from Zustand store by actual ID
    remove(index); // Remove from RHF field array
  };

  return (
    <form className="space-y-6 sm:space-y-8" onSubmit={handleSubmit(() => {})}> {/* Added dummy onSubmit to satisfy RHF */}
      <div className="flex flex-col sm:flex-row justify-between sm:items-center gap-4 border-b pb-4 mb-6 sm:mb-8" style={{borderColor: appTheme.borderSecondary}}>
        <h2 className={cn("text-xl sm:text-2xl font-semibold", appTheme.textHeading)}>Education</h2>
        <Button type="button" variant="outline" size="sm" onClick={handleAddEducation}>
          <PlusCircle className="w-4 h-4 mr-2" />
          Add Education
        </Button>
      </div>

      {fields.length > 0 ? (
        <div className="space-y-6">
          {fields.map((item, index) => (
            <div 
              key={item.id} 
              className={cn(
                "p-5 sm:p-6 rounded-xl border space-y-5 sm:space-y-6 relative",
                appTheme.entryCardBg,
                appTheme.entryCardBorder
              )}
            >
              <Button
                type="button"
                variant="ghost"
                size="icon"
                onClick={() => handleRemoveEducation(index)}
                className="absolute top-3 right-3 text-red-400 hover:text-destructive hover:bg-destructive/10 w-8 h-8"
                aria-label="Remove education entry"
              >
                <Trash2 className="w-4 h-4" />
              </Button>
              
              {/* RHF Controller does not need register for id, it's part of the field object */}
              {/* <input type="hidden" {...register(`education.${index}.id`)} /> */}

              <div className="grid grid-cols-1 sm:grid-cols-2 gap-x-6 gap-y-5">
                <div>
                  <Label htmlFor={`education.${index}.institution`}>Institution Name</Label>
                  <Input id={`education.${index}.institution`} {...register(`education.${index}.institution`)} placeholder="e.g., University of Example" />
                  {errors.education?.[index]?.institution && <p className={cn("text-xs mt-1.5", appTheme.errorText)}>{errors.education[index]?.institution?.message}</p>}
                </div>
                <div>
                  <Label htmlFor={`education.${index}.degree`}>Degree</Label>
                  <Input id={`education.${index}.degree`} {...register(`education.${index}.degree`)} placeholder="e.g., Bachelor of Science" />
                  {errors.education?.[index]?.degree && <p className={cn("text-xs mt-1.5", appTheme.errorText)}>{errors.education[index]?.degree?.message}</p>}
                </div>
              </div>

              <div>
                <Label htmlFor={`education.${index}.field`}>Field of Study / Major</Label>
                <Input id={`education.${index}.field`} {...register(`education.${index}.field`)} placeholder="e.g., Computer Science" />
                {errors.education?.[index]?.field && <p className={cn("text-xs mt-1.5", appTheme.errorText)}>{errors.education[index]?.field?.message}</p>}
              </div>
              
              <div className="grid grid-cols-1 sm:grid-cols-2 gap-x-6 gap-y-5">
                <div>
                  <Label htmlFor={`education.${index}.startDate`}>Start Date</Label>
                  <div className="relative">
                    <Input id={`education.${index}.startDate`} {...register(`education.${index}.startDate`)} placeholder="YYYY or YYYY-MM" className="pr-10" />
                    <CalendarDays className={cn("absolute right-3 top-1/2 transform -translate-y-1/2 w-4 h-4 pointer-events-none", appTheme.iconColor)} />
                  </div>
                  {errors.education?.[index]?.startDate && <p className={cn("text-xs mt-1.5", appTheme.errorText)}>{errors.education[index]?.startDate?.message}</p>}
                </div>
                <div>
                  <Label htmlFor={`education.${index}.endDate`}>End Date (or &quot;Present&quot;)</Label>
                  <div className="relative">
                    <Input id={`education.${index}.endDate`} {...register(`education.${index}.endDate`)} placeholder="YYYY, YYYY-MM or Present" className="pr-10" />
                    <CalendarDays className={cn("absolute right-3 top-1/2 transform -translate-y-1/2 w-4 h-4 pointer-events-none", appTheme.iconColor)} />
                  </div>
                  {errors.education?.[index]?.endDate && <p className={cn("text-xs mt-1.5", appTheme.errorText)}>{errors.education[index]?.endDate?.message}</p>}
                </div>
              </div>

              <div>
                <Label htmlFor={`education.${index}.gpa`}>GPA (Optional)</Label>
                <Input id={`education.${index}.gpa`} {...register(`education.${index}.gpa`)} placeholder="e.g., 3.8/4.0" />
              </div>

              <div>
                <Label htmlFor={`education.${index}.achievements`}>Key Achievements/Coursework (Optional - one per line)</Label>
                <Textarea
                  id={`education.${index}.achievements`}
                  {...register(`education.${index}.achievements`)}
                  rows={3}
                  placeholder="e.g., Dean's List, Relevant projects, Thesis title"
                />
                <p className={cn("text-xs mt-2", appTheme.textMuted)}>List key accomplishments or relevant coursework. Each on a new line for bullet points in the resume.</p>
              </div>
            </div>
          ))}
        </div>
      ) : (
        <div className={cn("text-center py-10 border rounded-xl", appTheme.entryCardBg, appTheme.entryCardBorder)}>
          <PlusCircle className={cn("w-12 h-12 mx-auto mb-4", appTheme.iconColor)} />
          <p className={cn("mb-3 font-medium", appTheme.textHeading)}>No education entries added yet.</p>
          <p className={cn("text-sm", appTheme.textMuted)}>Click &quot;Add Education&quot; to start building your academic history.</p>
        </div>
      )}
    </form>
  );
};

export default EducationSection;
</file>

<file path="components/resume/sections/skills.tsx">
// components/resume/sections/skills.tsx
'use client';
import React, { useEffect } from 'react';
import { useForm, useFieldArray, Controller } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import * as z from 'zod';
import { useResumeStore } from '@/hooks/use-resume';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Button } from '@/components/ui/button';
import { Select } from '@/components/ui/select';
// eslint-disable-next-line @typescript-eslint/no-unused-vars
import { SkillEntry } from '@/types/resume';
import { PlusCircle, Trash2, Lightbulb, Star } from 'lucide-react'; // Added Star for proficiency
import { useTheme } from '@/context/theme-provider';
import { cn } from '@/lib/utils';

const skillLevels = ['Beginner', 'Intermediate', 'Advanced', 'Expert'] as const;
const skillCategories = ['Technical', 'Soft', 'Language', 'Other'] as const; // Match SkillEntry type

const skillEntrySchema = z.object({
  id: z.string(),
  name: z.string().min(1, "Skill name is required"),
  level: z.enum(skillLevels),
  category: z.enum(skillCategories),
});

const skillsSchema = z.object({
  skills: z.array(skillEntrySchema),
});

type SkillsFormData = z.infer<typeof skillsSchema>;

// Define AppTheme (or import from a central config)
function getAppTheme(isDark: boolean) {
  return {
    textHeading: isDark ? 'text-neutral-100' : 'text-neutral-800',
    textMuted: isDark ? 'text-neutral-400' : 'text-neutral-500',
    borderSecondary: isDark ? 'border-neutral-700/50' : 'border-neutral-200',
    errorText: isDark ? 'text-red-400' : 'text-red-500',
    entryCardBg: isDark ? 'bg-neutral-700/40' : 'bg-slate-100', // Slightly more subtle for skills
    entryCardBorder: isDark ? 'border-neutral-600/60' : 'border-slate-300',
    iconColor: isDark ? 'text-neutral-400' : 'text-neutral-500',
    tipBoxBg: isDark ? 'bg-blue-900/20 border-blue-500/30' : 'bg-blue-50 border-blue-200',
    tipBoxText: isDark ? 'text-blue-300' : 'text-blue-700',
  };
}


const SkillsSection: React.FC = () => {
  const { skills, updateSkill: updateStoreSkill, addSkill: addStoreSkill, removeSkill: removeStoreSkill } = useResumeStore();
  const { theme } = useTheme();
  const isDark = theme === 'dark';
  const appTheme = getAppTheme(isDark);

  const { control, register, handleSubmit, watch, formState: { errors }, reset } = useForm<SkillsFormData>({
    resolver: zodResolver(skillsSchema),
    defaultValues: { skills: [] },
  });

  useEffect(() => {
    reset({ skills: skills || [] }); // Populate RHF from store
  }, [skills, reset]);

  const { fields, append, remove } = useFieldArray({
    control,
    name: "skills",
  });

  useEffect(() => {
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    const subscription = watch((value, { name, type }) => {
      if (type === 'change' && value.skills) {
        value.skills.forEach((skillData, index) => {
          if (skillData && fields[index]) {
            const idToUpdate = skillData.id || fields[index].id;
            updateStoreSkill(index, { ...skillData, id: idToUpdate });
          }
        });
      }
    });
    return () => subscription.unsubscribe();
  }, [watch, updateStoreSkill, fields]);

  const handleAddSkill = () => {
    const newId = addStoreSkill();
    append({ 
      id: newId, 
      name: '', 
      level: 'Intermediate', 
      category: 'Technical' 
    });
  };
  
  const handleRemoveSkill = (index: number) => {
    const skillIdToRemove = fields[index].id;
    removeStoreSkill(skillIdToRemove);
    remove(index);
  };

  return (
    <form className="space-y-6 sm:space-y-8" onSubmit={handleSubmit(() => {})}>
      <div className="flex flex-col sm:flex-row justify-between sm:items-center gap-4 border-b pb-4 mb-6 sm:mb-8" style={{borderColor: appTheme.borderSecondary}}>
        <h2 className={cn("text-xl sm:text-2xl font-semibold", appTheme.textHeading)}>Skills</h2>
        <Button type="button" variant="outline" size="sm" onClick={handleAddSkill}>
          <PlusCircle className="w-4 h-4 mr-2" />
          Add Skill
        </Button>
      </div>
      
      <div className={cn("p-4 rounded-lg border flex items-start space-x-3", appTheme.tipBoxBg)}>
        <Lightbulb className={cn("w-5 h-5 mt-0.5 shrink-0", appTheme.tipBoxText)} />
        <p className={cn("text-sm", appTheme.tipBoxText)}>
          Showcase a mix of technical, soft, and tool-specific skills. Tailor these to the job descriptions you&apos;re targeting for best ATS compatibility.
        </p>
      </div>

      {fields.length > 0 ? (
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-5 sm:gap-6">
            {fields.map((item, index) => (
            <div 
                key={item.id} 
                className={cn(
                    "p-4 rounded-lg border space-y-4 relative", // Reduced padding for skill cards
                    appTheme.entryCardBg,
                    appTheme.entryCardBorder
                )}
            >
                <Button
                    type="button"
                    variant="ghost"
                    size="icon"
                    onClick={() => handleRemoveSkill(index)}
                    className="absolute top-2 right-2 text-red-400 hover:text-destructive hover:bg-destructive/10 w-7 h-7"
                    aria-label="Remove skill entry"
                >
                    <Trash2 className="w-3.5 h-3.5" />
                </Button>
                
                <div>
                    <Label htmlFor={`skills.${index}.name`}>Skill Name</Label>
                    <Input id={`skills.${index}.name`} {...register(`skills.${index}.name`)} placeholder="e.g., JavaScript" />
                    {errors.skills?.[index]?.name && <p className={cn("text-xs mt-1.5", appTheme.errorText)}>{errors.skills[index]?.name?.message}</p>}
                </div>

                <div>
                    <Label htmlFor={`skills.${index}.level`}>Proficiency Level</Label>
                    <div className="relative">
                        <Controller
                            name={`skills.${index}.level`}
                            control={control}
                            render={({ field }) => (
                                <Select id={`skills.${index}.level`} {...field} className="pr-10">
                                    {skillLevels.map(level => <option key={level} value={level}>{level}</option>)}
                                </Select>
                            )}
                        />
                        <Star className={cn("absolute right-3 top-1/2 transform -translate-y-1/2 w-4 h-4 pointer-events-none", appTheme.iconColor)} />
                    </div>
                    {errors.skills?.[index]?.level && <p className={cn("text-xs mt-1.5", appTheme.errorText)}>{errors.skills[index]?.level?.message}</p>}
                </div>
                
                <div>
                    <Label htmlFor={`skills.${index}.category`}>Category</Label>
                     <Controller
                        name={`skills.${index}.category`}
                        control={control}
                        render={({ field }) => (
                            <Select id={`skills.${index}.category`} {...field}>
                                {skillCategories.map(cat => <option key={cat} value={cat}>{cat}</option>)}
                            </Select>
                        )}
                    />
                    {errors.skills?.[index]?.category && <p className={cn("text-xs mt-1.5", appTheme.errorText)}>{errors.skills[index]?.category?.message}</p>}
                </div>
            </div>
            ))}
        </div>
      ) : (
        <div className={cn("text-center py-10 border rounded-xl", appTheme.entryCardBg, appTheme.entryCardBorder)}>
          <PlusCircle className={cn("w-12 h-12 mx-auto mb-4", appTheme.iconColor)} />
          <p className={cn("mb-3 font-medium", appTheme.textHeading)}>No skills added yet.</p>
          <p className={cn("text-sm", appTheme.textMuted)}>Highlight your expertise by adding relevant skills.</p>
        </div>
      )}
    </form>
  );
};

export default SkillsSection;
</file>

<file path="components/ui/button.tsx">
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"
import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        default: // Uses the primary gradient defined in tailwind.config.ts
          "bg-primary-gradient text-primary-foreground hover:opacity-90 shadow-md hover:shadow-lg transform transition-all duration-200 hover:-translate-y-px",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90 shadow-sm",
        outline:
          "border border-input bg-transparent hover:bg-accent hover:text-accent-foreground text-accent-foreground shadow-sm",
          // bg-transparent ensures it takes the page background. Text is accent color.
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80 shadow-sm",
        ghost:
          "text-accent-foreground hover:bg-accent hover:text-accent-foreground/90",
          // Text is accent, hover has a subtle background.
        link: "text-primary hover:text-primary/80 underline underline-offset-4",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8", // Good for primary CTAs
        icon: "h-10 w-10", // Ensure icons inside have appropriate size and padding
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }
</file>

<file path="components/ui/card.tsx">
// components/ui/card.tsx
import * as React from "react"
import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-xl border bg-card text-card-foreground shadow-lg", // Updated: rounded-xl, shadow-lg
      // backdrop-blur-sm can be added if bg-card has transparency and a blurred background is desired
      // e.g., "bg-card/80 backdrop-blur-sm" if --card is solid and you want to apply opacity here
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "flex flex-col space-y-1.5 p-6", // Standard padding
      className
    )}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLParagraphElement, // Should be HTMLHeadingElement for semantic correctness (h1-h6)
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  // Changed to h3 for semantics, adjust as needed for your document outline
  <h3
    ref={ref}
    className={cn(
      "text-xl font-semibold leading-none tracking-tight text-foreground", // Using text-foreground directly for titles
      // Or keep text-card-foreground if it's distinct and preferred for card titles
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn(
      "text-sm text-muted-foreground", // This is good
      className
    )}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "p-6 pt-0", // Standard padding, pt-0 if following a header
      className
    )}
    {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "flex items-center p-6 pt-0", // Standard padding, pt-0 if following content that has bottom padding
      className
    )}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }
</file>

<file path="components/ui/input.tsx">
// components/ui/input.tsx
import * as React from "react"
import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.InputHTMLAttributes<HTMLInputElement>>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border bg-background px-3 py-2 text-sm text-foreground", // Core structure
          "border-input",                      // Uses var(--input) for border color via tailwind.config
          "placeholder:text-muted-foreground", // Uses var(--muted-foreground)
          "ring-offset-background",            // Uses var(--background) for ring offset
          "focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:border-ring", // Uses var(--ring) for ring & border
          "file:border-0 file:bg-transparent file:text-sm file:font-medium",
          "disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }
</file>

<file path="components/ui/label.tsx">
// components/ui/label.tsx
import * as React from "react"
import { cn } from "@/lib/utils"

export type LabelProps = React.LabelHTMLAttributes<HTMLLabelElement>

const Label = React.forwardRef<HTMLLabelElement, LabelProps>(
  ({ className, ...props }, ref) => (
    <label
      ref={ref}
      className={cn(
        "block text-sm font-medium mb-1.5", // Base styling
        "text-foreground/90", // Use foreground color with slight opacity for subtlety
        // Alternatively, for a more distinct label color:
        // "text-muted-foreground",
        // Or if you define a specific label text color in your theme:
        // "text-label",
        className
      )}
      {...props}
    />
  )
)
Label.displayName = "Label"

export { Label }
</file>

<file path="components/ui/progress.tsx">
// components/ui/progress.tsx
import * as React from "react"
import { cn } from "@/lib/utils"

interface ProgressProps extends React.HTMLAttributes<HTMLDivElement> {
  value?: number // Should be 0 to 100
}

const Progress = React.forwardRef<HTMLDivElement, ProgressProps>(
  ({ className, value, ...props }, ref) => {
    const progressValue = Math.max(0, Math.min(100, value || 0)); // Ensure value is between 0 and 100

    return (
      <div
        ref={ref}
        className={cn(
          "relative h-2.5 w-full overflow-hidden rounded-full bg-muted", // Use themed muted background for track, increased height
          className
        )}
        {...props}
      >
        <div
          className={cn(
            "h-full w-full flex-1 bg-primary-gradient transition-transform duration-300 ease-out" // Use primary gradient, refined transition
          )}
          style={{ transform: `translateX(-${100 - progressValue}%)` }}
        />
      </div>
    );
  }
);
Progress.displayName = "Progress"

export { Progress }
</file>

<file path="components/ui/select.tsx">
// components/ui/select.tsx
import * as React from "react"
import { cn } from "@/lib/utils"

const Select = React.forwardRef<HTMLSelectElement, React.SelectHTMLAttributes<HTMLSelectElement>>(
  ({ className, children, ...props }, ref) => {
    return (
      <select
        className={cn(
          "flex h-10 w-full rounded-md border bg-background px-3 py-2 text-sm text-foreground", // Core structure
          "border-input",                      // Uses var(--input) for border color via tailwind.config
          // Note: Native select elements don't have a traditional "placeholder". The first <option> often serves this role.
          // No direct placeholder class needed here unless you are building a custom select.
          "ring-offset-background",            // Uses var(--background) for ring offset
          "focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:border-ring", // Uses var(--ring) for ring & border
          "disabled:cursor-not-allowed disabled:opacity-50",
          // To add a custom arrow and hide the default, you might add:
          // "appearance-none bg-no-repeat bg-right", 
          // And then use a background-image for the arrow, or an SVG icon.
          // For now, we keep the native arrow.
          className
        )}
        ref={ref}
        {...props}
      >
        {children}
      </select>
    )
  }
)
Select.displayName = "Select"

export { Select }
</file>

<file path="components/ui/textarea.tsx">
// components/ui/textarea.tsx
import * as React from "react"
import { cn } from "@/lib/utils"

const Textarea = React.forwardRef<HTMLTextAreaElement, React.TextareaHTMLAttributes<HTMLTextAreaElement>>(
  ({ className, ...props }, ref) => {
    return (
      <textarea
        className={cn(
          "flex min-h-[80px] w-full rounded-md border bg-background px-3 py-2 text-sm text-foreground", // Core structure
          "border-input",                      // Uses var(--input) for border color via tailwind.config
          "placeholder:text-muted-foreground", // Uses var(--muted-foreground)
          "ring-offset-background",            // Uses var(--background) for ring offset
          "focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:border-ring", // Uses var(--ring) for ring & border
          "disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Textarea.displayName = "Textarea"

export { Textarea }
</file>

<file path="context/theme-provider.tsx">
// context/theme-provider.tsx
"use client";

import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';

type Theme = "light" | "dark";

interface ThemeContextType {
  theme: Theme;
  toggleTheme: () => void;
}

const ThemeContext = createContext<ThemeContextType | undefined>(undefined);

export const ThemeProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  const [theme, setTheme] = useState<Theme>("dark"); // Default to dark

  useEffect(() => {
    const storedTheme = localStorage.getItem("theme") as Theme | null;
    if (storedTheme) {
      setTheme(storedTheme);
      document.documentElement.classList.toggle("dark", storedTheme === "dark");
    } else {
      // Set initial theme based on system preference if no stored theme
      const prefersDark = window.matchMedia("(prefers-color-scheme: dark)").matches;
      const initialTheme = prefersDark ? "dark" : "light";
      setTheme(initialTheme);
      document.documentElement.classList.toggle("dark", initialTheme === "dark");
      // No need to localStorage.setItem("theme", initialTheme) here,
      // as it implies the user hasn't made a choice yet. Only store on explicit toggle.
    }
  }, []); // Empty dependency array: runs once on mount

  const toggleTheme = () => {
    setTheme((prevTheme) => {
      const newTheme = prevTheme === "light" ? "dark" : "light";
      localStorage.setItem("theme", newTheme); // Store user's explicit choice
      document.documentElement.classList.toggle("dark", newTheme === "dark");
      return newTheme;
    });
  };

  return (
    <ThemeContext.Provider value={{ theme, toggleTheme }}>
      {children}
    </ThemeContext.Provider>
  );
};

export const useTheme = () => {
  const context = useContext(ThemeContext);
  if (context === undefined) {
    throw new Error("useTheme must be used within a ThemeProvider");
  }
  return context;
};
</file>

<file path="hooks/use-resume.ts">
// hooks/use-resume.ts
import { create } from 'zustand';
import { 
    ResumeData, 
    PersonalInfo, 
    EducationEntry, 
    ExperienceEntry, 
    SkillEntry, 
    ProjectEntry 
} from '@/types/resume';
import { v4 as uuidv4 } from 'uuid';

// Define the initial state for a new resume, excluding dynamic parts like userId or title
const initialResumeSubStates: Omit<ResumeData, 'userId' | 'title' | 'id' | 'atsScore'> = {
  personalInfo: {
    firstName: '',
    lastName: '',
    email: '',
    phone: '',
    location: '',
    linkedin: '',
    website: '',
    summary: '',
  },
  education: [],
  experience: [],
  skills: [],
  projects: [],
};

// Define the full store state including methods
export interface ResumeStateStore extends ResumeData {
  id?: string; // Optional: The DB ID of the resume being edited/created
  
  // Setters for top-level resume properties
  setId: (id: string) => void;
  setUserId: (userId: string) => void; // Though userId is often set once on init
  setTitle: (title: string) => void;
  setAtsScore: (score: number) => void;
  
  // Methods for PersonalInfo
  updatePersonalInfo: (data: Partial<PersonalInfo>) => void;
  
  // Methods for Education array
  addEducation: () => string; // Returns new entry ID
  updateEducation: (index: number, data: Partial<EducationEntry>) => void;
  removeEducation: (id: string) => void; // Remove by entry's unique ID
  
  // Methods for Experience array
  addExperience: () => string; // Returns new entry ID
  updateExperience: (index: number, data: Partial<ExperienceEntry>) => void;
  removeExperience: (id: string) => void;

  // Methods for Skills array
  addSkill: () => string; // Returns new entry ID
  updateSkill: (index: number, data: Partial<SkillEntry>) => void;
  removeSkill: (id: string) => void;

  // Methods for Projects array
  addProject: () => string; // Returns new entry ID
  updateProject: (index: number, data: Partial<ProjectEntry>) => void;
  removeProject: (id: string) => void;
  
  // Function to load an existing resume (e.g., for editing)
  loadResume: (resume: ResumeData & { id: string }) => void; // Ensure loaded resume has an ID
  // Function to reset to initial state (e.g., for creating a new resume)
  resetResume: (userId: string) => void;
}

// eslint-disable-next-line @typescript-eslint/no-unused-vars
export const useResumeStore = create<ResumeStateStore>((set, get) => ({
  // Initial state values
  id: undefined,
  userId: '', 
  title: 'Untitled Resume',
  atsScore: 0,
  ...initialResumeSubStates,

  // Implementations
  setId: (id) => set({ id }),
  setUserId: (userId) => set({ userId }),
  setTitle: (title) => set({ title }),
  setAtsScore: (score) => set({ atsScore: score }),

  updatePersonalInfo: (data) => set((state) => ({
    personalInfo: { ...state.personalInfo, ...data },
  })),

  addEducation: () => {
    const newId = uuidv4();
    set((state) => ({
      education: [
        ...state.education, 
        { id: newId, institution: '', degree: '', field: '', startDate: '', endDate: '', achievements: [] }
      ],
    }));
    return newId;
  },
  updateEducation: (index, data) => set((state) => {
    const educationList = [...state.education];
    if (educationList[index]) {
      educationList[index] = { ...educationList[index], ...data };
    }
    return { education: educationList };
  }),
  removeEducation: (idToRemove) => set((state) => ({
    education: state.education.filter(edu => edu.id !== idToRemove),
  })),

  addExperience: () => {
    const newId = uuidv4();
    set((state) => ({
      experience: [
        ...state.experience, 
        { id: newId, company: '', position: '', startDate: '', endDate: '', description: '', achievements: [] }
      ],
    }));
    return newId;
  },
  updateExperience: (index, data) => set((state) => {
    const experienceList = [...state.experience];
    if (experienceList[index]) {
      experienceList[index] = { ...experienceList[index], ...data };
    }
    return { experience: experienceList };
  }),
  removeExperience: (idToRemove) => set((state) => ({
    experience: state.experience.filter(exp => exp.id !== idToRemove),
  })),

  addSkill: () => {
    const newId = uuidv4();
    set((state) => ({
      skills: [
        ...state.skills, 
        { id: newId, name: '', level: 'Intermediate', category: 'Technical' }
      ],
    }));
    return newId;
  },
  updateSkill: (index, data) => set((state) => {
    const skillsList = [...state.skills];
    if (skillsList[index]) {
      skillsList[index] = { ...skillsList[index], ...data };
    }
    return { skills: skillsList };
  }),
  removeSkill: (idToRemove) => set((state) => ({
    skills: state.skills.filter(skill => skill.id !== idToRemove),
  })),
  
  addProject: () => {
    const newId = uuidv4();
    set((state) => ({
      projects: [
        ...state.projects, 
        { id: newId, name: '', description: '', technologies: [] }
      ],
    }));
    return newId;
  },
  updateProject: (index, data) => set((state) => {
    const projectsList = [...state.projects];
    if (projectsList[index]) {
      projectsList[index] = { ...projectsList[index], ...data };
    }
    return { projects: projectsList };
  }),
  removeProject: (idToRemove) => set((state) => ({
    projects: state.projects.filter(proj => proj.id !== idToRemove),
  })),
  
  loadResume: (resumeToLoad) => set({ 
    ...resumeToLoad, // This spreads all properties from resumeToLoad
                     // including its id, userId, title, atsScore, and all sections
  }),
  resetResume: (userIdForNewResume) => set({
    id: undefined, // Explicitly reset the resume's own ID
    userId: userIdForNewResume,
    title: 'Untitled Resume',
    atsScore: 0,
    ...initialResumeSubStates, // Spread the clean sub-states
  }),
}));
</file>

<file path="lib/ai/ats-scorer.ts">
// lib/ai/ats-scorer.ts
import { model, generationConfig, safetySettings } from './gemini'; // Assuming gemini.ts is set up correctly
// eslint-disable-next-line @typescript-eslint/no-unused-vars
import { ResumeData, ATSScoreDetails, PersonalInfo, ExperienceEntry, EducationEntry, SkillEntry, ProjectEntry } from '@/types/resume';

// Helper function to construct a text representation of the resume
function constructResumeText(resumeData: Partial<ResumeData>): string {
  let text = `Resume Title: ${resumeData.title || 'N/A'}\n\n`;
  
  if (resumeData.personalInfo) {
    const pi = resumeData.personalInfo;
    text += `Personal Information:\n`;
    text += `Name: ${pi.firstName || ''} ${pi.lastName || ''}\n`;
    text += `Email: ${pi.email || ''}\n`;
    text += `Phone: ${pi.phone || ''}\n`;
    text += `Location: ${pi.location || ''}\n`;
    if (pi.linkedin) text += `LinkedIn: ${pi.linkedin}\n`;
    if (pi.website) text += `Website: ${pi.website}\n`;
    text += `Summary: ${pi.summary || 'N/A'}\n\n`;
  }

  if (resumeData.experience && resumeData.experience.length > 0) {
    text += `Experience:\n`;
    resumeData.experience.forEach(exp => {
      text += `- Position: ${exp.position || 'N/A'} at ${exp.company || 'N/A'}\n`;
      text += `  Dates: ${exp.startDate || 'N/A'} - ${exp.endDate || 'N/A'}\n`;
      text += `  Description: ${exp.description || 'N/A'}\n`;
      if (exp.achievements && exp.achievements.length > 0) {
        text += `  Achievements:\n${exp.achievements.filter(a => a).map(a => `    * ${a}`).join('\n')}\n`;
      }
    });
    text += `\n`;
  }

  if (resumeData.education && resumeData.education.length > 0) {
    text += `Education:\n`;
    resumeData.education.forEach(edu => {
      text += `- Degree: ${edu.degree || 'N/A'} in ${edu.field || 'N/A'} from ${edu.institution || 'N/A'}\n`;
      text += `  Dates: ${edu.startDate || 'N/A'} - ${edu.endDate || 'N/A'}\n`;
      if (edu.gpa) text += `  GPA: ${edu.gpa}\n`;
      if (edu.achievements && edu.achievements.length > 0) {
        text += `  Achievements:\n${edu.achievements.filter(a => a).map(a => `    * ${a}`).join('\n')}\n`;
      }
    });
    text += `\n`;
  }
  
  if (resumeData.skills && resumeData.skills.length > 0) {
    text += `Skills:\n`;
    resumeData.skills.forEach(skill => {
        text += `- ${skill.name || 'N/A'} (${skill.level || 'N/A'}, ${skill.category || 'N/A'})\n`
    });
    text += `\n`;
  }

  if (resumeData.projects && resumeData.projects.length > 0) {
    text += `Projects:\n`;
    resumeData.projects.forEach(proj => {
        text += `- Name: ${proj.name || 'N/A'}\n Description: ${proj.description || 'N/A'}\n Technologies: ${proj.technologies?.join(', ') || 'N/A'}\n`;
        if(proj.url) text += ` URL: ${proj.url}\n`;
        if(proj.github) text += ` GitHub: ${proj.github}\n`;
    });
  }
  return text.trim();
}

// Define the fallback (default) score structure
const defaultAtsScoreDetails: ATSScoreDetails = {
    overall: 10, // Default low score
    suggestions: ["AI analysis could not be completed. Please ensure your resume has sufficient content and try again."],
    breakdown: {
        keywords: { score: 0, suggestions: ["Content needed for keyword analysis."] },
        clarityAndConciseness: { score: 0, suggestions: ["Content needed for clarity analysis."] },
        actionVerbs: { score: 0, suggestions: ["Content needed for action verb analysis."] },
        quantifiableResults: { score: 0, suggestions: ["Content needed for quantifiable results analysis."] },
        formattingAndConciseness: { score: 0, suggestions: ["Content needed for formatting analysis."] }, // Corrected key
        lengthAndRelevance: { score: 0, suggestions: ["Content needed for length/relevance analysis."] },
    }
};


export async function getAtsScoreAndSuggestions(resumeData: Partial<ResumeData>): Promise<ATSScoreDetails> {
  const resumeTextContent = constructResumeText(resumeData);

  if (!resumeTextContent || resumeTextContent.split('\n').length < 5) { // Basic check for minimal content
    console.warn("[ATS Scorer] Insufficient content for meaningful analysis. Returning default low score.");
    return {
        ...defaultAtsScoreDetails,
        overall: 5,
        suggestions: ["Please add more content to your resume for an accurate ATS score and suggestions."]
    };
  }

 const prompt = `
    You are an expert ATS (Applicant Tracking System) resume analyzer.
    Analyze the following resume content and provide a detailed ATS compatibility assessment.
    The output MUST be a single, valid JSON object adhering strictly to this TypeScript interface:
    \`\`\`typescript
    interface ATSScoreDetails {
      overall: number; // Holistic ATS friendliness score (0-100).
      breakdown?: { 
        keywords: { score: number; suggestions: string[]; }; 
        clarityAndConciseness: { score: number; suggestions: string[]; };
        actionVerbs: { score: number; suggestions: string[]; };
        quantifiableResults: { score: number; suggestions: string[]; };
        formattingAndConciseness: { score: number; suggestions: string[]; };
        lengthAndRelevance: { score: number; suggestions: string[]; };
      }; // End of the 'breakdown' object.
      suggestions: string[]; // <<<<---- VERY IMPORTANT: This is a TOP-LEVEL array for 2-4 concise, actionable, overall suggestions. This 'suggestions' array MUST NOT be inside the 'breakdown' object. It must be a direct property of the root JSON object.
    }
    \`\`\`
    For each category in 'breakdown', provide a 'score' (0-100) and a 'suggestions' array (1-2 concise points, or an empty array if the category is strong).
    The top-level 'suggestions' array is mandatory and should always exist and contain 2-4 high-level improvement points.
    Ensure all string values in the JSON are properly escaped. Do not include any text, markdown (like \`\`\`json\`), or anything else outside the single JSON object itself.
    Your entire response must start with "{" and end with "}".

    Resume Content to Analyze:
    ---
    ${constructResumeText(resumeData)}
    ---
  `;

  let attempt = 0;
  const maxAttempts = 2; 

  while (attempt < maxAttempts) {
    attempt++;
    try {
      const chatSession = model.startChat({
        generationConfig, // Ensure responseMimeType: "application/json" is in gemini.ts
        safetySettings,
        history: [],
      });

      const result = await chatSession.sendMessage(prompt);
      const responseText = result.response.text();
      
      console.log(`[ATS Scorer Attempt ${attempt}] Gemini Raw Response Text:\n---\n${responseText}\n---`);

      let cleanedJsonText = responseText.trim();
      const jsonMatch = cleanedJsonText.match(/(\{[\s\S]*\})/); // Try to extract content between first { and last }
      if (jsonMatch && jsonMatch[0]) {
          cleanedJsonText = jsonMatch[0];
      } else {
          // Fallback cleaning for common markdown ```json ... ```
          if (cleanedJsonText.startsWith('```json')) cleanedJsonText = cleanedJsonText.substring(7);
          else if (cleanedJsonText.startsWith('```')) cleanedJsonText = cleanedJsonText.substring(3);
          if (cleanedJsonText.endsWith('```')) cleanedJsonText = cleanedJsonText.substring(0, cleanedJsonText.length - 3);
          cleanedJsonText = cleanedJsonText.trim();
      }
      
      console.log(`[ATS Scorer Attempt ${attempt}] Cleaned JSON Text for Parsing:\n---\n${cleanedJsonText}\n---`);
      
      if (!cleanedJsonText) {
        throw new Error("Cleaned JSON text is empty after attempting to extract from AI response.");
      }
      
       // eslint-disable-next-line @typescript-eslint/no-explicit-any
       const parsedAsAny = JSON.parse(cleanedJsonText) as any;

      // ---- START: NORMALIZATION LOGIC (CRUCIAL) ----
      if ((!parsedAsAny.suggestions || !Array.isArray(parsedAsAny.suggestions)) && 
          parsedAsAny.breakdown && 
          Array.isArray(parsedAsAny.breakdown.suggestions)) {
          console.warn("[ATS Scorer] NORMALIZING: Top-level 'suggestions' missing. Moving 'breakdown.suggestions' to top level and deleting from breakdown.");
          parsedAsAny.suggestions = parsedAsAny.breakdown.suggestions;
          delete parsedAsAny.breakdown.suggestions; 
      }
      // ---- END: NORMALIZATION LOGIC ----
      
      const finalResult = parsedAsAny as ATSScoreDetails;

      // Validate essential top-level properties AFTER normalization
      if (typeof finalResult.overall !== 'number' || finalResult.overall < 0 || finalResult.overall > 100 ||
          !finalResult.suggestions || !Array.isArray(finalResult.suggestions) || finalResult.suggestions.length === 0 ) {
          console.error("[ATS Scorer] VALIDATION FAILED: Final JSON missing/invalid 'overall' or TOP-LEVEL 'suggestions'.", finalResult);
          throw new Error("Final JSON does not match structure (overall or top-level suggestions missing, empty, or invalid).");
      }

      // ... (rest of your breakdown validation logic - this should be fine if the above is correct)
      // Ensure defaultAtsScoreDetails and the breakdown validation use "formattingAndConciseness"
      const requiredBreakdownKeys: (keyof NonNullable<ATSScoreDetails['breakdown']>)[] = 
          ["keywords", "clarityAndConciseness", "actionVerbs", "quantifiableResults", "formattingAndConciseness", "lengthAndRelevance"];
      
      if (!finalResult.breakdown) {
        console.warn("[ATS Scorer] AI response missing 'breakdown' object. Providing default breakdown.");
        finalResult.breakdown = { ...defaultAtsScoreDetails.breakdown! };
      } else {
        for (const key of requiredBreakdownKeys) {
            const category = finalResult.breakdown[key];
            if (!category || typeof category.score !== 'number' || category.score < 0 || category.score > 100 || 
                !Array.isArray(category.suggestions)) {
                 console.warn(`[ATS Scorer] Breakdown for '${key}' malformed or missing. Applying default.`);
                 finalResult.breakdown[key] = { ...defaultAtsScoreDetails.breakdown![key]! };
            }
        }
      }
      return finalResult;

    } catch (error) {
      console.error(`[ATS Scorer Attempt ${attempt}] Error parsing or validating JSON:`, error);
      if (attempt >= maxAttempts) {
        console.error("All ATS scoring attempts failed. Returning fallback default score.");
        return defaultAtsScoreDetails;
      }
      // Optional: add a small delay before retrying
      // await new Promise(resolve => setTimeout(resolve, 300));
    }
  }
  // This line should theoretically be unreachable if maxAttempts >= 1
  console.error("Exhausted ATS scoring attempts, returning default.");
  return defaultAtsScoreDetails; 
}
</file>

<file path="lib/ai/experience-enhancer.ts">
// lib/ai/experience-enhancer.ts
import { model, generationConfig, safetySettings } from './gemini'; // Your Gemini client setup
// eslint-disable-next-line @typescript-eslint/no-unused-vars
import { ExperienceEntry } from '@/types/resume';

interface EnhanceExperiencePayload {
  description: string;
  achievements?: string[]; // Existing achievements
  title?: string; // Resume title, for context
  jobTitle?: string; // Target job title, for context (optional)
  targetCompanyValues?: string; // <<< NEW FIELD: Comma-separated string of keywords/values
}

interface EnhancedExperienceOutput {
  enhancedDescription: string;
  suggestedAchievements: string[];
}

export async function enhanceExperienceEntry(
  payload: EnhanceExperiencePayload
): Promise<EnhancedExperienceOutput> {
  const { description, achievements = [], title, jobTitle, targetCompanyValues } = payload;

  let contextText = "The user is building a resume";
  if (title) contextText += ` titled "${title}"`;
  if (jobTitle) contextText += ` for a role like "${jobTitle}"`;

  // <<< ADD COMPANY VALUES TO CONTEXT
  if (targetCompanyValues && targetCompanyValues.trim() !== '') {
    contextText += `. They are targeting a company that values: "${targetCompanyValues}". Please try to incorporate or reflect these values subtly in the language and focus of the enhanced content if appropriate.`;
  } else {
    contextText += ".";
  }

  const achievementsText = achievements.length > 0
    ? `Current achievements listed:\n${achievements.map(a => `- ${a}`).join('\n')}`
    : "No specific achievements listed yet for this role.";

  const prompt = `
    You are an expert resume writing assistant specializing in ATS optimization.
    ${contextText}

    The user has provided the following job experience description and (optionally) existing achievements for their role as "${jobTitle || 'a professional'}".

    Current Description:
    "${description}"

    ${achievementsText}

    Task:
    1. Rewrite the "Current Description" to be more impactful, concise, and ATS-friendly. Focus on using strong action verbs and highlighting responsibilities clearly. The rewritten description should be a single paragraph or a few short sentences.
    2. Based on the rewritten description AND considering the target company values (if provided), suggest 3-5 new or refined achievement-oriented bullet points. Each bullet point must start with a strong action verb. Quantify achievements with data or specific examples where possible. If existing achievements were provided, either refine them or suggest entirely new ones that are more impactful.

    Output MUST be a valid JSON object with the following structure:
    \`\`\`json
    {
      "enhancedDescription": "The rewritten job description text here.",
      "suggestedAchievements": [
        "Suggested achievement 1...",
        "Suggested achievement 2...",
        "Suggested achievement 3..."
      ]
    }
    \`\`\`
    Ensure all string values in the JSON are properly escaped.
    Do not include any explanatory text or markdown formatting outside the JSON object.
    Your entire response must start with "{" and end with "}".
  `;

  try {
    const chatSession = model.startChat({ generationConfig, safetySettings, history: [] });
    const result = await chatSession.sendMessage(prompt);
    const responseText = result.response.text();

    console.log("[Experience Enhancer] Gemini Raw Response:", responseText);
    console.log("[Experience Enhancer] Prompt Sent:", prompt); // Log the prompt

    let cleanedJsonText = responseText.trim();
    const jsonMatch = cleanedJsonText.match(/(\{[\s\S]*\})/);
    if (jsonMatch && jsonMatch[0]) cleanedJsonText = jsonMatch[0];
    else {
        if (cleanedJsonText.startsWith('```json')) cleanedJsonText = cleanedJsonText.substring(7);
        else if (cleanedJsonText.startsWith('```')) cleanedJsonText = cleanedJsonText.substring(3);
        if (cleanedJsonText.endsWith('```')) cleanedJsonText = cleanedJsonText.substring(0, cleanedJsonText.length - 3);
        cleanedJsonText = cleanedJsonText.trim();
    }

    console.log("[Experience Enhancer] Cleaned JSON:", cleanedJsonText);
    if (!cleanedJsonText) throw new Error("Cleaned JSON text is empty from AI.");

    const parsedResult = JSON.parse(cleanedJsonText) as EnhancedExperienceOutput;

    if (!parsedResult.enhancedDescription || !Array.isArray(parsedResult.suggestedAchievements)) {
      throw new Error("AI response for experience enhancement is missing required fields.");
    }
    return parsedResult;

  } catch (error) {
    console.error("Error enhancing experience with AI:", error);
    return {
      enhancedDescription: description + " (AI enhancement failed, please review manually)",
      suggestedAchievements: achievements,
    };
  }
}
</file>

<file path="lib/utils.ts">
import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
</file>

<file path="prisma/schema.prisma">
// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL") // Optional: for connection pooling tools like PgBouncer with Prisma Accelerate
}

// We don't define a User model here explicitly managed by Prisma for auth,
// as Clerk handles user management. We'll link resumes to Clerk's userId.

model Resume {
  id        String   @id @default(cuid())
  userId    String   // Clerk User ID
  title     String
  atsScore  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  personalInfo PersonalInfo?
  education    EducationEntry[]
  experience   ExperienceEntry[]
  skills       SkillEntry[]
  projects     ProjectEntry[]

  @@index([userId])
}

model PersonalInfo {
  id        String  @id @default(cuid())
  firstName String
  lastName  String
  email     String
  phone     String
  location  String
  linkedin  String?
  website   String?
  summary   String  @db.Text // Use Text for potentially longer content

  resume   Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  resumeId String @unique // Each resume has one personal info
}

model EducationEntry {
  id           String    @id @default(cuid())
  institution  String
  degree       String
  field        String
  startDate    String
  endDate      String
  gpa          String?
  achievements String[]  @default([]) // Array of strings for bullet points

  resume   Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  resumeId String

  @@index([resumeId])
}

model ExperienceEntry {
  id                  String    @id @default(cuid())
  company             String
  position            String
  startDate           String
  endDate             String
  description         String    @db.Text
  enhancedDescription String?   @db.Text
  achievements        String[]  @default([])
  targetCompanyValues String?   // <<< ADDED FIELD
  resume   Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  resumeId String

  @@index([resumeId])
}

model SkillEntry {
  id       String @id @default(cuid())
  name     String
  level    String // Could be an Enum later if strict values are enforced
  category String // Could be an Enum later

  resume   Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  resumeId String

  @@index([resumeId])
  @@unique([resumeId, name]) // Optional: prevent duplicate skill names per resume
}

model ProjectEntry {
  id           String   @id @default(cuid())
  name         String
  description  String   @db.Text
  technologies String[] @default([])
  url          String?
  github       String?

  resume   Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  resumeId String

  @@index([resumeId])
}
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts", "app/api/resumes/[resumeId]/route.ts"],
  "exclude": ["node_modules"]
}
</file>

<file path="app/api/resumes/route.ts">
// app/api/resumes/route.ts
import { NextResponse } from 'next/server';
import { auth } from '@clerk/nextjs/server';
import { prisma } from '@/lib/db';
import { ResumeData } from '@/types/resume'; // Assuming your full ResumeData type

// POST handler (Create new resume)
export async function POST(request: Request) {
  try {
    const { userId } = await auth();
    if (!userId) {
      return new NextResponse('Unauthorized', { status: 401 });
    }

    // For body type, ensure it matches what the frontend sends for creation
    // Omitting fields that are auto-generated or derived on the backend.
    const body = await request.json() as Omit<ResumeData, 'id' | 'userId' | 'createdAt' | 'updatedAt' | 'atsScore'> & { title: string, atsScore?:number };
    
    const {
      title,
      personalInfo,
      education = [],
      experience = [],
      skills = [],
      projects = [],
      atsScore = 0 // Default ATS score from client or calculate here
    } = body;

    if (!title || !personalInfo) {
        return new NextResponse('Missing required fields (title or personalInfo)', { status: 400 });
    }

    const newResume = await prisma.resume.create({
      data: {
        userId,
        title,
        atsScore,
        personalInfo: { create: personalInfo },
        education: { create: education.map(edu => ({...edu, id: undefined})) },
        experience: { create: experience.map(exp => ({...exp, id: undefined})) },
        skills: { create: skills.map(skill => ({...skill, id: undefined})) },
        projects: { create: projects.map(proj => ({...proj, id: undefined})) },
      },
      include: { 
        personalInfo: true, education: true, experience: true,
        skills: true, projects: true,
      },
    });

    return NextResponse.json(newResume, { status: 201 });
  } catch (error) {
    console.error('[RESUMES_POST_API]', error);
    return new NextResponse('Internal Server Error', { status: 500 });
  }
}

// GET handler (Get all resumes for the user)
export async function GET() { // request parameter is optional if not used
  try {
    const { userId } = await auth();
    if (!userId) {
      return new NextResponse('Unauthorized', { status: 401 });
    }

    const resumes = await prisma.resume.findMany({
      where: {
        userId: userId,
      },
      orderBy: {
        updatedAt: 'desc',
      },
      select: { // Select only necessary fields for the dashboard list
        id: true,
        title: true,
        atsScore: true,
        updatedAt: true,
        // Add 'status' if it's in your Prisma model
      }
    });

    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const resumesWithStatus = resumes.map((r: any) => ({
        ...r,
        status: r.atsScore > 70 ? 'completed' : 'draft' as 'completed' | 'draft' 
    }));

    return NextResponse.json(resumesWithStatus);

  } catch (error) {
    console.error('[RESUMES_GET_ALL_API]', error); // Changed log identifier
    return new NextResponse('Internal Server Error', { status: 500 });
  }
}
</file>

<file path="components/resume/resume-preview.tsx">
// components/resume/resume-preview.tsx
'use client'; // Ensure client component directive

import React from 'react';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Eye, User, Briefcase, GraduationCap, Star as StarIcon, Wrench, Link as LinkIcon, FileText, Github } from 'lucide-react'; // Renamed Star to StarIcon, Link to LinkIcon
import { useShallowResumeSelector } from '@/hooks/useShallowResumeSelector';
import { useTheme } from '@/context/theme-provider'; // Import useTheme
import { cn } from '@/lib/utils'; // Import cn

// Define AppTheme (or import from a central config)
function getAppTheme(isDark: boolean) {
  return {
    textHeading: isDark ? 'text-neutral-100' : 'text-neutral-800',
    textSubHeading: isDark ? 'text-neutral-200' : 'text-neutral-700', // For slightly less emphasis than main heading
    textBody: isDark ? 'text-neutral-300' : 'text-neutral-600',
    textMuted: isDark ? 'text-neutral-400' : 'text-neutral-500',
    textLink: isDark ? 'text-blue-400 hover:text-blue-300' : 'text-blue-600 hover:text-blue-700',
    borderSecondary: isDark ? 'border-neutral-700/50' : 'border-neutral-200',
    iconAccentColor: isDark ? 'text-blue-400' : 'text-blue-600', // For main card icon
    sectionIconColor: isDark ? 'text-purple-400' : 'text-purple-500', // For icons next to section titles
    skillPillBg: isDark ? 'bg-purple-500/10' : 'bg-purple-100',
    skillPillText: isDark ? 'text-purple-300' : 'text-purple-700',
    previewContentBg: isDark ? 'bg-neutral-800/40' : 'bg-slate-50', // Background for the content area inside preview
  };
}

const ResumePreview: React.FC = () => {
  const { theme } = useTheme();
  const isDark = theme === 'dark';
  const appTheme = getAppTheme(isDark);

  const {
    title: resumeTitle, // Renamed for clarity, as 'title' is also used for section titles
    personalInfo,
    education,
    experience,
    skills,
    projects,
  } = useShallowResumeSelector();

  const SectionTitle: React.FC<{ icon: React.ElementType, title: string, className?: string }> = ({ icon: Icon, title, className }) => (
    <div className={cn("flex items-center mt-5 mb-2.5 border-b pb-1.5", appTheme.borderSecondary, className)}>
      <Icon className={cn("w-4 h-4 mr-2.5 shrink-0", appTheme.sectionIconColor)} />
      <h3 className={cn("text-xs font-semibold uppercase tracking-wider", appTheme.textSubHeading)}>{title}</h3>
    </div>
  );

  const isEmpty = 
    (!personalInfo.firstName && !personalInfo.summary) &&
    education.length === 0 &&
    experience.length === 0 &&
    skills.length === 0 &&
    projects.length === 0;

  return (
    <Card className="shadow-xl"> {/* Uses themed Card */}
      <CardHeader className="pb-2 sm:pb-3">
         <div className="flex items-center justify-between">
            <CardTitle className={cn("text-base sm:text-lg font-semibold", appTheme.textHeading)}>
              Live Preview
            </CardTitle>
            <Eye className={cn("h-5 w-5 sm:h-6 sm:w-6", appTheme.iconAccentColor)} />
        </div>
        {resumeTitle && resumeTitle !== "Untitled Resume" && (
            <CardDescription className={cn("text-xs pt-1", appTheme.textMuted)}>
                {resumeTitle}
            </CardDescription>
        )}
      </CardHeader>
      <CardContent className="text-xs max-h-[65vh] sm:max-h-[70vh] overflow-y-auto p-3 sm:p-4 styled-scrollbar">
        {isEmpty ? (
            <div className={cn("text-center py-10 px-4 rounded-md", appTheme.previewContentBg)}>
                <FileText className={cn("w-12 h-12 mx-auto mb-4", appTheme.textMuted)} />
                <p className={cn("font-medium", appTheme.textSubHeading)}>Your resume preview will appear here.</p>
                <p className={cn("text-xs mt-1", appTheme.textMuted)}>Start filling in your details on the left.</p>
            </div>
        ) : (
            <div className={cn("p-3 sm:p-4 rounded-md", appTheme.previewContentBg)}> {/* Inner container for preview content styling */}
            {/* Header */}
            {(personalInfo.firstName || personalInfo.lastName) && (
                <div className="text-center mb-4">
                    <h1 className={cn("text-lg sm:text-xl font-bold", appTheme.textHeading)}>
                    {personalInfo.firstName || "[First Name]"}{" "}
                    {personalInfo.lastName || "[Last Name]"}
                    </h1>
                    <p className={cn("text-xs", appTheme.textBody)}>
                    {personalInfo.location || "[Location]"}{personalInfo.location && (personalInfo.phone || personalInfo.email) ? " | " : ""}
                    {personalInfo.phone || "[Phone]"}{personalInfo.phone && personalInfo.email ? " | " : ""}
                    {personalInfo.email || "[Email]"}
                    </p>
                    <div className="mt-1 space-x-2">
                        {personalInfo.linkedin && (
                        <a href={personalInfo.linkedin.startsWith('http') ? personalInfo.linkedin : `https://${personalInfo.linkedin}`} target="_blank" rel="noopener noreferrer" className={cn("text-xs", appTheme.textLink)}>
                            LinkedIn
                        </a>
                        )}
                        {personalInfo.website && personalInfo.linkedin && (<span className={appTheme.textMuted}>|</span>)}
                        {personalInfo.website && (
                        <a href={personalInfo.website.startsWith('http') ? personalInfo.website : `https://${personalInfo.website}`} target="_blank" rel="noopener noreferrer" className={cn("text-xs", appTheme.textLink)}>
                            Portfolio
                        </a>
                        )}
                    </div>
                </div>
            )}

            {/* Summary */}
            {personalInfo.summary && (
                <>
                <SectionTitle icon={User} title="Summary" />
                <p className={cn("text-xs leading-relaxed whitespace-pre-line", appTheme.textBody)}>
                    {personalInfo.summary}
                </p>
                </>
            )}

            {/* Experience */}
            {experience.length > 0 && (
                <>
                <SectionTitle icon={Briefcase} title="Experience" />
                {experience.map((exp) => (
                    <div key={exp.id} className="mb-3 last:mb-0">
                    <h4 className={cn("text-sm font-semibold", appTheme.textSubHeading)}>{exp.position || "[Position]"}</h4>
                    <p className={cn("text-xs font-medium", appTheme.textBody)}>{exp.company || "[Company]"}</p>
                    <p className={cn("text-xs mb-0.5", appTheme.textMuted)}>
                        {exp.startDate || "[Start Date]"} - {exp.endDate || "[End Date]"}
                    </p>
                    {exp.description && <p className={cn("text-xs whitespace-pre-line", appTheme.textBody)}>{exp.description}</p>}
                    {exp.achievements && exp.achievements.length > 0 && (
                        <ul className="list-disc list-inside ml-1 mt-0.5 text-xs space-y-px">
                            {exp.achievements.map((ach, i) => ach && <li key={i} className={appTheme.textBody}>{ach}</li>)}
                        </ul>
                    )}
                    </div>
                ))}
                </>
            )}

            {/* Education */}
            {education.length > 0 && (
                <>
                <SectionTitle icon={GraduationCap} title="Education" />
                {education.map((edu) => (
                    <div key={edu.id} className="mb-2.5 last:mb-0">
                    <h4 className={cn("text-sm font-semibold", appTheme.textSubHeading)}>{edu.degree || "[Degree]"} <span className={cn("font-normal", appTheme.textBody)}>in</span> {edu.field || "[Field of Study]"}</h4>
                    <p className={cn("text-xs font-medium", appTheme.textBody)}>{edu.institution || "[Institution]"}</p>
                    <p className={cn("text-xs mb-0.5", appTheme.textMuted)}>
                        {edu.startDate || "[Start]"} - {edu.endDate || "[End]"}
                        {edu.gpa && ` | GPA: ${edu.gpa}`}
                    </p>
                    {edu.achievements && edu.achievements.length > 0 && (
                        <ul className="list-disc list-inside ml-1 mt-0.5 text-xs space-y-px">
                            {edu.achievements.map((ach, i) => ach && <li key={i} className={appTheme.textBody}>{ach}</li>)}
                        </ul>
                    )}
                    </div>
                ))}
                </>
            )}

            {/* Skills */}
            {skills.length > 0 && (
                <>
                <SectionTitle icon={StarIcon} title="Skills" />
                <div className="flex flex-wrap gap-1.5">
                    {skills.map((skill) => (
                    skill.name && <span key={skill.id} className={cn("px-2 py-0.5 rounded text-xs font-medium border", appTheme.skillPillBg, appTheme.skillPillText, isDark ? 'border-purple-500/20' : 'border-purple-300')}>
                        {skill.name}
                    </span>
                    ))}
                </div>
                </>
            )}

            {/* Projects */}
            {projects.length > 0 && (
                <>
                    <SectionTitle icon={Wrench} title="Projects"/>
                    {projects.map(proj => (
                        <div key={proj.id} className="mb-3 last:mb-0">
                            <h4 className={cn("text-sm font-semibold", appTheme.textSubHeading)}>{proj.name || "[Project Name]"}</h4>
                            {proj.description && <p className={cn("text-xs whitespace-pre-line mb-0.5", appTheme.textBody)}>{proj.description}</p>}
                            {proj.technologies && proj.technologies.length > 0 && (
                                <p className={cn("text-xs", appTheme.textMuted)}>
                                    <span className={cn("font-medium", appTheme.textBody)}>Tech: </span>{proj.technologies.join(', ')}
                                </p>
                            )}
                            {(proj.url || proj.github) && (
                                <div className="text-xs mt-0.5 space-x-2">
                                    {proj.url && <a href={proj.url.startsWith('http') ? proj.url : `https://${proj.url}`} target="_blank" rel="noopener noreferrer" className={appTheme.textLink}><LinkIcon size={12} className="inline mr-0.5"/>Demo</a>}
                                    {proj.github && <a href={proj.github.startsWith('http') ? proj.github : `https://${proj.github}`} target="_blank" rel="noopener noreferrer" className={appTheme.textLink}><Github size={12} className="inline mr-0.5"/>Code</a>}
                                </div>
                            )}
                        </div>
                    ))}
                </>
            )}
            </div>
        )}
      </CardContent>
    </Card>
  );
};

export default ResumePreview;
</file>

<file path="components/resume/sections/personal-info.tsx">
// components/resume/sections/personal-info.tsx
'use client';
import React, { useState, useEffect } from 'react';
import { useForm, Controller } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import * as z from 'zod';
import { useResumeStore } from '@/hooks/use-resume';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { Button } from '@/components/ui/button';
import { PersonalInfo } from '@/types/resume';
import { Sparkles, Loader2 } from 'lucide-react';
import { useTheme } from '@/context/theme-provider'; // Import useTheme
import { cn } from '@/lib/utils'; // Import cn

// Zod schema for validation (remains the same)
const personalInfoSchema = z.object({
  firstName: z.string().min(1, "First name is required"),
  lastName: z.string().min(1, "Last name is required"),
  email: z.string().email("Invalid email address"),
  phone: z.string().min(1, "Phone number is required"),
  location: z.string().min(1, "Location is required"),
  linkedin: z.string().url().optional().or(z.literal('')),
  website: z.string().url().optional().or(z.literal('')),
  summary: z.string().min(20, "Summary should be at least 20 characters").max(1000, "Summary too long"),
});

// Define AppTheme directly for this component (or import from a central config)
function getAppTheme(isDark: boolean) {
  return {
    textHeading: isDark ? 'text-neutral-100' : 'text-neutral-800',
    textMuted: isDark ? 'text-neutral-400' : 'text-neutral-500',
    borderSecondary: isDark ? 'border-neutral-700/50' : 'border-neutral-200',
    aiButtonText: isDark ? 'text-purple-400 hover:text-purple-300' : 'text-purple-600 hover:text-purple-700',
    errorText: isDark ? 'text-red-400' : 'text-red-500',
  };
}

const PersonalInfoSection: React.FC = () => {
  const { personalInfo, updatePersonalInfo } = useResumeStore();
  const { theme } = useTheme(); // Get theme
  const isDark = theme === 'dark';
  const appTheme = getAppTheme(isDark); // Get themed classes

  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  const { control, handleSubmit, formState: { errors }, watch, setValue } = useForm<PersonalInfo>({
    resolver: zodResolver(personalInfoSchema),
    defaultValues: personalInfo,
  });

  // In PersonalInfoSection.tsx
useEffect(() => {
  const subscription = watch((formValues, { name, type }) => {
    // Only proceed if it's an actual change event and a specific field was changed
    if (type === 'change' && name) {
      // Compare with current store state before updating to prevent unnecessary updates
      // This requires getting the current store state here, or being more selective
      // For simplicity now, we'll just update. A more robust check would compare.
      
      // Construct the payload carefully based on what changed.
      // If `formValues` is the whole PersonalInfo object from RHF:
      if (name && name.startsWith("firstName") || name.startsWith("lastName") /* etc. for all fields in PersonalInfo */) {
         // A simple way for non-array sections:
         // Check if the new formValues.personalInfo (if your form is structured that way)
         // is different from the store's personalInfo before calling update.
         // However, `formValues` in watch is the entire form object.
         // `value` passed to updatePersonalInfo should be just the PersonalInfo part.

         // Let's assume `formValues` is the PersonalInfo object for this form scope.
         const currentStoreInfo = useResumeStore.getState().personalInfo;
         if (JSON.stringify(formValues) !== JSON.stringify(currentStoreInfo)) { // Deep compare (can be costly for large objects)
            updatePersonalInfo(formValues as PersonalInfo);
         }
      }
    }
  });
  return () => subscription.unsubscribe();
}, [watch, updatePersonalInfo]);



  useEffect(() => {
    const subscription = watch((value) => {
      updatePersonalInfo(value as PersonalInfo);
    });
    return () => subscription.unsubscribe();
  }, [watch, updatePersonalInfo]);

  const [isEnhancingSummary, setIsEnhancingSummary] = useState(false);

  const handleAiEnhanceSummary = async () => {
    const currentSummaryValue = watch("summary");
    const resumeTitle = useResumeStore.getState().title; // Get current resume title for context

    if (!currentSummaryValue || currentSummaryValue.trim().length < 10) {
      alert("Please write a brief summary first (at least 10 characters).");
      return;
    }
    setIsEnhancingSummary(true);
    try {
      const response = await fetch('/api/ai/enhance-summary', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
            currentSummary: currentSummaryValue,
            resumeTitle: resumeTitle // Pass resume title
        }),
      });
      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(errorData.message || `AI summary enhancement failed: ${response.statusText}`);
      }
      const { enhancedSummary } = await response.json();
      setValue("summary", enhancedSummary, { shouldDirty: true, shouldValidate: true });
      // Consider using a toast notification instead of alert
      alert("Summary enhanced by AI! Please review.");
    } catch (error) {
      console.error("AI Summary Enhancement error:", error);
      alert(`AI Summary Enhancement failed: ${error instanceof Error ? error.message : String(error)}`);
    } finally {
      setIsEnhancingSummary(false);
    }
  };

  return (
    <form className="space-y-6 sm:space-y-8"> {/* Increased spacing for larger screens */}
      <h2 className={cn("text-xl sm:text-2xl font-semibold border-b pb-4 mb-6 sm:mb-8", appTheme.textHeading, appTheme.borderSecondary)}>
        Personal Information
      </h2>
      
      <div className="grid grid-cols-1 sm:grid-cols-2 gap-x-6 gap-y-5 sm:gap-y-6">
        <div>
            <Label htmlFor="firstName">First Name</Label>
            <Controller name="firstName" control={control} render={({ field }) => <Input id="firstName" {...field} placeholder="e.g., John"/>}/>
            {errors.firstName && <p className={cn("text-xs mt-1.5", appTheme.errorText)}>{errors.firstName.message}</p>}
        </div>
        <div>
            <Label htmlFor="lastName">Last Name</Label>
            <Controller name="lastName" control={control} render={({ field }) => <Input id="lastName" {...field} placeholder="e.g., Doe"/>}/>
            {errors.lastName && <p className={cn("text-xs mt-1.5", appTheme.errorText)}>{errors.lastName.message}</p>}
        </div>
        <div>
            <Label htmlFor="email">Email Address</Label>
            <Controller name="email" control={control} render={({ field }) => <Input id="email" type="email" {...field} placeholder="e.g., john.doe@example.com"/>}/>
            {errors.email && <p className={cn("text-xs mt-1.5", appTheme.errorText)}>{errors.email.message}</p>}
        </div>
        <div>
            <Label htmlFor="phone">Phone Number</Label>
            <Controller name="phone" control={control} render={({ field }) => <Input id="phone" type="tel" {...field} placeholder="e.g., (123) 456-7890"/>}/>
            {errors.phone && <p className={cn("text-xs mt-1.5", appTheme.errorText)}>{errors.phone.message}</p>}
        </div>
      </div>

      <div>
        <Label htmlFor="location">Location</Label>
        <Controller name="location" control={control} render={({ field }) => <Input id="location" {...field} placeholder="e.g., San Francisco, CA"/>}/>
        {errors.location && <p className={cn("text-xs mt-1.5", appTheme.errorText)}>{errors.location.message}</p>}
      </div>
      
      <div className="grid grid-cols-1 sm:grid-cols-2 gap-x-6 gap-y-5 sm:gap-y-6">
        <div>
            <Label htmlFor="linkedin">LinkedIn Profile URL (Optional)</Label>
            <Controller name="linkedin" control={control} render={({ field }) => <Input id="linkedin" {...field} placeholder="e.g., linkedin.com/in/johndoe"/>}/>
            {errors.linkedin && <p className={cn("text-xs mt-1.5", appTheme.errorText)}>{errors.linkedin.message}</p>}
        </div>
        <div>
            <Label htmlFor="website">Personal Website/Portfolio (Optional)</Label>
            <Controller name="website" control={control} render={({ field }) => <Input id="website" {...field} placeholder="e.g., johndoe.com"/>}/>
            {errors.website && <p className={cn("text-xs mt-1.5", appTheme.errorText)}>{errors.website.message}</p>}
        </div>
      </div>
      
      <div>
        <div className="flex justify-between items-center mb-1.5">
            <Label htmlFor="summary">Professional Summary</Label>
            <Button
                type="button"
                variant="ghost"
                size="sm"
                onClick={handleAiEnhanceSummary}
                disabled={isEnhancingSummary}
                className={cn("text-xs p-1 flex items-center", appTheme.aiButtonText)} // Ensure flex and items-center
            >
                {isEnhancingSummary ? (
                    <Loader2 className="w-3.5 h-3.5 mr-1 animate-spin" />
                ) : (
                    <Sparkles className="w-3.5 h-3.5 mr-1" />
                )}
                AI Enhance
            </Button>
        </div>
        <Controller
          name="summary"
          control={control}
          render={({ field }) => (
            <Textarea
              id="summary"
              {...field}
              rows={5}
              placeholder="A brief, compelling overview of your skills, experience, and career goals (2-4 sentences recommended)..."
            />
          )}
        />
        {errors.summary && <p className={cn("text-xs mt-1.5", appTheme.errorText)}>{errors.summary.message}</p>}
        <p className={cn("text-xs mt-2", appTheme.textMuted)}>
            Tip: Tailor this summary to the type of roles you&apos;re targeting. Highlight your most relevant qualifications.
        </p>
      </div>
    </form>
  );
};

export default PersonalInfoSection;
</file>

<file path="components/resume/sections/projects.tsx">
// components/resume/sections/projects.tsx
'use client';
import React, { useEffect, useState } from 'react';
// eslint-disable-next-line @typescript-eslint/no-unused-vars
import { useForm, useFieldArray, Controller } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import * as z from 'zod';
import { useResumeStore } from '@/hooks/use-resume';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { Button } from '@/components/ui/button';
// eslint-disable-next-line @typescript-eslint/no-unused-vars
import { ProjectEntry } from '@/types/resume';
import { PlusCircle, Trash2, Link as LinkIcon, Github, Sparkles, Loader2, Briefcase } from 'lucide-react'; // Added Briefcase for tip
import { useTheme } from '@/context/theme-provider';
import { cn } from '@/lib/utils';

const projectEntrySchema = z.object({
  id: z.string(),
  name: z.string().min(1, "Project name is required"),
  description: z.string().min(10, "Description must be at least 10 characters").max(1000, "Description too long."),
  technologies: z.string().min(1, "List at least one technology (comma-separated)"),
  url: z.string().url("Please enter a valid URL (e.g., https://example.com)").optional().or(z.literal('')),
  github: z.string().url("Please enter a valid GitHub URL").optional().or(z.literal('')),
});

const projectsSchema = z.object({
  projects: z.array(projectEntrySchema),
});

type ProjectsFormData = z.infer<typeof projectsSchema>;

// Define AppTheme (or import from a central config)
function getAppTheme(isDark: boolean) {
  return {
    textHeading: isDark ? 'text-neutral-100' : 'text-neutral-800',
    textMuted: isDark ? 'text-neutral-400' : 'text-neutral-500',
    borderSecondary: isDark ? 'border-neutral-700/50' : 'border-neutral-200',
    errorText: isDark ? 'text-red-400' : 'text-red-500',
    entryCardBg: isDark ? 'bg-neutral-700/30' : 'bg-slate-50',
    entryCardBorder: isDark ? 'border-neutral-600/50' : 'border-slate-200',
    iconColor: isDark ? 'text-neutral-400' : 'text-neutral-500',
    aiButtonText: isDark ? 'text-purple-400 hover:text-purple-300' : 'text-purple-600 hover:text-purple-700',
    tipBoxBg: isDark ? 'bg-green-900/20 border-green-500/30' : 'bg-green-50 border-green-200', // Different tip color
    tipBoxText: isDark ? 'text-green-300' : 'text-green-700',
  };
}

const ProjectsSection: React.FC = () => {
  const { projects, updateProject: updateStoreProject, addProject: addStoreProject, removeProject: removeStoreProject } = useResumeStore();
  const { theme } = useTheme();
  const isDark = theme === 'dark';
  const appTheme = getAppTheme(isDark);
  const resumeTitle = useResumeStore(state => state.title); // For AI context

  const { control, register, handleSubmit, watch, formState: { errors }, setValue, reset } = useForm<ProjectsFormData>({
    resolver: zodResolver(projectsSchema),
    defaultValues: { projects: [] },
  });

  useEffect(() => {
    const storeProjects = projects.map(proj => ({
      ...proj,
      technologies: Array.isArray(proj.technologies) ? proj.technologies.join(', ') : '',
    }));
    reset({ projects: storeProjects });
  }, [projects, reset]);

  const { fields, append, remove } = useFieldArray({
    control,
    name: "projects",
  });

  useEffect(() => {
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    const subscription = watch((value, { name, type }) => {
      if (type === 'change' && value.projects) {
        value.projects.forEach((projData, index) => {
          if (projData && fields[index]) {
            const techArray = typeof projData.technologies === 'string'
              ? projData.technologies.split(',').map(t => t.trim()).filter(t => t)
              : []; // Ensure it's an array for the store
            const idToUpdate = projData.id || fields[index].id;
            updateStoreProject(index, {...projData, id: idToUpdate, technologies: techArray});
          }
        });
      }
    });
    return () => subscription.unsubscribe();
  }, [watch, updateStoreProject, fields]);

  const handleAddProject = () => {
    const newId = addStoreProject();
    append({ 
      id: newId, 
      name: '', 
      description: '', 
      technologies: '', 
      url: '', 
      github: '' 
    });
  };

  const handleRemoveProject = (index: number) => {
    const projIdToRemove = fields[index].id;
    removeStoreProject(projIdToRemove);
    remove(index);
  };
  
  const [enhancingProjectIndex, setEnhancingProjectIndex] = useState<number | null>(null);

  const handleAiEnhanceProject = async (index: number) => {
    const currentProject = watch(`projects.${index}`);
    if (!currentProject || !currentProject.name || !currentProject.description) {
      alert("Please provide a project name and a brief description first.");
      return;
    }
    setEnhancingProjectIndex(index);
    try {
      const response = await fetch('/api/ai/enhance-project', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          projectName: currentProject.name,
          currentDescription: currentProject.description,
          technologies: typeof currentProject.technologies === 'string' 
            ? currentProject.technologies.split(',').map(t => t.trim()).filter(Boolean) 
            : [],
          resumeTitle: resumeTitle, // Pass resume title for context
        }),
      });
      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(errorData.message || `AI project enhancement failed: ${response.statusText}`);
      }
      const { enhancedDescription } = await response.json();
      setValue(`projects.${index}.description`, enhancedDescription, { shouldDirty: true, shouldValidate: true });
      alert("Project description enhanced by AI! Please review.");
    } catch (error) {
      console.error("AI Project Enhancement error:", error);
      alert(`AI Project Enhancement failed: ${error instanceof Error ? error.message : String(error)}`);
    } finally {
      setEnhancingProjectIndex(null);
    }
  };

  return (
    <form className="space-y-6 sm:space-y-8" onSubmit={handleSubmit(() => {})}>
      <div className="flex flex-col sm:flex-row justify-between sm:items-center gap-4 border-b pb-4 mb-6 sm:mb-8" style={{borderColor: appTheme.borderSecondary}}>
        <h2 className={cn("text-xl sm:text-2xl font-semibold", appTheme.textHeading)}>Projects</h2>
        <Button type="button" variant="outline" size="sm" onClick={handleAddProject}>
          <PlusCircle className="w-4 h-4 mr-2" />
          Add Project
        </Button>
      </div>

       <div className={cn("p-4 rounded-lg border flex items-start space-x-3", appTheme.tipBoxBg)}>
        <Briefcase className={cn("w-5 h-5 mt-0.5 shrink-0", appTheme.tipBoxText)} />
        <p className={cn("text-sm", appTheme.tipBoxText)}>
          Highlight personal or academic projects that showcase your skills. Briefly describe the project, your role, and the technologies used. Link to live demos or GitHub repos if available.
        </p>
      </div>

      {fields.length > 0 ? (
        <div className="space-y-6">
          {fields.map((item, index) => (
            <div 
              key={item.id} 
              className={cn(
                "p-5 sm:p-6 rounded-xl border space-y-5 sm:space-y-6 relative",
                appTheme.entryCardBg,
                appTheme.entryCardBorder
              )}
            >
              <Button
                type="button"
                variant="ghost"
                size="icon"
                onClick={() => handleRemoveProject(index)}
                className="absolute top-3 right-3 text-red-400 hover:text-destructive hover:bg-destructive/10 w-8 h-8"
                aria-label="Remove project entry"
              >
                <Trash2 className="w-4 h-4" />
              </Button>
              
              <div>
                <Label htmlFor={`projects.${index}.name`}>Project Name</Label>
                <Input id={`projects.${index}.name`} {...register(`projects.${index}.name`)} placeholder="e.g., Personal Portfolio Website"/>
                {errors.projects?.[index]?.name && <p className={cn("text-xs mt-1.5", appTheme.errorText)}>{errors.projects[index]?.name?.message}</p>}
              </div>
              
              <div>
                <div className="flex justify-between items-center mb-1.5">
                    <Label htmlFor={`projects.${index}.description`}>Description</Label>
                    <Button
                        type="button"
                        variant="ghost"
                        size="sm"
                        onClick={() => handleAiEnhanceProject(index)}
                        disabled={enhancingProjectIndex === index}
                        className={cn("text-xs p-1 flex items-center", appTheme.aiButtonText)}
                    >
                        {enhancingProjectIndex === index ? (
                            <Loader2 className="w-3.5 h-3.5 mr-1 animate-spin" />
                        ) : (
                            <Sparkles className="w-3.5 h-3.5 mr-1" />
                        )}
                        AI Enhance
                    </Button>
                </div>
                <Textarea
                  id={`projects.${index}.description`}
                  {...register(`projects.${index}.description`)}
                  rows={3}
                  placeholder="Describe the project, its purpose, key features, and your contributions."
                />
                {errors.projects?.[index]?.description && <p className={cn("text-xs mt-1.5", appTheme.errorText)}>{errors.projects[index]?.description?.message}</p>}
              </div>
              
              <div>
                <Label htmlFor={`projects.${index}.technologies`}>Technologies Used (comma-separated)</Label>
                <Input id={`projects.${index}.technologies`} {...register(`projects.${index}.technologies`)} placeholder="e.g., React, Node.js, MongoDB"/>
                {errors.projects?.[index]?.technologies && <p className={cn("text-xs mt-1.5", appTheme.errorText)}>{errors.projects[index]?.technologies?.message}</p>}
              </div>

              <div className="grid grid-cols-1 sm:grid-cols-2 gap-x-6 gap-y-5">
                <div>
                    <Label htmlFor={`projects.${index}.url`}>Project URL (Optional)</Label>
                    <div className="relative">
                        <Input id={`projects.${index}.url`} {...register(`projects.${index}.url`)} placeholder="https://myprojectdemo.com" className="pl-10"/>
                        <LinkIcon className={cn("absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 pointer-events-none", appTheme.iconColor)}/>
                    </div>
                    {errors.projects?.[index]?.url && <p className={cn("text-xs mt-1.5", appTheme.errorText)}>{errors.projects[index]?.url?.message}</p>}
                </div>
                <div>
                    <Label htmlFor={`projects.${index}.github`}>GitHub Repository (Optional)</Label>
                    <div className="relative">
                        <Input id={`projects.${index}.github`} {...register(`projects.${index}.github`)} placeholder="https://github.com/yourname/project" className="pl-10"/>
                        <Github className={cn("absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 pointer-events-none", appTheme.iconColor)}/>
                    </div>
                    {errors.projects?.[index]?.github && <p className={cn("text-xs mt-1.5", appTheme.errorText)}>{errors.projects[index]?.github?.message}</p>}
                </div>
              </div>
            </div>
          ))}
        </div>
      ) : (
        <div className={cn("text-center py-10 border rounded-xl", appTheme.entryCardBg, appTheme.entryCardBorder)}>
          <PlusCircle className={cn("w-12 h-12 mx-auto mb-4", appTheme.iconColor)} />
          <p className={cn("mb-3 font-medium", appTheme.textHeading)}>No projects added yet.</p>
          <p className={cn("text-sm", appTheme.textMuted)}>Showcase your practical experience by adding relevant projects.</p>
        </div>
      )}
    </form>
  );
};

export default ProjectsSection;
</file>

<file path="hooks/useShallowResumeSelector.ts">
// hooks/useShallowResumeSelector.ts
import { useSyncExternalStoreWithSelector } from 'use-sync-external-store/with-selector';
import { shallow } from 'zustand/shallow';
import { useResumeStore, ResumeStateStore } from './use-resume'; // Your main store

// Define the shape of the data selected by this general-purpose hook
export interface ShallowSelectedResumeParts {
  id?: ResumeStateStore['id'];
  userId: ResumeStateStore['userId'];
  title: ResumeStateStore['title'];
  personalInfo: ResumeStateStore['personalInfo'];
  education: ResumeStateStore['education'];
  experience: ResumeStateStore['experience'];
  skills: ResumeStateStore['skills'];
  projects: ResumeStateStore['projects'];
  atsScore: ResumeStateStore['atsScore'];
  
  // Actions
  loadResume: ResumeStateStore['loadResume'];
  resetResume: ResumeStateStore['resetResume'];
  setTitle: ResumeStateStore['setTitle'];
  setAtsScore: ResumeStateStore['setAtsScore'];
  updatePersonalInfo: ResumeStateStore['updatePersonalInfo']; // Added

  // Education Actions - ADDED
  addEducation: ResumeStateStore['addEducation'];
  updateEducation: ResumeStateStore['updateEducation'];
  removeEducation: ResumeStateStore['removeEducation'];

  // Experience Actions - ADDED
  addExperience: ResumeStateStore['addExperience'];
  updateExperience: ResumeStateStore['updateExperience'];
  removeExperience: ResumeStateStore['removeExperience'];

  // Skills Actions - ADDED
  addSkill: ResumeStateStore['addSkill'];
  updateSkill: ResumeStateStore['updateSkill'];
  removeSkill: ResumeStateStore['removeSkill'];

  // Projects Actions - ADDED
  addProject: ResumeStateStore['addProject'];
  updateProject: ResumeStateStore['updateProject'];
  removeProject: ResumeStateStore['removeProject'];
}

export function useShallowResumeSelector(): ShallowSelectedResumeParts {
  const selector = (state: ResumeStateStore): ShallowSelectedResumeParts => ({
    id: state.id,
    userId: state.userId,
    title: state.title,
    personalInfo: state.personalInfo,
    education: state.education,
    experience: state.experience,
    skills: state.skills,
    projects: state.projects,
    atsScore: state.atsScore,
    loadResume: state.loadResume,
    resetResume: state.resetResume,
    setTitle: state.setTitle,
    setAtsScore: state.setAtsScore,
    updatePersonalInfo: state.updatePersonalInfo, // Added

    // Education Actions - ADDED
    addEducation: state.addEducation,
    updateEducation: state.updateEducation,
    removeEducation: state.removeEducation,

    // Experience Actions - ADDED
    addExperience: state.addExperience,
    updateExperience: state.updateExperience,
    removeExperience: state.removeExperience,

    // Skills Actions - ADDED
    addSkill: state.addSkill,
    updateSkill: state.updateSkill,
    removeSkill: state.removeSkill,

    // Projects Actions - ADDED
    addProject: state.addProject,
    updateProject: state.updateProject,
    removeProject: state.removeProject,
  });

  const storeApi = useResumeStore; 

  return useSyncExternalStoreWithSelector(
    storeApi.subscribe,
    storeApi.getState,
    storeApi.getState, 
    selector,
    shallow
  );
}
</file>

<file path="README.md">
````markdown
# GetHired

**AI-Powered, ATS-Optimized Resume Builder**

GetHired combines the latest in AI with professional templates and real-time feedback to help you craft resumes that get noticed.

---

## Table of Contents

- [Features](#features)
- [Tech Stack](#tech-stack)
- [Prerequisites](#prerequisites)
- [Getting Started](#getting-started)
  - [1. Clone the Repo](#1-clone-the-repo)
  - [2. Install Dependencies](#2-install-dependencies)
  - [3. Configure Environment](#3-configure-environment)
  - [4. Database Setup](#4-database-setup)
  - [5. Run the Dev Server](#5-run-the-dev-server)
- [Production Build](#production-build)
- [Linting](#linting)
- [Deployment](#deployment)
- [Resources](#resources)
- [License](#license)

---

## Features

- **AI-Powered Content Generation:** Summaries, experience bullets, project descriptions
- **Real-Time ATS Scoring & Feedback:** Ensure keyword optimization and formatting standards
- **Multi-Step Builder:** Guided form flow for personal info, experience, education, skills
- **Live Preview & PDF Export:** See changes instantly and download a print-ready PDF
- **User Dashboard:** Save, edit, and manage multiple resumes
- **Dark/Light Mode:** Switch themes to reduce eye strain

## Tech Stack

- **Framework:** Next.js (App Router)
- **Language:** TypeScript
- **AI Engine:** Google Gemini
- **Auth:** Clerk
- **ORM:** Prisma (PostgreSQL)
- **Styling:** Tailwind CSS
- **State:** Zustand
- **Forms & Validation:** React Hook Form + Zod

## Prerequisites

- Node.js v18+ and npm/yarn/pnpm
- Git
- Access to a PostgreSQL database
- API keys for:
  - Google Gemini
  - Clerk

## Getting Started

### 1. Clone the Repo

```bash
git clone https://github.com/your-username/resumeai-pro.git
cd resumeai-pro
````

### 2. Install Dependencies

```bash
# npm
npm install
# or yarn
yarn install
# or pnpm
pnpm install
```

### 3. Configure Environment

Create a `.env.local` file at the project root:

```env
# Clerk
NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=pk_test_xxx
CLERK_SECRET_KEY=sk_test_xxx
NEXT_PUBLIC_CLERK_SIGN_IN_URL=/sign-in
NEXT_PUBLIC_CLERK_SIGN_UP_URL=/sign-up
NEXT_PUBLIC_CLERK_AFTER_SIGN_IN_URL=/dashboard
NEXT_PUBLIC_CLERK_AFTER_SIGN_UP_URL=/dashboard

# PostgreSQL
DATABASE_URL="postgresql://USER:PASSWORD@HOST:PORT/DATABASE?schema=public"
# (Optional) DIRECT_URL for pooling
# DIRECT_URL="postgresql://USER:PASSWORD@HOST:PORT/DATABASE"

# Google Gemini
GEMINI_API_KEY=your_gemini_api_key
```

> **Tip:** Keep your keys secure and never commit `.env.local` to version control.

### 4. Database Setup

```bash
# Generate and apply migrations
npx prisma migrate dev --name init
# (Optional) Preview in Prisma Studio
npx prisma studio
```

### 5. Run the Dev Server

```bash
npm run dev
# or yarn dev
# or pnpm dev
```

Open [http://localhost:3000](http://localhost:3000) in your browser.

## Production Build

```bash
npm run build
# or yarn build
# or pnpm build
```

This outputs an optimized build in the `.next` folder.

## Linting

```bash
npm run lint
# or yarn lint
# or pnpm lint
```

## Deployment

We recommend deploying on Vercel:

1. Push your code to GitHub
2. Import the repo in Vercel
3. Add environment variables in Vercel dashboard
4. Vercel will auto-run `npm run build` and deploy

*For other platforms, see [Next.js deployment docs](https://nextjs.org/docs/deployment).*

## Resources

* [Next.js Documentation](https://nextjs.org/docs)
* [Prisma Docs](https://www.prisma.io/docs)
* [Clerk Quickstart](https://clerk.com/docs)
* [Tailwind CSS Guide](https://tailwindcss.com/docs)


```
```
</file>

<file path="tailwind.config.ts">
import type { Config } from 'tailwindcss'

const config: Config = {
  darkMode: ["class"], // This is crucial for the theme toggle
  content: [
    './pages/**/*.{ts,tsx}',
    './components/**/*.{ts,tsx}',
    './app/**/*.{ts,tsx}',
    './src/**/*.{ts,tsx}', // Ensure this covers all your component locations
  ],
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      colors: {
        // Theme-aware semantic colors using CSS variables
        border: "hsl(var(--border))",
        input: "hsl(var(--input))", // For input borders specifically
        ring: "hsl(var(--ring))", // For focus rings

        // Inside theme.extend.colors in tailwind.config.ts
inputField: { // Renamed from just "input" to avoid conflict with the existing "input" for border
  DEFAULT: "hsl(var(--input-bg))",      // For background of input
  border: "hsl(var(--input-border))", // Specific border for input field
  foreground: "hsl(var(--foreground))", // Text color within input
},

        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",

        primary: {
          // DEFAULT: "hsl(var(--primary-gradient-start))", // Or make it transparent if always using gradient
          DEFAULT: "hsl(var(--primary-gradient-end))", // Using the end color as a default solid
          foreground: "hsl(var(--primary-text))", // Text on primary elements
        },
        secondary: {
          DEFAULT: "hsl(var(--muted))", // Using muted for secondary bg
          foreground: "hsl(var(--muted-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },

        // Retain specific theme colors if absolutely needed for non-semantic direct use,
        // but prefer using the semantic names above.
        // 'theme-blue-600': '#2563EB', // This is now var(--primary-gradient-start) conceptually
        // 'theme-purple-600': '#7C3AED',// This is now var(--primary-gradient-end) conceptually
        // 'theme-blue-400': '#60A5FA',
        // 'theme-purple-400': '#A78BFA',
        // 'theme-pink-400': '#F472B6',
      },
      borderRadius: {
        // Your existing radius setup is good.
        // It correctly uses a CSS variable for the base radius.
        lg: "var(--radius)", // e.g., 0.75rem
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
        xl: "calc(var(--radius) + 4px)",
        '2xl': "calc(var(--radius) + 8px)",
        '3xl': "calc(var(--radius) + 16px)",
      },
      backgroundImage: {
        // Define the primary gradient using the CSS variables
        'primary-gradient': 'linear-gradient(to right, hsl(var(--primary-gradient-start)), hsl(var(--primary-gradient-end)))',
      },
      keyframes: {
        "accordion-down": {
          from: { height: "0" },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: "0" },
        },
        // You can add other global keyframes from landing page here if they are widely used
        // Example:
        // "gradient-x": { /* ... from landing page style jsx block ... */ },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
        // "gradient-x": "gradient-x 3s ease infinite", // if keyframe added above
      },
    },
  },
  // eslint-disable-next-line @typescript-eslint/no-require-imports
  plugins: [require("tailwindcss-animate")],
}

export default config
</file>

<file path="app/globals.css">
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    /* Light Theme Variables (Clean & Professional) */
    --background: 0 0% 100%; /* White */
    --foreground: 224 71.4% 4.1%; /* Near Black */

    --muted: 220 14.3% 95.9%; /* Light Gray (e.g., bg-slate-100) */
    --muted-foreground: 220 8.9% 46.1%; /* Medium Gray Text */

    --input-bg: 0 0% 100%; /* Light theme input background (white) */
--input-border: 220 13% 85%; /* Slightly darker than main border for light theme inputs */

    --popover: 0 0% 100%;
    --popover-foreground: 224 71.4% 4.1%;

    --card: 0 0% 100%;
    --card-foreground: 224 71.4% 4.1%;

    --border: 220 13% 91%; /* Light Gray Border (e.g., border-slate-200/300) */
    --input: 220 13% 91%; /* Input border */

    /* Primary Accent Gradient (e.g., blue-600 to purple-600 from dashboard) */
    --primary-gradient-start: 217 91% 60%; /* hsl for blue-600 */
    --primary-gradient-end: 262 83% 58%;   /* hsl for purple-600 */
    
    --primary-text: 0 0% 100%; /* Text on primary gradient elements (White) */

    --accent: 220 14.3% 95.9%; /* Accent color for hover states, etc. */
    --accent-foreground: 224 71.4% 4.1%;

    --destructive: 0 84.2% 60.2%; /* Red for destructive actions */
    --destructive-foreground: 0 0% 98%; /* Light text on destructive red */

    --ring: 224 71.4% 4.1%; /* Focus ring color */
    --radius: 0.75rem; /* Base border radius */
  }

  .dark {
    /* Dark Theme Variables (Deep, Modern, Professional) */
    --background: 220 20% 7%; /* Very Dark Neutral (similar to neutral-950) */
    --foreground: 210 20% 98%; /* Near White Text */
    --input-bg: 220 15% 18%; /* Dark theme input background (e.g., neutral-800ish) */
--input-border: 215 15% 35%; /* Slightly lighter than main dark border */

    --muted: 220 15% 12%; /* Dark Muted BG (similar to neutral-900) */
    --muted-foreground: 215 15% 65%; /* Muted Gray Text (similar to neutral-400) */

    --popover: 220 20% 7%;
    --popover-foreground: 210 20% 98%;

    /* Card background base (components can add opacity/blur) */
    --card: 220 15% 12%; /* Same as muted for consistency, or slightly lighter like neutral-800 base */
    /* Example: --card: 220 15% 15%; /* Slightly lighter than page muted */
    --card-foreground: 210 20% 98%;

    --border: 215 15% 25%; /* Dark Border (similar to neutral-700/800) */
    --input: 215 15% 25%; /* Input border */
    
    /* Primary Accent Gradient can remain the same or be adjusted for dark mode if desired */
    /* --primary-gradient-start: 217 91% 60%; (blue-600) */
    /* --primary-gradient-end: 262 83% 58%; (purple-600) */
    /* --primary-text: 0 0% 100%; */

    --accent: 220 15% 18%; /* Dark Accent (e.g., hover for secondary items) */
    --accent-foreground: 210 20% 98%;

    /* Destructive colors can often remain the same */
    /* --destructive: 0 84.2% 60.2%; */
    /* --destructive-foreground: 0 0% 98%; */

    --ring: 262 83% 58%; /* Purple focus ring for dark mode to match accent */
  }
}

@layer base {
  body {
    @apply bg-background text-foreground;
    font-feature-settings: "rlig" 1, "calt" 1; /* Keep existing font features */
    min-height: 100vh;
    /* Ensures smooth scrolling */
    scroll-behavior: smooth; 
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  }

  /* Add focus-visible polyfill for older browsers if needed, or rely on Tailwind's focus-visible utilities */
  *:focus-visible {
    @apply outline-none ring-2 ring-ring ring-offset-2 ring-offset-background;
  }
}

/* Custom Scrollbar Themed */
.styled-scrollbar::-webkit-scrollbar {
  width: 10px; /* Slightly wider for better interaction */
  height: 10px;
}
.styled-scrollbar::-webkit-scrollbar-track {
  background: hsl(var(--muted) / 0.3); /* Use muted background with some transparency */
  border-radius: 10px;
}
.styled-scrollbar::-webkit-scrollbar-thumb {
  background: hsl(var(--muted-foreground) / 0.5); /* Muted foreground for thumb */
  border-radius: 10px;
  border: 2px solid transparent; /* Creates padding around thumb */
  background-clip: padding-box;
}
.styled-scrollbar::-webkit-scrollbar-thumb:hover {
  background: hsl(var(--muted-foreground) / 0.7);
}

/* Responsive scrollbar for smaller viewports if desired */
@media (max-width: 768px) {
  .styled-scrollbar::-webkit-scrollbar {
    width: 6px;
    height: 6px;
  }
}

/* Landing page specific animations are in landing-page.tsx style jsx block */
/* These are global animations, if any are still needed */
@keyframes fade-in-up {
  from { opacity: 0; transform: translateY(20px); }
  to { opacity: 1; transform: translateY(0); }
}
.animate-fade-in-up {
  animation: fade-in-up 0.6s ease-out forwards;
}

@keyframes gradient-x {
  0%, 100% { background-position: 0% 50%; }
  50% { background-position: 100% 50%; }
}
.animate-gradient-x {
  background-size: 200% 200%;
  animation: gradient-x 3s ease infinite;
}

/* Additional global styles if needed */
html {
  /* This helps if you have many fixed/sticky elements and want smooth scrolling */
  scroll-padding-top: 80px; /* Adjust based on your sticky header height */
}
</file>

<file path="app/layout.tsx">
// app/layout.tsx
import './globals.css'
import type { Metadata } from 'next'
import { Inter } from 'next/font/google'
import { ClerkProvider } from '@clerk/nextjs'
import { dark } from '@clerk/themes'; // Clerk's dark base theme
import { ThemeProvider } from '@/context/theme-provider';

const inter = Inter({ subsets: ['latin'] })

export const metadata: Metadata = {
  title: 'GetHired - AI-Powered Resume Builder',
  description: 'Build ATS-optimized resumes with AI assistance. Land interviews 3x faster with GetHired.',
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <ClerkProvider
      appearance={{
        baseTheme: dark, // Start with Clerk's dark theme as a base
        variables: {
          // Referencing our CSS variables (conceptually) or picking similar values.
          // Clerk variables don't directly consume CSS vars, so we pick values that match.
          colorPrimary: 'hsl(262 83% 58%)', // Purple-600 (from our --primary-gradient-end, or a primary accent)
          colorBackground: 'hsl(220 15% 12%)', /* Matches our dark --card or --muted, e.g., neutral-900 */
          colorInputBackground: 'hsl(220 15% 18%)', /* Darker input, e.g., neutral-800ish */
          colorInputText: 'hsl(210 20% 98%)', /* Matches --foreground */
          colorText: 'hsl(210 20% 98%)', /* General text on Clerk components */
          borderRadius: 'var(--radius)', // Use our global radius variable string
          // You can add more variables here: colorDanger, colorSuccess, etc.
        },
        elements: {
          // For these, we use Tailwind classes that will respect our theme
          // Ensure these classes get compiled by Tailwind by being used somewhere or safelisted
          rootBox: 'font-sans', // Ensure Clerk components use the Inter font
          card: 'bg-card border border-border shadow-xl rounded-xl', // Uses our themed card styles
          formButtonPrimary:
            'bg-primary-gradient text-primary-foreground hover:opacity-90 transition-opacity rounded-lg text-sm py-2.5 px-4', // Use the gradient
          formFieldInput:
            'bg-input border border-input text-foreground placeholder:text-muted-foreground rounded-md focus:ring-ring focus:border-ring', // Themed input fields
          footerActionLink: 'text-primary hover:opacity-80', // Use primary color for links
          headerTitle: 'text-foreground',
          headerSubtitle: 'text-muted-foreground',
          socialButtonsBlockButton: 'border-border hover:bg-accent',
          dividerLine: 'bg-border',
          formFieldLabel: 'text-foreground',
          // Add more element customizations as needed
        }
      }}
    >
      {/* Ensure NO WHITESPACE directly inside <html> before <body> */}
      <html lang="en" suppressHydrationWarning>
        {/* The 'dark' class will be toggled on <html> by ThemeProvider */}
        <body className={`${inter.className} antialiased`}> {/* Body styles are in globals.css */}
          <ThemeProvider> {/* ThemeProvider should be inside <body> but outside ClerkProvider if Clerk's theme shouldn't change with your app's theme. Or inside if it should. Generally, keeping Clerk's theme stable (e.g., always dark) while your app theme toggles is fine. If you want Clerk to toggle too, place ThemeProvider outside ClerkProvider. For now, your setup is fine. */}
            {children}
          </ThemeProvider>
        </body>
      </html>
    </ClerkProvider>
  )
}
</file>

<file path="components/resume/ats-score-display.tsx">
/* eslint-disable @typescript-eslint/no-unused-vars */
// components/resume/ats-score-display.tsx
'use client'; // Ensure client component directive

import React, { useEffect, useState, useMemo } from 'react';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Target, Zap, CheckCircle, AlertTriangle, Info, Loader2, HelpCircle } from 'lucide-react';
import { Progress } from '@/components/ui/progress';
import { 
    ATSScoreDetails, 
    ResumeData, 
    PersonalInfo, 
    EducationEntry, 
    ExperienceEntry, 
    SkillEntry, 
    ProjectEntry 
} from '@/types/resume';
import { useShallowResumeSelector } from '@/hooks/useShallowResumeSelector';
import { useResumeStore } from '@/hooks/use-resume';
import { useDebouncedCallback } from 'use-debounce';
import { useTheme } from '@/context/theme-provider'; // Import useTheme
import { cn } from '@/lib/utils'; // Import cn

// calculateMockAtsScoreDetails function (remains mostly the same, ensure it aligns with ATSScoreDetails type)
// This function is for fallback and initial state, not the primary display logic.
const calculateMockAtsScoreDetails = (data: Partial<ResumeData>): ATSScoreDetails => {
    // ... (Implementation as provided in your original codebase, ensure it returns valid ATSScoreDetails)
    // For brevity, I'll assume this function is correctly implemented.
    // Example of what it might return for an empty state:
    return {
        overall: 15, // Start with a low mock score
        suggestions: ["Add more content to all sections for a comprehensive ATS analysis."],
        breakdown: {
            keywords: { score: 10, suggestions: ["Include relevant keywords from job descriptions."] },
            clarityAndConciseness: { score: 20, suggestions: ["Ensure your summary is concise and impactful."] },
            actionVerbs: { score: 10, suggestions: ["Start bullet points with strong action verbs."] },
            quantifiableResults: { score: 5, suggestions: ["Quantify achievements with numbers where possible."] },
            formattingAndConciseness: { score: 30, suggestions: ["Check for consistent formatting and conciseness."] },
            lengthAndRelevance: { score: 20, suggestions: ["Ensure resume length is appropriate."] },
        }
    };
};


// Define AppTheme (or import from a central config)
function getAppTheme(isDark: boolean) {
  return {
    textHeading: isDark ? 'text-neutral-100' : 'text-neutral-800',
    textMuted: isDark ? 'text-neutral-400' : 'text-neutral-500',
    textBody: isDark ? 'text-neutral-300' : 'text-neutral-700',
    borderSecondary: isDark ? 'border-neutral-700/50' : 'border-neutral-200',
    iconAccentColor: isDark ? 'text-purple-400' : 'text-purple-600',
    // Colors for score display
    scoreGood: isDark ? 'text-green-400' : 'text-green-600',
    scoreMedium: isDark ? 'text-yellow-400' : 'text-yellow-500',
    scoreLow: isDark ? 'text-red-400' : 'text-red-500',
    ringGood: isDark ? 'ring-green-500/70' : 'ring-green-500/70',
    ringMedium: isDark ? 'ring-yellow-500/70' : 'ring-yellow-500/70',
    ringLow: isDark ? 'ring-red-500/70' : 'ring-red-500/70',
    scoreCircleBg: isDark ? 'bg-neutral-700/40' : 'bg-slate-100',
  };
}


const AtsScoreDisplay: React.FC = () => {
  const { 
    personalInfo, education, experience, skills, projects, 
    setAtsScore: setStoreAtsScore, // From Zustand store
    title // Get title for context
  } = useShallowResumeSelector();
  const { theme } = useTheme();
  const isDark = theme === 'dark';
  const appTheme = getAppTheme(isDark);

  const memoizedResumeData = useMemo(() => ({
    personalInfo, education, experience, skills, projects, title // Include title for API
  }), [personalInfo, education, experience, skills, projects, title]);

  const [atsDetails, setAtsDetails] = useState<ATSScoreDetails>(() => calculateMockAtsScoreDetails({}));
  const [isLoadingScore, setIsLoadingScore] = useState(false);
  const [showBreakdown, setShowBreakdown] = useState(false); // State for toggling breakdown

  const debouncedFetchAtsScore = useDebouncedCallback(
    async (dataForApi: Partial<ResumeData>) => {
      const isMinimalContent = 
        (!dataForApi.personalInfo || Object.values(dataForApi.personalInfo).every(val => val === '' || val === undefined || (Array.isArray(val) && val.length === 0))) &&
        (!dataForApi.experience || dataForApi.experience.length === 0) &&
        (!dataForApi.skills || dataForApi.skills.length === 0);

      if (isMinimalContent) {
          const defaultEmptyScore = calculateMockAtsScoreDetails({});
          setAtsDetails(defaultEmptyScore);
          const currentGlobalScore = useResumeStore.getState().atsScore;
          if (currentGlobalScore !== defaultEmptyScore.overall) {
              setStoreAtsScore(defaultEmptyScore.overall);
          }
          setIsLoadingScore(false);
          return;
      }

      setIsLoadingScore(true);
      try {
        const response = await fetch('/api/ai/ats-score', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(dataForApi), // Pass dataForApi which includes title
        });
        if (!response.ok) {
          const errorText = await response.text();
          console.error("ATS API Error Response:", errorText);
          throw new Error(`API error: ${response.status} - ${errorText.substring(0,100)}`);
        }
        const newDetails: ATSScoreDetails = await response.json();
        setAtsDetails(newDetails);
        
        const currentGlobalScore = useResumeStore.getState().atsScore;
        if (newDetails.overall !== currentGlobalScore) {
          setStoreAtsScore(newDetails.overall);
        }
      } catch (error) {
        console.error("Error fetching ATS score:", error);
        setAtsDetails(prev => ({
            ...calculateMockAtsScoreDetails(dataForApi),
            overall: Math.max(0, prev.overall - 5),
            suggestions: ["AI analysis failed. Displaying estimated score.", (error as Error).message.substring(0,100) ],
        }));
      } finally {
        setIsLoadingScore(false);
      }
    }, 
    1500 // 1.5 seconds debounce
  );

  useEffect(() => {
    if (memoizedResumeData) {
        debouncedFetchAtsScore(memoizedResumeData);
    }
  }, [memoizedResumeData, debouncedFetchAtsScore]);

  const score = atsDetails.overall;

  const getScoreColor = (s: number) => {
    if (s >= 80) return appTheme.scoreGood;
    if (s >= 60) return appTheme.scoreMedium;
    return appTheme.scoreLow;
  };
  
  const getScoreRingColor = (s: number) => {
    if (s >= 80) return appTheme.ringGood;
    if (s >= 60) return appTheme.ringMedium;
    return appTheme.ringLow;
  };

  const getScoreFeedback = (s: number) => {
    if (s >= 80) return { text: 'Excellent!', icon: <CheckCircle className={cn("w-5 h-5", appTheme.scoreGood)} /> };
    if (s >= 60) return { text: 'Good Foundation', icon: <Info className={cn("w-5 h-5", appTheme.scoreMedium)} /> };
    return { text: 'Needs Improvement', icon: <AlertTriangle className={cn("w-5 h-5", appTheme.scoreLow)} /> };
  };

  const feedback = getScoreFeedback(score);

  const renderBreakdownItem = (label: string, categoryScore: number, suggestions: string[]) => (
    <li key={label} className="py-2 border-b last:border-b-0" style={{borderColor: appTheme.borderSecondary}}>
        <div className="flex justify-between items-center mb-1">
            <span className="text-xs font-medium text-foreground/80">{label}</span>
            <span className={cn("text-xs font-semibold", getScoreColor(categoryScore))}>{categoryScore}%</span>
        </div>
        {suggestions && suggestions.length > 0 && (
             <ul className="list-disc list-inside pl-2 space-y-0.5">
                {suggestions.slice(0,1).map((s, i) => <li key={i} className="text-xs text-muted-foreground">{s}</li>)}
            </ul>
        )}
    </li>
  );


  return (
    <Card className="sticky top-24 shadow-xl"> {/* Use themed Card */}
      <CardHeader className="pb-3">
        <div className="flex items-center justify-between">
            <CardTitle className={cn("text-base sm:text-lg font-semibold flex items-center", appTheme.textHeading)}>
              ATS Score 
              {isLoadingScore && <Loader2 className="w-4 h-4 ml-2 animate-spin" />}
            </CardTitle>
            <Target className={cn("h-5 w-5 sm:h-6 sm:w-6", appTheme.iconAccentColor)} />
        </div>
        <CardDescription className={cn("text-xs", appTheme.textMuted)}>
            Real-time AI analysis of your resume&apos;s effectiveness.
        </CardDescription>
      </CardHeader>
      <CardContent className="pt-2 pb-5">
        <div className="flex flex-col items-center justify-center my-5 sm:my-6">
            <div className={cn(
                "relative w-28 h-28 sm:w-32 sm:h-32 rounded-full flex items-center justify-center border-4 shadow-inner",
                getScoreRingColor(score),
                appTheme.scoreCircleBg
            )}>
                <span className={cn("text-3xl sm:text-4xl font-bold", getScoreColor(score))}>
                    {score}
                </span>
                <span className={cn("absolute top-1/2 left-1/2 -translate-x-1/2 mt-3 sm:mt-4 text-base sm:text-lg font-medium", getScoreColor(score))}>%</span>
            </div>
            <div className="flex items-center mt-4">
                {feedback.icon}
                <p className={cn("ml-2 text-sm sm:text-md font-medium", getScoreColor(score))}>
                    {feedback.text}
                </p>
            </div>
        </div>
        
        <Progress value={score} className="h-2 sm:h-2.5 mb-5 sm:mb-6" /> {/* Use themed Progress */}

        <div className="space-y-3">
            <h4 className={cn("text-sm font-semibold flex items-center", appTheme.textHeading)}>
                <Zap size={16} className={cn("mr-2", appTheme.iconAccentColor)}/>
                Key AI Suggestions:
            </h4>
            {atsDetails.suggestions && atsDetails.suggestions.length > 0 ? (
                <ul className="list-disc list-inside text-xs sm:text-sm space-y-1.5 pl-1">
                    {atsDetails.suggestions.map((suggestion, index) => (
                        <li key={index} className={appTheme.textBody}>{suggestion}</li>
                    ))}
                </ul>
            ) : (
                <p className={cn("text-xs sm:text-sm italic", appTheme.textMuted)}>
                    {isLoadingScore ? "Analyzing..." : "No specific suggestions at this score, or analysis pending."}
                </p>
            )}
        </div>

        {atsDetails.breakdown && (
            <div className="mt-4 pt-3 border-t" style={{borderColor: appTheme.borderSecondary}}>
                 <button 
                    onClick={() => setShowBreakdown(!showBreakdown)}
                    className={cn(
                        "w-full flex justify-between items-center py-1.5 text-xs font-medium rounded",
                        appTheme.textMuted,
                        isDark ? "hover:bg-neutral-700/50" : "hover:bg-slate-100"
                    )}
                >
                    <span>Detailed Score Breakdown</span>
                    <HelpCircle size={14} className={cn("transition-transform", showBreakdown ? "rotate-180" : "")}/>
                 </button>
                 {showBreakdown && (
                    <ul className="text-xs mt-2 space-y-1 animate-fade-in-up">
                        {Object.entries(atsDetails.breakdown).map(([key, value]) => {
                            if (value && typeof value === 'object' && 'score' in value && 'suggestions' in value) {
                                const typedValue = value as { score: number; suggestions: string[] };
                                const displayKey = key.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase());
                                return renderBreakdownItem(displayKey, typedValue.score, typedValue.suggestions);
                            }
                            return null;
                        })}
                    </ul>
                 )}
            </div>
        )}
      </CardContent>
    </Card>
  );
};

export default AtsScoreDisplay;
</file>

<file path="components/resume/sections/experience.tsx">
/* eslint-disable @typescript-eslint/no-unused-vars */
// components/resume/sections/experience.tsx
'use client';
import React, { useEffect, useState } from 'react';
import { useForm, useFieldArray, Controller } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import * as z from 'zod';
import { useResumeStore } from '@/hooks/use-resume';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { Button } from '@/components/ui/button';
// eslint-disable-next-line @typescript-eslint/no-unused-vars
import { ExperienceEntry } from '@/types/resume';
import { PlusCircle, Trash2, Sparkles, CalendarDays, Target, Loader2 } from 'lucide-react';
import { useTheme } from '@/context/theme-provider';
import { cn } from '@/lib/utils';

const experienceEntrySchema = z.object({
  id: z.string(),
  company: z.string().min(1, "Company name is required"),
  position: z.string().min(1, "Position/Title is required"),
  startDate: z.string().min(4, "Start date is required (e.g., YYYY-MM)"),
  endDate: z.string().min(4, "End date is required (e.g., YYYY-MM or Present)"),
  description: z.string().min(10, "Description must be at least 10 characters").max(2000, "Description too long."),
  achievements: z.string().optional(),
  targetCompanyValues: z.string().optional(),
});

const experienceSchema = z.object({
  experience: z.array(experienceEntrySchema),
});

type ExperienceFormData = z.infer<typeof experienceSchema>;

// Define AppTheme (or import from a central config)
function getAppTheme(isDark: boolean) {
  return {
    textHeading: isDark ? 'text-neutral-100' : 'text-neutral-800',
    textMuted: isDark ? 'text-neutral-400' : 'text-neutral-500',
    borderSecondary: isDark ? 'border-neutral-700/50' : 'border-neutral-200',
    errorText: isDark ? 'text-red-400' : 'text-red-500',
    entryCardBg: isDark ? 'bg-neutral-700/30' : 'bg-slate-50',
    entryCardBorder: isDark ? 'border-neutral-600/50' : 'border-slate-200',
    iconColor: isDark ? 'text-neutral-400' : 'text-neutral-500',
    aiButtonText: isDark ? 'text-purple-400 hover:text-purple-300' : 'text-purple-600 hover:text-purple-700',
  };
}

const ExperienceSection: React.FC = () => {
  const { experience, updateExperience: updateStoreExperience, addExperience: addStoreExperience, removeExperience: removeStoreExperience } = useResumeStore();
  const { theme } = useTheme();
  const isDark = theme === 'dark';
  const appTheme = getAppTheme(isDark);
  
  const [enhancingIndex, setEnhancingIndex] = useState<number | null>(null);
  const resumeTitle = useResumeStore(state => state.title);

  const { control, register, handleSubmit, watch, setValue, formState: { errors }, reset } = useForm<ExperienceFormData>({
    resolver: zodResolver(experienceSchema),
    defaultValues: { experience: [] }, // Initialize with empty, populate via useEffect
  });
  
  useEffect(() => {
    const storeExperience = experience.map(exp => ({
      ...exp,
      achievements: exp.achievements?.join('\n') || '',
      targetCompanyValues: exp.targetCompanyValues || '',
    }));
    reset({ experience: storeExperience });
  }, [experience, reset]);

  const { fields, append, remove } = useFieldArray({
    control,
    name: "experience",
  });

  useEffect(() => {
    const subscription = watch((value, { name, type }) => {
      if (type === 'change' && value.experience) {
        value.experience.forEach((expData, index) => {
          if (expData && fields[index]) {
            const achievementsArray = expData.achievements?.split('\n').filter(ach => ach.trim() !== '');
            const idToUpdate = expData.id || fields[index].id;
            updateStoreExperience(index, { ...expData, id: idToUpdate, achievements: achievementsArray });
          }
        });
      }
    });
    return () => subscription.unsubscribe();
  }, [watch, updateStoreExperience, fields]);

  const handleAddExperience = () => {
    const newId = addStoreExperience();
    append({
      id: newId,
      company: '',
      position: '',
      startDate: '',
      endDate: '',
      description: '',
      achievements: '',
      targetCompanyValues: ''
    });
  };

  const handleRemoveExperience = (index: number) => {
    const expIdToRemove = fields[index].id;
    removeStoreExperience(expIdToRemove);
    remove(index);
  };

  const handleAiEnhance = async (index: number) => {
    setEnhancingIndex(index);
    const currentEntry = watch(`experience.${index}`);

    if (!currentEntry || !currentEntry.description) {
      alert("Please provide a description for the experience entry first.");
      setEnhancingIndex(null);
      return;
    }

    try {
      const response = await fetch('/api/ai/enhance-experience', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          description: currentEntry.description,
          achievements: currentEntry.achievements?.split('\n').filter(ach => ach.trim() !== ''),
          title: resumeTitle,
          jobTitle: currentEntry.position,
          targetCompanyValues: currentEntry.targetCompanyValues || '',
        }),
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(errorData.message || `AI enhancement failed: ${response.statusText}`);
      }
      const enhancedData = await response.json();
      setValue(`experience.${index}.description`, enhancedData.enhancedDescription, { shouldDirty: true, shouldValidate: true });
      setValue(`experience.${index}.achievements`, enhancedData.suggestedAchievements.join('\n'), { shouldDirty: true, shouldValidate: true });
      alert("Experience enhanced! Review the changes and the suggested achievements.");
    } catch (error) {
      console.error("AI Enhancement error:", error);
      alert(`AI Enhancement failed: ${error instanceof Error ? error.message : String(error)}`);
    } finally {
      setEnhancingIndex(null);
    }
  };

  return (
    <form className="space-y-6 sm:space-y-8" onSubmit={handleSubmit(() => {})}>
      <div className="flex flex-col sm:flex-row justify-between sm:items-center gap-4 border-b pb-4 mb-6 sm:mb-8" style={{borderColor: appTheme.borderSecondary}}>
        <h2 className={cn("text-xl sm:text-2xl font-semibold", appTheme.textHeading)}>Work Experience</h2>
        <Button type="button" variant="outline" size="sm" onClick={handleAddExperience}>
          <PlusCircle className="w-4 h-4 mr-2" />
          Add Experience
        </Button>
      </div>

      {fields.length > 0 ? (
        <div className="space-y-6">
          {fields.map((item, index) => (
            <div 
              key={item.id} 
              className={cn(
                "p-5 sm:p-6 rounded-xl border space-y-5 sm:space-y-6 relative",
                appTheme.entryCardBg,
                appTheme.entryCardBorder
              )}
            >
              <Button
                type="button"
                variant="ghost"
                size="icon"
                onClick={() => handleRemoveExperience(index)}
                className="absolute top-3 right-3 text-red-400 hover:text-destructive hover:bg-destructive/10 w-8 h-8"
                aria-label="Remove experience entry"
              >
                <Trash2 className="w-4 h-4" />
              </Button>

              <div className="grid grid-cols-1 sm:grid-cols-2 gap-x-6 gap-y-5">
                <div>
                  <Label htmlFor={`experience.${index}.company`}>Company Name</Label>
                  <Input id={`experience.${index}.company`} {...register(`experience.${index}.company`)} placeholder="e.g., Tech Solutions Inc." />
                  {errors.experience?.[index]?.company && <p className={cn("text-xs mt-1.5", appTheme.errorText)}>{errors.experience[index]?.company?.message}</p>}
                </div>
                <div>
                  <Label htmlFor={`experience.${index}.position`}>Position / Title</Label>
                  <Input id={`experience.${index}.position`} {...register(`experience.${index}.position`)} placeholder="e.g., Software Engineer" />
                  {errors.experience?.[index]?.position && <p className={cn("text-xs mt-1.5", appTheme.errorText)}>{errors.experience[index]?.position?.message}</p>}
                </div>
              </div>

              <div className="grid grid-cols-1 sm:grid-cols-2 gap-x-6 gap-y-5">
                <div>
                  <Label htmlFor={`experience.${index}.startDate`}>Start Date</Label>
                  <div className="relative">
                    <Input id={`experience.${index}.startDate`} {...register(`experience.${index}.startDate`)} placeholder="YYYY-MM" className="pr-10" />
                    <CalendarDays className={cn("absolute right-3 top-1/2 transform -translate-y-1/2 w-4 h-4 pointer-events-none", appTheme.iconColor)} />
                  </div>
                  {errors.experience?.[index]?.startDate && <p className={cn("text-xs mt-1.5", appTheme.errorText)}>{errors.experience[index]?.startDate?.message}</p>}
                </div>
                <div>
                  <Label htmlFor={`experience.${index}.endDate`}>End Date (or &quot;Present&quot;)</Label>
                  <div className="relative">
                    <Input id={`experience.${index}.endDate`} {...register(`experience.${index}.endDate`)} placeholder="YYYY-MM or Present" className="pr-10" />
                    <CalendarDays className={cn("absolute right-3 top-1/2 transform -translate-y-1/2 w-4 h-4 pointer-events-none", appTheme.iconColor)} />
                  </div>
                  {errors.experience?.[index]?.endDate && <p className={cn("text-xs mt-1.5", appTheme.errorText)}>{errors.experience[index]?.endDate?.message}</p>}
                </div>
              </div>

              <div>
                <Label htmlFor={`experience.${index}.targetCompanyValues`}>
                    Target Company Keywords/Values (Optional)
                </Label>
                <div className="relative">
                    <Input
                        id={`experience.${index}.targetCompanyValues`}
                        {...register(`experience.${index}.targetCompanyValues`)}
                        placeholder="e.g., innovation, customer-centric, agile"
                        className="pl-10" // Make space for icon
                    />
                    <Target className={cn("absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 pointer-events-none", appTheme.iconColor)} />
                </div>
                <p className={cn("text-xs text-gray-400 mt-1", appTheme.textMuted)}>
                    Comma-separated keywords. AI will use these to tailor enhancement.
                </p>
              </div>

              <div>
                <div className="flex justify-between items-center mb-1.5">
                    <Label htmlFor={`experience.${index}.description`}>Key Responsibilities & Description</Label>
                    <Button
                        type="button"
                        variant="ghost"
                        size="sm"
                        onClick={() => handleAiEnhance(index)}
                        disabled={enhancingIndex === index}
                        className={cn("text-xs p-1 flex items-center", appTheme.aiButtonText)}
                    >
                        {enhancingIndex === index ? (
                            <Loader2 className="w-3.5 h-3.5 mr-1 animate-spin" />
                        ) : (
                            <Sparkles className="w-3.5 h-3.5 mr-1" />
                        )}
                        AI Enhance Description & Achievements
                    </Button>
                </div>
                <Textarea
                  id={`experience.${index}.description`}
                  {...register(`experience.${index}.description`)}
                  rows={4}
                  placeholder="Describe your role, responsibilities, and key contributions. Start sentences with action verbs for impact."
                />
                {errors.experience?.[index]?.description && <p className={cn("text-xs mt-1.5", appTheme.errorText)}>{errors.experience[index]?.description?.message}</p>}
              </div>

              <div>
                <Label htmlFor={`experience.${index}.achievements`}>Quantifiable Achievements (Optional - one per line)</Label>
                <Textarea
                  id={`experience.${index}.achievements`}
                  {...register(`experience.${index}.achievements`)}
                  rows={3}
                  placeholder="e.g., Increased sales by 15% in Q3 by implementing X strategy."
                />
                <p className={cn("text-xs mt-2", appTheme.textMuted)}>
                  AI can help generate or refine these based on your description above. Focus on impact and numbers.
                </p>
              </div>
            </div>
          ))}
        </div>
      ) : (
         <div className={cn("text-center py-10 border rounded-xl", appTheme.entryCardBg, appTheme.entryCardBorder)}>
          <PlusCircle className={cn("w-12 h-12 mx-auto mb-4", appTheme.iconColor)} />
          <p className={cn("mb-3 font-medium", appTheme.textHeading)}>No work experience added yet.</p>
          <p className={cn("text-sm", appTheme.textMuted)}>Showcase your professional journey by adding your roles.</p>
        </div>
      )}
    </form>
  );
};

export default ExperienceSection;
</file>

<file path="types/resume.ts">
// types/resume.ts

export interface PersonalInfo {
  firstName: string;
  lastName: string;
  email: string;
  phone: string;
  location: string; // e.g., "City, Country" or "City, State"
  linkedin?: string;
  website?: string;
  summary: string;
}

export interface EducationEntry {
  id: string; // UUID for list management
  institution: string;
  degree: string;
  field: string; // Major or field of study
  startDate: string; // Could be YYYY-MM or YYYY
  endDate: string;   // Could be YYYY-MM, YYYY or "Present"
  gpa?: string;
  achievements?: string[]; // List of achievements/bullet points
}
export interface ExperienceEntry {
  id: string; // UUID
  company: string;
  position: string;
  startDate: string;
  endDate: string;
  description: string; // User's raw input
  enhancedDescription?: string; // AI-enhanced version
  achievements: string[]; // Bullet points, can also be AI-enhanced
  targetCompanyValues?: string; // <<< ADDED for storing in Zustand/DB if needed
}

export interface SkillEntry {
  id: string; // UUID
  name: string;
  level: 'Beginner' | 'Intermediate' | 'Advanced' | 'Expert';
  category: 'Technical' | 'Soft' | 'Language' | 'Other';
}

export interface ProjectEntry {
  id: string; // UUID
  name: string;
  description: string;
  technologies: string[]; // List of tech used
  url?: string;
  github?: string;
}

export interface ResumeData {
  id?: string; // Optional: might not exist until saved
  userId: string;
  title: string;
  personalInfo: PersonalInfo;
  education: EducationEntry[];
  experience: ExperienceEntry[];
  skills: SkillEntry[];
  projects: ProjectEntry[];
  atsScore: number; // Overall score
  // createdAt: string; // Handled by DB or backend
  // updatedAt: string; // Handled by DB or backend
}

// For the store, we might want to manage current step and other UI states
export interface ResumeState extends ResumeData {
  updateField: <K extends keyof ResumeData>(field: K, value: ResumeData[K]) => void;
  addEducation: (entry: EducationEntry) => void;
  updateEducation: (index: number, entry: EducationEntry) => void;
  removeEducation: (index: number) => void;
  addExperience: (entry: ExperienceEntry) => void;
  updateExperience: (index: number, entry: ExperienceEntry) => void;
  removeExperience: (index: number) => void;
  // ... similar methods for skills and projects
}


export interface ATSScoreDetails {
  overall: number;
  breakdown?: {
    keywords: { score: number; suggestions: string[]; };
    clarityAndConciseness: { score: number; suggestions: string[]; };
    actionVerbs: { score: number; suggestions: string[]; };
    quantifiableResults: { score: number; suggestions: string[]; };
    // formattingAndStructure: { score: number; suggestions: string[]; }; // OLD
    formattingAndConciseness: { score: number; suggestions: string[]; }; // NEW - Align with AI output
    lengthAndRelevance: { score: number; suggestions: string[]; };
  };
  suggestions: string[];
}
</file>

<file path="app/api/resumes/[resumeId]/route.ts">
/* eslint-disable @typescript-eslint/no-explicit-any */
// app/api/resumes/[resumeId]/route.ts
import { NextResponse } from 'next/server';
import { auth } from '@clerk/nextjs/server';
import { prisma } from '@/lib/db';
import { ResumeData } from '@/types/resume'; // Make sure this includes all sub-types

type UpdateResumePayload = Omit<ResumeData, 'id' | 'userId' | 'createdAt' | 'updatedAt'>;

export async function GET(
  request: Request, // Not used, but part of the signature
  context: { params: Promise<{ resumeId: string }> }
) {
  try {
    const { userId } = await auth();
    const { resumeId } = await context.params;

    if (!userId) {
      return new NextResponse('Unauthorized', { status: 401 });
    }

    if (!resumeId) {
      return new NextResponse('Resume ID is required', { status: 400 });
    }

    const resume = await prisma.resume.findUnique({
      where: {
        id: resumeId,
        userId: userId, // Crucial: Ensure the user owns this resume
      },
      include: { // Fetch all related data needed to populate the form
        personalInfo: true,
        education: true,
        experience: true,
        skills: true,
        projects: true,
      },
    });

    if (!resume) {
      // It's important to distinguish between "not found" and "access denied"
      // For simplicity here, we return 404 for both if the query doesn't yield a result for this user.
      return new NextResponse('Resume not found or access denied', { status: 404 });
    }

    return NextResponse.json(resume);

  } catch (error) {
    console.error(`[RESUME_ID_GET_API Error for ID: ${(await context.params).resumeId}]`, error);
    return new NextResponse('Internal Server Error', { status: 500 });
  }
}

export async function PUT(
  request: Request,
  context: { params: Promise<{ resumeId: string }> }
) {
  console.log('[DEBUG] PUT context:', JSON.stringify(context, null, 2));
  try {
    const { userId } = await auth();
    const { resumeId } = await context.params;

    if (!userId) {
      return new NextResponse('Unauthorized', { status: 401 });
    }
    if (!resumeId) {
      return new NextResponse('Resume ID is required', { status: 400 });
    }

    const body = await request.json() as UpdateResumePayload;
    const {
      title,
      personalInfo,
      education = [],
      experience = [],
      skills = [],
      projects = [],
      atsScore = 0
    } = body;

    if (!title || !personalInfo) {
        return new NextResponse('Missing title or personalInfo', { status: 400 });
    }
    
    const existingResume = await prisma.resume.findUnique({
      where: { id: resumeId },
    });

    if (!existingResume) {
      return new NextResponse('Resume not found', { status: 404 });
    }
    if (existingResume.userId !== userId) {
      return new NextResponse('Access denied', { status: 403 });
    }

    const updatedResume = await prisma.$transaction(async (tx : any) => {
      await tx.resume.update({
        where: { id: resumeId },
        data: { title, atsScore },
      });

      if (personalInfo) {
        await tx.personalInfo.upsert({
          where: { resumeId: resumeId },
          create: { ...personalInfo, resumeId: resumeId },
          update: { ...personalInfo }, 
        });
      }

      await tx.educationEntry.deleteMany({ where: { resumeId: resumeId } });
      if (education.length > 0) {
        await tx.educationEntry.createMany({
          data: education.map(edu => ({
            institution: edu.institution, degree: edu.degree, field: edu.field,
            startDate: edu.startDate, endDate: edu.endDate, gpa: edu.gpa,
            achievements: edu.achievements, resumeId: resumeId,
          })),
        });
      }
      
      await tx.experienceEntry.deleteMany({ where: { resumeId: resumeId } });
      if (experience.length > 0) {
        await tx.experienceEntry.createMany({
          data: experience.map(exp => ({
            company: exp.company, position: exp.position, startDate: exp.startDate,
            endDate: exp.endDate, description: exp.description,
            enhancedDescription: exp.enhancedDescription, achievements: exp.achievements,
            resumeId: resumeId,
          })),
        });
      }

      await tx.skillEntry.deleteMany({ where: { resumeId: resumeId } });
      if (skills.length > 0) {
        await tx.skillEntry.createMany({
          data: skills.map(skill => ({
            name: skill.name, level: skill.level, category: skill.category,
            resumeId: resumeId,
          })),
        });
      }

      await tx.projectEntry.deleteMany({ where: { resumeId: resumeId } });
      if (projects.length > 0) {
        await tx.projectEntry.createMany({
          data: projects.map(proj => ({
            name: proj.name, description: proj.description, technologies: proj.technologies,
            url: proj.url, github: proj.github, resumeId: resumeId,
          })),
        });
      }

      return tx.resume.findUniqueOrThrow({
        where: { id: resumeId },
        include: {
          personalInfo: true, education: true, experience: true,
          skills: true, projects: true,
        },
      });
    }, 
    {
      maxWait: 15000, 
      timeout: 15000,
    });

    return NextResponse.json(updatedResume);

  } catch (error) {
    console.error('[RESUME_ID_PUT_API]', error);
    // if (error instanceof prisma.PrismaClientKnownRequestError) { // Corrected 'prisma.'
    //     if (error.code === 'P2025') {
    //         return new NextResponse('Resource not found during update operation.', { status: 404 });
    //     } else if (error.code === 'P2028') {
    //         return new NextResponse('Operation timed out, please try again.', { status: 504 });
    //     }
    // }
    return new NextResponse('Internal Server Error', { status: 500 });
  }
}

export async function DELETE(
  request: Request, // Not used, but part of the signature
  context: { params: Promise<{ resumeId: string }> }
) {
  try {
    const { userId } = await auth();
    const { resumeId } = await context.params;

    if (!userId) {
      return new NextResponse('Unauthorized', { status: 401 });
    }

    if (!resumeId) {
      return new NextResponse('Resume ID is required', { status: 400 });
    }

    // Verify ownership before deleting
    const resumeToDelete = await prisma.resume.findUnique({
      where: {
        id: resumeId,
        userId: userId,
      },
    });

    if (!resumeToDelete) {
      return new NextResponse('Resume not found or access denied', { status: 404 });
    }

    // Delete the resume. Prisma's `onDelete: Cascade` in the schema
    // should handle deleting related PersonalInfo, EducationEntries, etc.
    await prisma.resume.delete({
      where: {
        id: resumeId,
      },
    });

    return new NextResponse(null, { status: 204 }); // 204 No Content for successful deletion

  } catch (error) {
    console.error('[RESUME_ID_DELETE_API]', error);
    // if (error instanceof prisma.PrismaClientKnownRequestError && error.code === 'P2025') { // Record to delete not found
    //     return new NextResponse('Resume not found.', { status: 404 });
    // }
    return new NextResponse('Internal Server Error', { status: 500 });
  }
}
</file>

<file path="components/landing/landing-page.tsx">
/* eslint-disable @typescript-eslint/no-unused-vars */
// components/landing/landing-page.tsx
"use client";
import React, { useState, useEffect } from 'react';
import Link from 'next/link';
// ... other imports
import { 
    ArrowRight, Play, Star, Check, Users, Award, Clock, Shield, Moon, Sun, 
    Sparkles, TrendingUp, Zap, Target, FileText as FileTextIconLucide,
    LogIn, Edit2, DownloadCloud, BarChart2, ListChecks, ShieldCheck, Briefcase, // New icons for features
    Github, Linkedin, Twitter as TwitterIcon // Icons for Footer
} from 'lucide-react';
import { useTheme } from '@/context/theme-provider';
import SlidingCompanies from './sliding-company';
import { cn } from '@/lib/utils';
import { useRouter } from 'next/navigation';

// ======== BENTO GRID COMPONENTS (Professional Dark Theme Inspired) ========
interface BentoCardProps {
  name: string;
  className?: string;
  description: string;
  href?: string;
  ctaText?: string; // Changed from 'cta' for clarity
  backgroundContent?: React.ReactNode;
  Icon: React.ElementType;
  isDark: boolean;
  isHero?: boolean;
}

const BentoCard: React.FC<BentoCardProps> = ({
  name,
  className,
  description,
  href = "#",
  ctaText = "Learn More",
  backgroundContent,
  Icon,
  isDark,
  isHero = false,
}) => {
  const cardBaseStyle = "group relative flex flex-col justify-between overflow-hidden rounded-2xl";
  const cardTransition = "transition-all duration-300 ease-in-out";
  
  const cardThemeStyle = isDark
    ? "bg-neutral-900/80 border border-neutral-800/70 shadow-xl shadow-black/20 hover:border-neutral-700"
    : "bg-white border border-neutral-200 shadow-lg shadow-neutral-500/10 hover:border-neutral-300";

  const heroCardDarkStyle = isDark
    ? "bg-neutral-800/70 border border-neutral-700/60 shadow-2xl shadow-black/30 hover:border-neutral-600"
    : "bg-slate-50 border border-slate-200 shadow-xl shadow-slate-500/15 hover:border-slate-300";

  const titleStyle = cn(
    "font-semibold tracking-tight", 
    isHero ? "text-xl md:text-2xl lg:text-3xl" : "text-lg md:text-xl",
    isDark ? "text-neutral-100" : "text-neutral-800"
  );
  const descriptionStyle = cn(
    "leading-relaxed text-sm",
    isHero ? "md:text-base" : "md:text-sm",
    isDark ? "text-neutral-400" : "text-neutral-600"
  );
  const iconStyle = cn(
    "mb-3 md:mb-4 transition-transform duration-300 group-hover:scale-90",
    isHero ? "h-10 w-10 md:h-12 md:w-12" : "h-8 w-8 md:h-10 md:w-10",
    isDark ? "text-blue-400" : "text-blue-600"
  );
  const ctaStyle = cn(
    "pointer-events-auto text-xs font-medium group-hover:underline",
    isDark ? "text-blue-400 hover:text-blue-300" : "text-blue-600 hover:text-blue-700"
  );
  const padding = isHero ? "p-6 md:p-8" : "p-5 md:p-6";

  return (
    <div
      className={cn(
        cardBaseStyle,
        cardTransition,
        isHero ? heroCardDarkStyle : cardThemeStyle,
        className,
        "hover:-translate-y-1 hover:shadow-fuchsia-500/5"
      )}
    >
      {backgroundContent && (
        <div className="absolute inset-0 z-0 opacity-80 group-hover:opacity-100 transition-opacity duration-300">
           <div 
            className={cn(
                "absolute inset-0 [mask-image:radial-gradient(circle_at_center,white_20%,transparent_80%)] group-hover:[mask-image:radial-gradient(circle_at_center,white_40%,transparent_70%)] transition-all duration-500 ease-out",
                 isDark ? "opacity-40 group-hover:opacity-60" : "opacity-20 group-hover:opacity-30"
            )}
           >
            {backgroundContent}
          </div>
        </div>
      )}
      <div className={cn("relative z-10 flex flex-col", padding)}>
        <Icon className={iconStyle} />
        <h3 className={titleStyle}>
          {name}
        </h3>
        <p className={descriptionStyle}>{description}</p>
      </div>
      {!isHero && href && ctaText && (
        <div className={cn("relative z-10 mt-auto p-5 md:p-6 pt-0 md:pt-1", 
                           "opacity-0 group-hover:opacity-100 transition-opacity duration-300 delay-100"
        )}>
          <a href={href} className={ctaStyle}>
            {ctaText}
            <ArrowRight className="ml-1 inline h-3.5 w-3.5" />
          </a>
        </div>
      )}
    </div>
  );
};

const BentoGrid = ({ children, className }: { children: React.ReactNode, className?: string }) => {
  return (
    <div
      className={cn(
        "grid w-full gap-5 md:gap-6",
        className,
      )}
    >
      {children}
    </div>
  );
};

const bentoFeaturesData = [
  {
    Icon: BarChart2,
    name: "Real-Time ATS Insights",
    description: "Gain instant access to your resume's ATS score with our real-time analytics. Make informed decisions with up-to-the-minute information and actionable suggestions.",
    href: "#feature-ats",
    ctaText: "Analyze My Resume",
    className: "col-span-2 md:col-span-2 lg:col-span-2 row-span-2",
    isHero: true,
    backgroundContent: (
      <div className="absolute inset-0 flex items-end justify-center p-4 md:p-8 opacity-40 group-hover:opacity-60 transition-opacity">
        <svg width="100%" height="60%" viewBox="0 0 300 100" preserveAspectRatio="none">
          <path d="M0 80 C 50 20, 100 90, 150 40 S 250 0, 300 60" stroke="currentColor" strokeWidth="3" fill="transparent" className="text-blue-500/30 group-hover:text-blue-500/50 transition-colors duration-500"/>
          <circle cx="150" cy="40" r="5" fill="currentColor" className="text-blue-400"/>
          <text x="155" y="38" fontSize="8" fill="currentColor" className="text-neutral-400">Optimal</text>
        </svg>
      </div>
    ),
  },
  {
    Icon: ListChecks,
    name: "Automated Content Enhancement",
    description: "Categorize and monitor your resume sections with our AI. Optimize wording and bullet points without lifting a finger.",
    href: "#feature-ai",
    ctaText: "Enhance My Content",
    className: "col-span-1",
    backgroundContent: (
      <div className="absolute inset-0 flex flex-col items-start justify-end p-4 md:p-6 space-y-2 opacity-30 group-hover:opacity-50">
        {[1, 2, 3].map(i => (
          <div key={i} className="h-3 w-full rounded-full bg-neutral-700/50 group-hover:bg-neutral-600/50 transition-colors" style={{width: `${100 - i*15}%`}}></div>
        ))}
      </div>
    ),
  },
 {
    Icon: Zap,
    name: "Effortless Export & Share",
    description: "Download your ATS-optimized resume in PDF, DOCX, or TXT. Share with a unique link and track views.",
    href: "#feature-export",
    ctaText: "Download Now",
    className: "col-span-1",
  backgroundContent: (
      <div className="absolute inset-0 flex items-center justify-around p-4 opacity-20 group-hover:opacity-30">
        <FileTextIconLucide className="w-12 h-12 text-purple-500/50 transform -rotate-6" />
        <FileTextIconLucide className="w-16 h-16 text-purple-500/50 transform scale-110" />
        <FileTextIconLucide className="w-12 h-12 text-purple-500/50 transform rotate-6" />
      </div>
    ),
  },
];

const LandingPageContent = () => {
  const [isVisible, setIsVisible] = useState(false);
  const [scrollY, setScrollY] = useState(0);
  const { theme, toggleTheme } = useTheme();
  const router = useRouter();

  useEffect(() => {
    setIsVisible(true);
    const handleScroll = () => setScrollY(window.scrollY);
    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, []);

  const isDark = theme === 'dark';

  const themeClasses = {
    bg: isDark ? 'bg-neutral-950' : 'bg-slate-50',
    bgAlt: isDark ? 'bg-neutral-900' : 'bg-white',
    text: isDark ? 'text-neutral-100' : 'text-neutral-900',
    textMuted: isDark ? 'text-neutral-400' : 'text-neutral-500',
    textMuted2: isDark ? 'text-neutral-500' : 'text-neutral-400',
    border: isDark ? 'border-neutral-800' : 'border-neutral-200',
    accent: isDark ? 'text-blue-400' : 'text-blue-600',
    accentGradient: 'bg-gradient-to-r from-blue-500 to-indigo-500',
    accentHover: 'hover:from-blue-600 hover:to-indigo-600',
    footerBg: isDark ? 'bg-neutral-900' : 'bg-white',
    footerTextTitle: isDark ? 'text-neutral-300' : 'text-neutral-700',
    footerTextLink: isDark ? 'text-neutral-400 hover:text-blue-400' : 'text-neutral-500 hover:text-blue-600',
    footerTextCopyright: isDark ? 'text-neutral-500' : 'text-neutral-400',
  };
  
  const finalCtaThemeClasses = { 
    sectionBgGradient: isDark ? 'bg-gradient-to-br from-neutral-900 via-black to-indigo-950' : 'bg-gradient-to-br from-blue-50 via-white to-indigo-50', headlineText: isDark ? 'text-white' : 'text-neutral-900', subHeadlineText: isDark ? 'text-neutral-300' : 'text-neutral-600', secondaryButtonBorder: isDark ? 'border-neutral-600' : 'border-blue-500', secondaryButtonText: isDark ? 'text-neutral-200' : 'text-blue-600', secondaryButtonHoverBg: isDark ? 'hover:bg-neutral-800' : 'hover:bg-blue-100', secondaryButtonHoverText: isDark ? 'hover:text-white' : 'hover:text-blue-700', smallPrintText: isDark ? 'text-neutral-500' : 'text-blue-700 opacity-80', animatedBlur1: isDark ? 'bg-indigo-700/10' : 'bg-blue-300/20', animatedBlur2: isDark ? 'bg-purple-700/5' : 'bg-indigo-300/10',
  };

  const handleWatchDemo = () => { alert("Watch Demo functionality to be implemented!"); };
  const threeStepsData = [ 
    { step: '01', Icon: LogIn, title: 'Upload or Start Fresh', description: 'Easily import data from an existing resume or LinkedIn, or begin with a clean, professional template.' }, { step: '02', Icon: Edit2, title: 'AI-Powered Refinement', description: 'Our intelligent assistant helps you craft compelling content, suggests keywords, and optimizes for ATS.' }, { step: '03', Icon: DownloadCloud, title: 'Download & Apply', description: 'Export your perfectly polished resume in multiple formats and confidently apply to your dream roles.' }
  ];
  
  const displayedBentoFeatures = bentoFeaturesData;

  const ctaButtonBaseGradient = isDark
    ? "from-blue-500 via-indigo-500 to-purple-600"
    : "from-blue-600 via-indigo-600 to-purple-700";
  const ctaAnimatedBgGradient = isDark
    ? "from-blue-600 via-indigo-600 to-purple-700"
    : "from-blue-700 via-indigo-700 to-purple-800";
  const ctaShineViaColor = isDark ? "via-white/20" : "via-black/10";

  const footerLinks = [
    {
      title: 'Product',
      links: [
        { name: 'Features', href: '#features' },
        { name: 'Pricing', href: '#pricing' },
        { name: 'Examples', href: '#examples' },
        { name: 'How it Works', href: '#how-it-works' },
      ],
    },
    {
      title: 'Company',
      links: [
        { name: 'About Us', href: '/about' },
        { name: 'Contact Us', href: '/contact' },
      ],
    },
    {
      title: 'Resources',
      links: [
        { name: 'Help Center', href: '/help' },
        { name: 'ATS Guide', href: '/guides/ats-resume' },
      ],
    },
    {
      title: 'Legal',
      links: [
        { name: 'Privacy Policy', href: '/privacy' },
        { name: 'Terms of Service', href: '/terms' },
      ],
    },
  ];

  const socialMediaLinks = [
    { name: 'GitHub', href: 'https://github.com/yourcompany', Icon: Github, ariaLabel: "GitHub Profile" },
    { name: 'LinkedIn', href: 'https://linkedin.com/company/yourcompany', Icon: Linkedin, ariaLabel: "LinkedIn Profile" },
    { name: 'Twitter', href: 'https://twitter.com/yourcompany', Icon: TwitterIcon, ariaLabel: "Twitter Profile" },
  ];

  return (
    <div 
        className={`${themeClasses.bg} transition-colors duration-300 font-sans`}
        style={{
            '--bento-analytics-stroke': isDark ? 'rgba(59, 130, 246, 0.4)' : 'rgba(37, 99, 235, 0.5)',
            '--bento-card-detail-bg-start': isDark ? 'rgba(129, 140, 248, 0.02)' : 'rgba(199, 210, 254, 0.05)',
            '--bento-card-detail-bg-hover': isDark ? 'rgba(129, 140, 248, 0.05)' : 'rgba(199, 210, 254, 0.1)',
        } as React.CSSProperties}
    >
      <nav className={`flex items-center justify-between px-4 sm:px-6 py-3 max-w-7xl mx-auto ${isDark ? 'bg-neutral-950/80' : 'bg-slate-50/80'} backdrop-blur-md sticky top-0 z-50 border-b ${themeClasses.border}`}>
        <Link href="/" className="flex items-center space-x-2"> <div className="w-8 h-8 bg-gradient-to-br from-blue-500 to-indigo-500 rounded-lg flex items-center justify-center shadow-md"> <Sparkles className="w-4 h-4 text-white" /> </div> <span className="text-xl font-bold bg-gradient-to-r from-blue-500 to-indigo-500 bg-clip-text text-transparent"> GetHired </span> </Link>
        <div className="hidden md:flex items-center space-x-6"> <a href="#features" className={`${themeClasses.textMuted} hover:${themeClasses.text} transition-colors text-sm font-medium`}>Features</a> <a href="#pricing" className={`${themeClasses.textMuted} hover:${themeClasses.text} transition-colors text-sm font-medium`}>Pricing</a> <a href="#examples" className={`${themeClasses.textMuted} hover:${themeClasses.text} transition-colors text-sm font-medium`}>Examples</a> <a href="#testimonials" className={`${themeClasses.textMuted} hover:${themeClasses.text} transition-colors text-sm font-medium`}>Reviews</a> </div>
        <div className="flex items-center space-x-3"> <button onClick={toggleTheme} className={`p-2 rounded-md ${themeClasses.textMuted} hover:${themeClasses.text} transition-colors`} aria-label="Toggle theme"> {isDark ? <Sun className="w-4 h-4" /> : <Moon className="w-4 h-4" />} </button> <Link href="/sign-in" className={`${themeClasses.textMuted} hover:${themeClasses.text} text-sm font-medium transition-colors`}> Sign in </Link> <Link href="/sign-up" className={`${themeClasses.accentGradient} ${themeClasses.accentHover} text-white px-4 py-2 rounded-lg text-sm font-semibold transition-all duration-200 shadow-md hover:shadow-lg transform hover:-translate-y-0.5`}> Get Started </Link> </div>
      </nav>
      
      <section className="max-w-7xl mx-auto px-4 sm:px-6 pt-16 pb-24 relative overflow-hidden">
        {isDark && (
            <div className="absolute inset-0 -z-10 opacity-20 [mask-image:radial-gradient(ellipse_at_center,white_20%,transparent_70%)]">
                <svg className="absolute inset-0 h-full w-full" aria-hidden="true">
                    <defs><pattern id="hero-texture-dark" width="8" height="8" patternUnits="userSpaceOnUse" patternContentUnits="userSpaceOnUse"><circle cx="1" cy="1" r="0.5" fill="rgba(255,255,255,0.3)"></circle></pattern></defs>
                    <rect width="100%" height="100%" fill="url(#hero-texture-dark)"></rect>
                </svg>
            </div>
        )}
        <div className="absolute inset-0 overflow-hidden -z-20"> <div className="absolute -top-40 -right-40 w-80 h-80 bg-blue-500/5 rounded-full blur-3xl animate-pulse"></div> <div className="absolute -bottom-40 -left-40 w-80 h-80 bg-indigo-500/5 rounded-full blur-3xl animate-pulse animation-delay-1000"></div> </div>
        <div className={`text-center transition-all duration-1000 relative z-10 ${isVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-8'}`}>
          <div className={`inline-flex items-center ${isDark ? 'bg-emerald-800/30 text-emerald-300 border border-emerald-700/40' : 'bg-emerald-50 text-emerald-700 border border-emerald-200'} px-3 py-1.5 rounded-full text-xs font-medium mb-8 backdrop-blur-sm animate-fade-in-up`} style={{animationDelay: '0.2s'}}> <div className="w-1.5 h-1.5 bg-emerald-400 rounded-full mr-2 animate-pulse"></div> Trusted by 150,000+ professionals worldwide </div>
          <div className="animate-fade-in-up" style={{animationDelay: '0.4s'}}> <h1 className={`text-4xl sm:text-5xl lg:text-6xl font-bold ${themeClasses.text} mb-6 leading-tight tracking-tight`}> Build resumes that <span className="block bg-gradient-to-r from-blue-500 via-indigo-500 to-purple-500 bg-clip-text text-transparent animate-gradient-x"> dominate ATS systems </span> </h1> </div>
          <div className="animate-fade-in-up" style={{animationDelay: '0.6s'}}> <p className={`text-lg sm:text-xl ${themeClasses.textMuted} mb-10 max-w-2xl mx-auto leading-relaxed`}> AI-powered resume builder with advanced ATS optimization, real-time scoring, and templates designed by industry experts. Land interviews 3x faster. </p> </div>
          <div className="flex flex-col sm:flex-row items-center justify-center space-y-4 sm:space-y-0 sm:space-x-4 mb-16 animate-fade-in-up" style={{animationDelay: '0.8s'}}> <Link href="/sign-up" className={`${themeClasses.accentGradient} ${themeClasses.accentHover} text-white px-8 py-3.5 rounded-lg font-semibold flex items-center transition-all duration-200 shadow-lg hover:shadow-xl transform hover:-translate-y-1 group`}> Create Professional Resume <ArrowRight className="w-4 h-4 ml-2 group-hover:translate-x-1 transition-transform" /> </Link> <button onClick={handleWatchDemo} className={`flex items-center ${themeClasses.textMuted} hover:${themeClasses.text} font-medium transition-colors group`} > <div className={`p-2.5 rounded-full ${isDark ? 'bg-white/5' : 'bg-slate-100'} backdrop-blur-sm mr-3 group-hover:bg-blue-500/10 transition-colors`}> <Play className="w-4 h-4" /> </div> Watch Demo (2 min) </button> </div>
          <div className="grid grid-cols-2 lg:grid-cols-4 gap-4 sm:gap-6 max-w-4xl mx-auto animate-fade-in-up" style={{animationDelay: '1s'}}> {[{ value: '97%', label: 'Interview Rate', icon: TrendingUp, color: 'text-emerald-400' }, { value: '150K+', label: 'Resumes Created', icon: Users, color: 'text-blue-400' }, { value: '4.9/5', label: 'User Rating', icon: Star, color: 'text-yellow-400' }, { value: '90s', label: 'Build Time', icon: Zap, color: 'text-purple-400' }].map((stat, index) => ( <div key={index} className={`text-center p-4 sm:p-6 rounded-xl ${isDark ? 'bg-neutral-800/50' : 'bg-white/70'} backdrop-blur-sm border ${themeClasses.border} hover:border-blue-500/30 transition-all duration-300 hover:-translate-y-1 group`}> <stat.icon className={`w-5 h-5 ${stat.color} mx-auto mb-2 group-hover:scale-110 transition-transform`} /> <div className={`text-2xl sm:text-3xl font-bold ${stat.color} mb-1`}> {stat.value} </div> <div className={`text-xs sm:text-sm ${themeClasses.textMuted2} font-medium`}> {stat.label} </div> </div> ))} </div>
        </div>
      </section>
      <SlidingCompanies />

      <section id="features" className="max-w-7xl mx-auto px-4 sm:px-6 py-20 md:py-28">
        <div className="text-center mb-16 sm:mb-20 animate-fade-in-up" style={{animationDelay: '0.1s'}}>
          <span className={`inline-block px-3 py-1 mb-4 text-xs font-semibold tracking-wider rounded-full ${isDark ? 'bg-blue-500/10 text-blue-400' : 'bg-blue-100 text-blue-700'}`}>
            FEATURES
          </span>
          <h2 className={`text-3xl sm:text-4xl lg:text-5xl font-bold ${themeClasses.text} mb-4 tracking-tight`}>
            Essential Tools for Your Career Growth
          </h2>
          <p className={`text-lg ${themeClasses.textMuted} max-w-xl mx-auto`}>
            Unlock your potential with GetHired&apos;s powerful suite of tools designed for your success.
          </p>
        </div>
        
        <BentoGrid 
          className="grid-cols-1 md:grid-cols-3 lg:grid-cols-3 auto-rows-[18rem] sm:auto-rows-[19rem] md:auto-rows-[20rem]"
        >
          {displayedBentoFeatures.map((feature, idx) => (
            <BentoCard 
              key={idx} 
              {...feature} 
              isDark={isDark}
              isHero={feature.isHero}
            />
          ))}
        </BentoGrid>
      </section>

      <section id="how-it-works" className={`${themeClasses.bgAlt} py-20 sm:py-32 transition-colors duration-300 overflow-hidden relative`}>
        <div className="absolute inset-0 overflow-hidden -z-10">
            <div className={`absolute top-1/4 left-1/4 w-72 h-72 ${isDark ? 'bg-blue-500/5' : 'bg-blue-300/10'} rounded-full blur-3xl animate-float`} />
            <div className={`absolute bottom-1/4 right-1/4 w-96 h-96 ${isDark ? 'bg-indigo-500/5' : 'bg-indigo-300/10'} rounded-full blur-3xl animate-float-delayed`} />
            {isDark && (
            <div className="absolute inset-0 opacity-[0.02]">
                <svg className="absolute inset-0 h-full w-full" aria-hidden="true">
                <defs>
                    <pattern id="grid-pattern" width="32" height="32" patternUnits="userSpaceOnUse">
                    <path d="M0 32V0h32" fill="none" stroke="rgba(255,255,255,0.3)" strokeWidth="0.5"/>
                    </pattern>
                </defs>
                <rect width="100%" height="100%" fill="url(#grid-pattern)"/>
                </svg>
            </div>
            )}
        </div>

        <div className="max-w-7xl mx-auto px-4 sm:px-6 relative z-10">
            <div className="text-center mb-20 sm:mb-24 animate-fade-in-up" style={{animationDelay: '0.1s'}}>
            <div className={`inline-flex items-center px-4 py-2 mb-6 text-sm font-semibold tracking-wider rounded-full ${isDark ? 'bg-indigo-500/10 text-indigo-400 border border-indigo-500/20' : 'bg-indigo-100 text-indigo-700 border border-indigo-200'} backdrop-blur-sm`}>
                <Target className="w-4 h-4 mr-2" />
                HOW IT WORKS
            </div>
            <h2 className={`text-4xl sm:text-5xl lg:text-6xl font-bold ${themeClasses.text} mb-6 tracking-tight leading-tight`}>
                From Upload to 
                <span className="block bg-gradient-to-r from-indigo-500 via-purple-500 to-pink-500 bg-clip-text text-transparent animate-gradient-x">
                Dream Job
                </span>
            </h2>
            <p className={`text-xl sm:text-2xl ${themeClasses.textMuted} max-w-3xl mx-auto leading-relaxed`}>
                Our AI-powered platform transforms your career story into a compelling resume that gets results
            </p>
            </div>

            <div className="relative">
            <div className="hidden lg:block absolute top-1/2 left-0 right-0 h-px -translate-y-1/2 -z-10">
                <div className={`h-full bg-gradient-to-r ${isDark ? 'from-transparent via-neutral-700/50 to-transparent' : 'from-transparent via-neutral-300/70 to-transparent'}`} />
                <div className={`absolute inset-0 bg-gradient-to-r from-blue-500/20 via-indigo-500/30 to-purple-500/20 animate-pulse-gentle`} />
            </div>
            
            <div className="hidden lg:block absolute top-1/2 left-1/3 w-2 h-2 -translate-y-1/2 -translate-x-1/2">
                <div className={`w-full h-full rounded-full ${isDark ? 'bg-blue-400' : 'bg-blue-500'} animate-ping`} />
                <div className={`absolute inset-0 w-full h-full rounded-full ${isDark ? 'bg-blue-400' : 'bg-blue-500'}`} />
            </div>
            <div className="hidden lg:block absolute top-1/2 right-1/3 w-2 h-2 -translate-y-1/2 translate-x-1/2">
                <div className={`w-full h-full rounded-full ${isDark ? 'bg-indigo-400' : 'bg-indigo-500'} animate-ping animation-delay-1000`} />
                <div className={`absolute inset-0 w-full h-full rounded-full ${isDark ? 'bg-indigo-400' : 'bg-indigo-500'}`} />
            </div>

            <div className="grid md:grid-cols-3 gap-8 lg:gap-12">
                {threeStepsData.map((item, index) => (
                <div 
                    key={index} 
                    className="group animate-fade-in-up hover:animate-none" 
                    style={{ animationDelay: `${0.2 + index * 0.15}s` }}
                >
                    <div className={cn(
                    "relative p-8 sm:p-10 rounded-3xl transition-all duration-500 ease-out",
                    "hover:-translate-y-3 hover:scale-[1.02]",
                    isDark 
                        ? "bg-gradient-to-br from-neutral-800/50 to-neutral-900/50 border border-neutral-700/50 hover:border-neutral-600/70 shadow-2xl shadow-black/20 hover:shadow-black/40" 
                        : "bg-gradient-to-br from-white to-gray-50/50 border border-gray-200/70 hover:border-gray-300 shadow-xl shadow-gray-500/10 hover:shadow-gray-500/20"
                    )}>
                    <div className="absolute inset-0 rounded-3xl opacity-0 group-hover:opacity-100 transition-opacity duration-500 bg-gradient-to-br from-blue-500/5 via-indigo-500/5 to-purple-500/5" />
                    
                    <div className="absolute -top-4 left-8">
                        <div className={cn(
                        "w-8 h-8 rounded-full flex items-center justify-center text-xs font-bold transition-all duration-300",
                        "shadow-lg group-hover:shadow-xl group-hover:scale-110",
                        isDark 
                            ? "bg-gradient-to-r from-blue-500 to-indigo-500 text-white" 
                            : "bg-gradient-to-r from-blue-600 to-indigo-600 text-white"
                        )}>
                        {item.step}
                        </div>
                    </div>

                    <div className="relative mb-8 flex justify-center">
                        <div className={cn(
                        "w-24 h-24 rounded-2xl flex items-center justify-center transition-all duration-500 ease-out",
                        "group-hover:scale-110 group-hover:rotate-3",
                        "shadow-lg group-hover:shadow-2xl",
                        isDark 
                            ? "bg-gradient-to-br from-neutral-700/50 to-neutral-800/50 border border-neutral-600/50 group-hover:border-neutral-500" 
                            : "bg-gradient-to-br from-gray-50 to-white border border-gray-200 group-hover:border-gray-300"
                        )}>
                        <div className={cn(
                            "absolute inset-0 rounded-2xl opacity-0 group-hover:opacity-100 transition-opacity duration-500",
                            "bg-gradient-to-br from-blue-500/10 via-indigo-500/10 to-purple-500/10"
                        )} />
                        
                        <item.Icon className={cn(
                            "w-12 h-12 transition-all duration-500 relative z-10",
                            "group-hover:scale-110",
                            index === 0 && (isDark ? "text-emerald-400 group-hover:text-emerald-300" : "text-emerald-500 group-hover:text-emerald-600"),
                            index === 1 && (isDark ? "text-blue-400 group-hover:text-blue-300" : "text-blue-500 group-hover:text-blue-600"),
                            index === 2 && (isDark ? "text-purple-400 group-hover:text-purple-300" : "text-purple-500 group-hover:text-purple-600")
                        )} />
                        
                        <div className={cn(
                            "absolute inset-0 rounded-2xl border-2 opacity-0 group-hover:opacity-100 transition-all duration-500",
                            "border-gradient-to-r animate-spin-slow",
                            index === 0 && "border-emerald-500/30",
                            index === 1 && "border-blue-500/30", 
                            index === 2 && "border-purple-500/30"
                        )} />
                        </div>
                    </div>

                    <div className="text-center relative z-10">
                        <h3 className={cn(
                        "text-2xl sm:text-3xl font-bold mb-4 transition-colors duration-300",
                        themeClasses.text,
                        "group-hover:bg-gradient-to-r group-hover:from-indigo-500 group-hover:to-purple-500 group-hover:bg-clip-text group-hover:text-transparent"
                        )}>
                        {item.title}
                        </h3>
                        
                        <p className={cn(
                        "text-base sm:text-lg leading-relaxed transition-colors duration-300",
                        themeClasses.textMuted,
                        isDark ? "group-hover:text-neutral-300" : "group-hover:text-neutral-600"
                        )}>
                        {item.description}
                        </p>
                    </div>

                    <div className={cn(
                        "absolute bottom-0 left-8 right-8 h-1 rounded-full transition-all duration-500",
                        "opacity-0 group-hover:opacity-100 transform translate-y-2 group-hover:translate-y-0",
                        index === 0 && "bg-gradient-to-r from-emerald-500 to-teal-500",
                        index === 1 && "bg-gradient-to-r from-blue-500 to-indigo-500",
                        index === 2 && "bg-gradient-to-r from-purple-500 to-pink-500"
                    )} />
                    </div>

                    {index < threeStepsData.length - 1 && (
                    <div className="md:hidden flex justify-center mt-8 mb-4">
                        <div className={cn(
                        "w-12 h-12 rounded-full flex items-center justify-center transition-all duration-300",
                        isDark 
                            ? "bg-neutral-800/50 border border-neutral-700/50" 
                            : "bg-white border border-gray-200 shadow-md"
                        )}>
                        <ArrowRight className={cn(
                            "w-5 h-5 transition-colors duration-300",
                            isDark ? "text-neutral-400" : "text-neutral-500"
                        )} />
                        </div>
                    </div>
                    )}
                </div>
                ))}
            </div>
            </div>

                <div className="text-center mt-20 sm:mt-24 animate-fade-in-up" style={{animationDelay: '0.8s'}}>
              {/* CORRECTED LINK COMPONENT BELOW */}
              <Link href="/sign-up" legacyBehavior passHref>
                <a 
                  className={cn(
                      "group relative inline-flex items-center justify-center px-8 py-4 rounded-xl font-semibold text-lg transition-all duration-300 overflow-hidden text-white",
                      `bg-gradient-to-r ${ctaButtonBaseGradient}`,
                      "shadow-xl hover:shadow-2xl transform hover:-translate-y-1",
                      "focus:outline-none focus:ring-4",
                      isDark ? "focus:ring-purple-500/50" : "focus:ring-purple-600/40"
                  )}
                >
                  <div className={cn(
                      "absolute inset-0 opacity-0 group-hover:opacity-100 transition-opacity duration-300",
                      `bg-gradient-to-r ${ctaAnimatedBgGradient}`
                  )} />
                  
                  <span className="relative z-10 flex items-center">
                      Start Your Success Story
                      <ArrowRight className="w-5 h-5 ml-2 group-hover:translate-x-1 transition-transform duration-300" />
                  </span>
                  
                  <div className={cn(
                      "absolute inset-0 -top-2 -bottom-2 transform -skew-x-12 -translate-x-full group-hover:translate-x-full transition-transform duration-700 ease-out z-20",
                      `bg-gradient-to-r from-transparent ${ctaShineViaColor} to-transparent`
                  )} />
                </a>
              </Link>
            
              <p className={cn(
                  "mt-4 text-sm transition-colors duration-300",
                  themeClasses.textMuted
              )}>
                  Join 150,000+ professionals who transformed their careers
              </p>
            </div>
        </div>
      </section>

      {/* ======== PROFESSIONAL FOOTER ======== */}
      <footer className={cn(themeClasses.footerBg, "border-t", themeClasses.border, "transition-colors duration-300")}>
        <div className="max-w-7xl mx-auto py-12 px-4 sm:px-6 lg:px-8">
          <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-12 gap-8 xl:gap-12">
            <div className="col-span-full lg:col-span-3 mb-6 lg:mb-0">
              <Link href="/" className="flex items-center space-x-2 mb-3">
                <div className="w-10 h-10 bg-gradient-to-br from-blue-500 to-indigo-500 rounded-xl flex items-center justify-center shadow-md">
                  <Sparkles className="w-5 h-5 text-white" />
                </div>
                <span className="text-2xl font-bold bg-gradient-to-r from-blue-500 to-indigo-500 bg-clip-text text-transparent">
                  GetHired
                </span>
              </Link>
              <p className={cn("text-sm", themeClasses.textMuted, "mt-2 max-w-xs")}>
                Build resumes that dominate ATS systems and land your dream job faster.
              </p>
            </div>

            {footerLinks.map((section, sectionIdx) => (
              <div key={section.title} className={cn(
                  "col-span-1", 
                  sectionIdx === 0 && "md:col-span-1 lg:col-span-2", // Product
                  sectionIdx === 1 && "md:col-span-1 lg:col-span-2", // Company
                  sectionIdx === 2 && "md:col-span-1 lg:col-span-2", // Resources
                  sectionIdx === 3 && "md:col-span-1 lg:col-span-2"  // Legal
                )}>
                <h3 className={cn("text-sm font-semibold tracking-wider uppercase", themeClasses.footerTextTitle)}>
                  {section.title}
                </h3>
                <ul role="list" className="mt-4 space-y-3">
                  {section.links.map((item) => (
                    <li key={item.name}>
                      <Link 
                        href={item.href} 
                        className={cn("text-sm", themeClasses.footerTextLink, "transition-colors duration-200")}
                      >
                        {item.name}
                      </Link>
                    </li>
                  ))}
                </ul>
              </div>
            ))}
          </div>

          <div className={cn("mt-10 pt-8 border-t", themeClasses.border, "md:flex md:items-center md:justify-between transition-colors duration-300")}>
            <div className="flex space-x-6 md:order-2">
              {socialMediaLinks.map((item) => (
                <a key={item.name} href={item.href} target="_blank" rel="noopener noreferrer" aria-label={item.ariaLabel}
                   className={cn(themeClasses.footerTextLink, "transition-colors duration-200")}>
                  <span className="sr-only">{item.name}</span>
                  <item.Icon className="h-5 w-5" />
                </a>
              ))}
            </div>
            <p className={cn("mt-8 text-sm md:mt-0 md:order-1", themeClasses.footerTextCopyright)}>
              © {new Date().getFullYear()} GetHired. All rights reserved.
            </p>
          </div>
        </div>
      </footer>

<style jsx>{`
  @keyframes float { 0%, 100% { transform: translateY(0px) rotate(0deg); } 33% { transform: translateY(-10px) rotate(1deg); } 66% { transform: translateY(5px) rotate(-1deg); } }
  @keyframes float-delayed { 0%, 100% { transform: translateY(0px) rotate(0deg); } 33% { transform: translateY(8px) rotate(-1deg); } 66% { transform: translateY(-12px) rotate(1deg); } }
  @keyframes pulse-gentle { 0%, 100% { opacity: 0.3; } 50% { opacity: 0.6; } }
  @keyframes spin-slow { from { transform: rotate(0deg); } to { transform: rotate(360deg); } }
  .animate-float { animation: float 8s ease-in-out infinite; }
  .animate-float-delayed { animation: float-delayed 10s ease-in-out infinite; animation-delay: 2s; }
  .animate-pulse-gentle { animation: pulse-gentle 3s ease-in-out infinite; }
  .animate-spin-slow { animation: spin-slow 4s linear infinite; }
  .animation-delay-1000 { animation-delay: 1s; }
  @keyframes gradient-shift { 0%, 100% { background-position: 0% 50%; } 50% { background-position: 100% 50%; } }
  .animate-gradient-shift { background-size: 200% 200%; animation: gradient-shift 4s ease infinite; }
  .group:hover .animate-ping { animation-duration: 0.5s; }
  @keyframes gradient-x { 0%, 100% { background-position: 0% 50%; } 50% { background-position: 100% 50%; } }
  .animate-gradient-x { background-size: 200% 200%; animation: gradient-x 3s ease infinite; }
  @keyframes fade-in-up { from { opacity: 0; transform: translateY(20px); } to { opacity: 1; transform: translateY(0); } }
  .animate-fade-in-up { animation: fade-in-up 0.6s ease-out forwards; }
`}</style>
    </div>
  );
};

export default LandingPageContent;
</file>

<file path="package.json">
{
  "name": "resume-builder-claude",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "prisma generate && next build",
    "postinstall": "prisma generate",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@clerk/nextjs": "^6.20.0",
    "@clerk/themes": "^2.2.46",
    "@google/genai": "^1.0.1",
    "@google/generative-ai": "^0.24.1",
    "@hookform/resolvers": "^5.0.1",
    "@prisma/client": "^6.8.2",
    "@radix-ui/react-slot": "^1.2.3",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "html2canvas": "^1.4.1",
    "jspdf": "^3.0.1",
    "lucide-react": "^0.511.0",
    "next": "^15.2.3",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "react-hook-form": "^7.56.4",
    "tailwind-merge": "^3.3.0",
    "tailwindcss-animate": "^1.0.7",
    "use-debounce": "^10.0.4",
    "zod": "^3.25.28",
    "zustand": "^5.0.5"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@types/node": "^20.17.50",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "@types/use-sync-external-store": "^1.5.0",
    "@types/uuid": "^10.0.0",
    "eslint": "^9",
    "eslint-config-next": "15.1.8",
    "postcss": "^8",
    "prisma": "^6.8.2",
    "tailwindcss": "^3.4.1",
    "typescript": "^5"
  }
}
</file>

<file path="components/dashboard/dashboard-content.tsx">
// components/dashboard/dashboard-content.tsx
'use client';

import React, { useState, useEffect, useCallback } from 'react';
import Link from 'next/link';
import { UserButton } from '@clerk/nextjs';
import { 
    Plus, FileText, Download, Calendar, Star, Sparkles, Sun, Moon, 
    Briefcase, BarChart3, DownloadCloud, Loader2, Trash2, Edit3, AlertTriangle 
} from 'lucide-react';
import { useTheme } from '@/context/theme-provider';
import { useResumeStore } from '@/hooks/use-resume';
import { Button } from '@/components/ui/button';
// eslint-disable-next-line @typescript-eslint/no-unused-vars
import { Card, CardHeader, CardTitle, CardDescription, CardContent, CardFooter } from '@/components/ui/card';
import { cn } from '@/lib/utils';

interface ResumeFromApi {
  id: string;
  title: string;
  atsScore: number;
  updatedAt: string;
  status: 'draft' | 'completed';
}

interface DashboardContentProps {
  userId: string;
}

const DashboardContent: React.FC<DashboardContentProps> = ({ userId }) => {
  const { theme, toggleTheme } = useTheme();
  const [resumes, setResumes] = useState<ResumeFromApi[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const resetResumeInStore = useResumeStore(state => state.resetResume);

  const isDark = theme === 'dark';

  // Theme classes derived from the current theme state
  // In a larger app, this logic might be part of a more centralized theme configuration utility
  const appTheme = {
    pageBg: isDark ? 'bg-neutral-950' : 'bg-slate-100',
    headerBg: isDark ? 'bg-neutral-900/80 backdrop-blur-md' : 'bg-white/80 backdrop-blur-md',
    textHeading: isDark ? 'text-neutral-100' : 'text-neutral-800',
    textBody: isDark ? 'text-neutral-300' : 'text-neutral-700', // Slightly softer than heading
    textMuted: isDark ? 'text-neutral-400' : 'text-neutral-500',
    textMuted2: isDark ? 'text-neutral-500' : 'text-neutral-400',
    borderPrimary: isDark ? 'border-neutral-700' : 'border-neutral-300',
    borderSecondary: isDark ? 'border-neutral-800' : 'border-neutral-200/70',
    iconColor: isDark ? 'text-neutral-400' : 'text-neutral-500',
    iconAccentColor: isDark ? 'text-blue-400' : 'text-blue-600',
    // Specific button text colors (if not covered by Button variants)
    buttonGhostText: isDark ? 'text-neutral-400 hover:text-neutral-100' : 'text-neutral-500 hover:text-neutral-900',
  };

  const fetchResumes = useCallback(async () => {
    setLoading(true);
    setError(null);
    try {
      const response = await fetch('/api/resumes');
      if (!response.ok) {
        const errorData = await response.json().catch(() => ({ message: `HTTP error! status: ${response.status}` }));
        throw new Error(errorData.message || `Failed to fetch resumes: ${response.statusText}`);
      }
      const data: ResumeFromApi[] = await response.json();
      setResumes(data);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'An unknown error occurred while fetching resumes.');
      setResumes([]);
    } finally {
      setLoading(false);
    }
  }, []);

  useEffect(() => {
    if (userId) {
        fetchResumes();
    }
  }, [userId, fetchResumes]);

  const handleCreateNewClick = () => {
    if (userId) {
      resetResumeInStore(userId);
    }
  };

  const handleDeleteResume = async (resumeId: string, resumeTitle: string) => {
    if (!confirm(`Are you sure you want to delete the resume titled "${resumeTitle}"? This action cannot be undone.`)) {
      return;
    }
    try {
      const response = await fetch(`/api/resumes/${resumeId}`, { method: 'DELETE' });
      if (!response.ok) {
        let errorMsg = `Failed to delete resume: ${response.statusText}`;
        try {
            const errorData = await response.json();
            if (errorData && errorData.message) {
                errorMsg = errorData.message;
            }
        } catch (e) { console.error("Failed to parse error response:", e); }
        throw new Error(errorMsg);
      }
      setResumes(prevResumes => prevResumes.filter(r => r.id !== resumeId));
      // TODO: Replace with a toast notification
      alert('Resume deleted successfully.'); 
    } catch (err) {
      console.error("Error deleting resume:", err);
      alert(`Error deleting resume: ${err instanceof Error ? err.message : String(err)}`);
    }
  };
  
  const getScoreColorText = (score: number) => {
    if (score >= 80) return isDark ? 'text-green-400' : 'text-green-600';
    if (score >= 60) return isDark ? 'text-yellow-400' : 'text-yellow-500';
    return isDark ? 'text-red-400' : 'text-red-500';
  };

  const getScoreBgClass = (score: number) => {
    if (score >= 80) return isDark ? 'bg-green-500/10 border-green-500/20' : 'bg-green-100 border-green-200';
    if (score >= 60) return isDark ? 'bg-yellow-500/10 border-yellow-500/20' : 'bg-yellow-100 border-yellow-200';
    return isDark ? 'bg-red-500/10 border-red-500/20' : 'bg-red-100 border-red-200';
  };

  const statIcons = [
    <Briefcase key="total" className={`w-6 h-6 ${appTheme.iconAccentColor}`} />,
    <BarChart3 key="avg" className={`w-6 h-6 ${isDark ? 'text-purple-400' : 'text-purple-500'}`} />,
    <DownloadCloud key="downloads" className={`w-6 h-6 ${isDark ? 'text-teal-400' : 'text-teal-500'}`} />
  ];

  const StatCard: React.FC<{title: string, value: string | number, change: string, icon: React.ReactNode, unit?: string}> = ({ title, value, change, icon, unit }) => (
    <Card className="p-5 sm:p-6 shadow-lg hover:shadow-xl transition-shadow duration-300"> {/* Uses themed Card */}
      <CardHeader className="p-0 mb-3 flex flex-row items-center justify-between space-y-0">
        <CardTitle className={cn("text-sm font-medium", appTheme.textMuted)}>{title}</CardTitle>
        {icon}
      </CardHeader>
      <CardContent className="p-0">
        <div className={cn("text-2xl sm:text-3xl font-bold", appTheme.textHeading)}>{value}{unit || ''}</div>
        <p className={cn(`text-xs mt-1`, change.startsWith('+') || change.includes('current') ? (isDark ? 'text-green-400' : 'text-green-600') : appTheme.textMuted2)}>
          {change}
        </p>
      </CardContent>
    </Card>
  );

  // Loading State
  if (loading) {
    return (
      <div className={cn("min-h-screen flex flex-col", appTheme.pageBg)}>
        <header className={cn("sticky top-0 z-40 border-b shadow-sm", appTheme.headerBg, appTheme.borderPrimary)}>
            <div className="max-w-full mx-auto px-4 sm:px-6 py-3.5">
                <div className="flex items-center justify-between">
                    <Link href="/dashboard" className="flex items-center space-x-2 sm:space-x-3">
                        <div className="w-8 h-8 sm:w-9 sm:h-9 bg-primary-gradient rounded-lg flex items-center justify-center shadow-md">
                            <Sparkles className="w-4 h-4 text-white" />
                        </div>
                        <span className={cn("text-lg sm:text-xl font-bold hidden sm:inline", appTheme.textHeading)}>GetHired</span>
                        <span className={cn("text-lg sm:text-xl font-normal hidden md:inline", appTheme.textMuted2)}>/ Dashboard</span>
                    </Link>
                    <div className="flex items-center space-x-2 sm:space-x-4">
                        <Button variant="ghost" size="icon" onClick={toggleTheme} aria-label="Toggle theme" className={appTheme.buttonGhostText}>
                            {isDark ? <Sun className="w-5 h-5" /> : <Moon className="w-5 h-5" />}
                        </Button>
                        <UserButton appearance={{elements: {avatarBox: "w-8 h-8 sm:w-9 sm:h-9 shadow-md", userButtonPopoverCard: `bg-card border-border shadow-xl rounded-xl`}}}/>
                    </div>
                </div>
            </div>
        </header>
        <div className="flex-grow flex items-center justify-center">
          <Loader2 className={cn("w-10 h-10 sm:w-12 sm:h-12 animate-spin", appTheme.textHeading)} />
        </div>
      </div>
    );
  }

  // Error State
  if (error) {
    return (
        <div className={cn("min-h-screen flex flex-col", appTheme.pageBg)}>
            <header className={cn("sticky top-0 z-40 border-b shadow-sm", appTheme.headerBg, appTheme.borderPrimary)}>
                 <div className="max-w-full mx-auto px-4 sm:px-6 py-3.5"> {/* Consistent Header Structure */}
                    <div className="flex items-center justify-between">
                        <Link href="/dashboard" className="flex items-center space-x-2 sm:space-x-3">
                            <div className="w-8 h-8 sm:w-9 sm:h-9 bg-primary-gradient rounded-lg flex items-center justify-center shadow-md">
                                <Sparkles className="w-4 h-4 text-white" />
                            </div>
                            <span className={cn("text-lg sm:text-xl font-bold hidden sm:inline", appTheme.textHeading)}>GetHired</span>
                             <span className={cn("text-lg sm:text-xl font-normal hidden md:inline", appTheme.textMuted2)}>/ Dashboard</span>
                        </Link>
                        <div className="flex items-center space-x-2 sm:space-x-4">
                            <Button variant="ghost" size="icon" onClick={toggleTheme} aria-label="Toggle theme" className={appTheme.buttonGhostText}>
                                {isDark ? <Sun className="w-5 h-5" /> : <Moon className="w-5 h-5" />}
                            </Button>
                            <UserButton appearance={{elements: {avatarBox: "w-8 h-8 sm:w-9 sm:h-9 shadow-md", userButtonPopoverCard: `bg-card border-border shadow-xl rounded-xl`}}}/>
                        </div>
                    </div>
                </div>
            </header>
            <div className="flex-grow flex flex-col items-center justify-center text-center px-4 py-8">
                <AlertTriangle className={cn("w-12 h-12 sm:w-16 sm:h-16 mb-4", isDark ? 'text-red-400' : 'text-red-500')} />
                <h2 className={cn("text-xl sm:text-2xl font-semibold mb-2", appTheme.textHeading)}>Oops! Something went wrong.</h2>
                <p className={cn("mb-6 text-sm sm:text-base", appTheme.textMuted)}>{error}</p>
                <Button onClick={fetchResumes} size="lg">Try Again</Button>
            </div>
        </div>
    );
  }

  // Main Dashboard Content
  return (
    <div className={cn("min-h-screen transition-colors duration-300", appTheme.pageBg)}>
      <header className={cn("sticky top-0 z-40 border-b shadow-sm", appTheme.headerBg, appTheme.borderPrimary)}>
        <div className="max-w-full mx-auto px-4 sm:px-6 py-3.5">
          <div className="flex items-center justify-between">
            <Link href="/dashboard" className="flex items-center space-x-2 sm:space-x-3">
              <div className="w-8 h-8 sm:w-9 sm:h-9 bg-primary-gradient rounded-lg flex items-center justify-center shadow-md">
                <Sparkles className="w-4 h-4 text-white" />
              </div>
              <span className={cn("text-lg sm:text-xl font-bold hidden sm:inline", appTheme.textHeading)}>GetHired</span>
               <span className={cn("text-lg sm:text-xl font-normal hidden md:inline", appTheme.textMuted2)}>/ Dashboard</span>
            </Link>
            <div className="flex items-center space-x-2 sm:space-x-4">
              <Button variant="ghost" size="icon" onClick={toggleTheme} aria-label="Toggle theme" className={appTheme.buttonGhostText}>
                {isDark ? <Sun className="w-5 h-5" /> : <Moon className="w-5 h-5" />}
              </Button>
              <UserButton 
                appearance={{
                    elements: {
                        avatarBox: "w-8 h-8 sm:w-9 sm:h-9 shadow-md", 
                        userButtonPopoverCard: `bg-card border-border shadow-xl rounded-xl`,
                        userButtonPopoverMain: 'font-sans', // Ensure font consistency
                        userButtonPopoverFooter: 'hidden', // Example: hide footer if not needed
                        userButtonPopoverActionButtonText__manageAccount: 'text-foreground',
                        userButtonPopoverActionButtonIcon__manageAccount: 'text-foreground',
                        userButtonPopoverActionButton__signOut: `${isDark ? 'text-red-400' : 'text-red-500'}`,
                        userButtonPopoverActionButtonIcon__signOut: `${isDark ? 'text-red-400' : 'text-red-500'}`,
                    }
                }}
              />
            </div>
          </div>
        </div>
      </header>

      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8 md:py-12">
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-5 sm:gap-6 mb-10 md:mb-12">
          {[
            { title: 'Total Resumes', value: resumes.length, change: `+${resumes.filter(r => new Date(r.updatedAt).getTime() > Date.now() - 30 * 24 * 60 * 60 * 1000).length} this month`, icon: statIcons[0] },
            { title: 'Avg. ATS Score', value: resumes.length > 0 ? Math.round(resumes.reduce((sum, r) => sum + r.atsScore, 0) / resumes.length) : 0, change: resumes.length > 0 ? 'Based on current' : 'N/A', icon: statIcons[1], unit: '%' },
            { title: 'Mock Downloads', value: 0, change: 'Feature in dev', icon: statIcons[2] }
          ].map((stat) => (
            <StatCard key={stat.title} {...stat} />
          ))}
        </div>

        <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between mb-8 md:mb-10">
          <div>
            <h2 className={cn("text-2xl sm:text-3xl font-bold", appTheme.textHeading)}>Your Resumes</h2>
            <p className={cn("mt-1 sm:mt-1.5 text-sm", appTheme.textMuted)}>Manage and create your AI-powered resumes.</p>
          </div>
          <Link href="/dashboard/create-resume" passHref className="mt-4 sm:mt-0 w-full sm:w-auto">
            <Button size="lg" onClick={handleCreateNewClick} className="w-full sm:w-auto shadow-lg hover:shadow-xl transform transition-all hover:-translate-y-px duration-200">
              <Plus className="w-5 h-5 mr-2" /> Create New Resume
            </Button>
          </Link>
        </div>

        {resumes.length === 0 ? (
          <Card className="text-center py-12 sm:py-16 px-6 shadow-xl">
            <CardContent className="p-0 flex flex-col items-center">
              <FileText className={cn("w-12 h-12 sm:w-16 sm:h-16 mx-auto mb-6", appTheme.iconColor)} />
              <h3 className={cn("text-xl sm:text-2xl font-semibold mb-3", appTheme.textHeading)}>No Resumes Yet</h3>
              <p className={cn("mb-8 max-w-md mx-auto text-sm sm:text-base", appTheme.textMuted)}>
                It looks like you haven&apos;t created any resumes. Let&apos;s build your first one!
              </p>
              <Link href="/dashboard/create-resume" passHref>
                <Button size="lg" onClick={handleCreateNewClick} className="shadow-lg hover:shadow-xl">
                  <Plus className="w-5 h-5 mr-2 inline-block" />Create Your First Resume
                </Button>
              </Link>
            </CardContent>
          </Card>
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-5 sm:gap-6">
            {resumes.map((resume) => (
              <Card key={resume.id} className="flex flex-col overflow-hidden shadow-lg hover:shadow-xl transition-shadow duration-300 group">
                <CardContent className="p-5 sm:p-6 flex-grow">
                  <div className="flex items-start justify-between mb-3">
                    <Link href={`/dashboard/create-resume?resumeId=${resume.id}`} className="block flex-1 min-w-0">
                        <h4 className={cn("text-base sm:text-lg font-semibold group-hover:text-primary transition-colors truncate", appTheme.textHeading)}>
                        {resume.title}
                        </h4>
                    </Link>
                    <Button 
                        variant="ghost" 
                        size="icon" 
                        onClick={() => handleDeleteResume(resume.id, resume.title)}
                        title="Delete Resume"
                        className="text-muted-foreground hover:text-destructive hover:bg-destructive/10 h-7 w-7 sm:h-8 sm:w-8 ml-2 flex-shrink-0"
                    >
                      <Trash2 className="w-3.5 h-3.5 sm:w-4 sm:h-4" />
                    </Button>
                  </div>
                  <div className="flex items-center flex-wrap gap-2 mb-4">
                    <span className={cn(`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium border`, getScoreBgClass(resume.atsScore), getScoreColorText(resume.atsScore))}>
                      <Star className="w-3 h-3 mr-1.5" /> {resume.atsScore}% ATS
                    </span>
                    <span className={cn(`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium border`, resume.status === 'completed' ? (isDark ? 'bg-green-500/10 text-green-300 border-green-500/20' : 'bg-green-100 text-green-700 border-green-200') : (isDark ? 'bg-yellow-500/10 text-yellow-300 border-yellow-500/20' : 'bg-yellow-100 text-yellow-700 border-yellow-200'))}>
                      {resume.status.charAt(0).toUpperCase() + resume.status.slice(1)}
                    </span>
                  </div>
                  <div className={cn("flex items-center text-xs space-x-1.5", appTheme.textMuted2)}>
                    <Calendar className="w-3.5 h-3.5" /> <span>Updated: {new Date(resume.updatedAt).toLocaleDateString()}</span>
                  </div>
                </CardContent>
                <CardFooter className={cn("p-4 border-t", appTheme.borderSecondary)}>
                  <div className="flex space-x-2 sm:space-x-3 w-full">
                    <Link href={`/dashboard/create-resume?resumeId=${resume.id}`} className="flex-1"> 
                      <Button variant="outline" size="sm" className="w-full">
                        <Edit3 className="w-4 h-4 mr-1.5 sm:mr-2" /> Edit
                      </Button>
                    </Link>
                    <Button variant="outline" size="sm" title="Download PDF (coming soon)" disabled className="px-3"> {/* Icon only or smaller */}
                      <Download className="w-4 h-4" />
                    </Button>
                  </div>
                </CardFooter>
              </Card>
            ))}
          </div>
        )}
      </main>
    </div>
  );
};

export default DashboardContent;
</file>

<file path="app/dashboard/create-resume/page.tsx">
// app/dashboard/create-resume/page.tsx
'use client';

import React, { useEffect, useState, Suspense, useCallback } from 'react';
import { useAuth, UserButton } from '@clerk/nextjs';
import { useRouter, useSearchParams } from 'next/navigation';
import { 
    Loader2, FileText, ArrowLeft, ArrowRight, Save, Sun, Moon, Sparkles, 
    Download as DownloadIcon, Mail, Copy 
} from 'lucide-react';
import ResumeForm from '@/components/resume/resume-form';
import AtsScoreDisplay from '@/components/resume/ats-score-display';
import ResumePreview from '@/components/resume/resume-preview';
import { Button } from '@/components/ui/button';
import { useResumeStore } from '@/hooks/use-resume';
import { useShallowResumeSelector } from '@/hooks/useShallowResumeSelector';
import { ResumeData } from '@/types/resume';
import { useTheme } from '@/context/theme-provider';
import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';
import SimpleTemplate from '@/components/resume/templates/simple-template';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { Input } from '@/components/ui/input';
import { Card, CardHeader, CardTitle, CardContent, CardFooter } from '@/components/ui/card'; // Import Card components
import { cn } from '@/lib/utils';

const resumeSections = ['Personal Info', 'Education', 'Experience', 'Skills', 'Projects', 'Review'];
const totalSteps = resumeSections.length;

// Define AppTheme directly for this component
function getAppTheme(isDark: boolean) {
  return {
    pageBg: isDark ? 'bg-neutral-950' : 'bg-slate-100', // Main app area bg
    headerBg: isDark ? 'bg-neutral-900/80 backdrop-blur-md' : 'bg-white/80 backdrop-blur-md',
    textHeading: isDark ? 'text-neutral-100' : 'text-neutral-800',
    textBody: isDark ? 'text-neutral-300' : 'text-neutral-700',
    textMuted: isDark ? 'text-neutral-400' : 'text-neutral-500',
    textPlaceholder: isDark ? 'text-neutral-500' : 'text-neutral-400',
    borderPrimary: isDark ? 'border-neutral-700' : 'border-neutral-300',
    borderSecondary: isDark ? 'border-neutral-800' : 'border-neutral-200/70',
    // Card theming will come from the Card component itself
    // Button theming will come from the Button component variants
    iconColor: isDark ? 'text-neutral-400' : 'text-neutral-500',
    buttonGhostText: isDark ? 'text-neutral-400 hover:text-neutral-100' : 'text-neutral-500 hover:text-neutral-900',
    // Progress bar specific
    progressBarBg: isDark ? 'bg-neutral-700' : 'bg-slate-200',
    // Form container specific
    formContainerBg: isDark ? 'bg-neutral-800/60 backdrop-blur-md' : 'bg-white/70 backdrop-blur-md',
    formContainerBorder: isDark ? 'border-neutral-700/70' : 'border-neutral-200/80',
  };
}


function CreateResumePageContent() {
  const { userId: clerkUserIdFromAuth, isLoaded: isAuthLoaded } = useAuth();
  const router = useRouter();
  const searchParams = useSearchParams();
  const resumeIdFromParams = searchParams.get('resumeId');
  
  const [currentStep, setCurrentStep] = useState(0);
  const { theme, toggleTheme } = useTheme();
  const isDark = theme === 'dark';
  const appTheme = getAppTheme(isDark); // Get themed classes

  const [showCoverLetterModal, setShowCoverLetterModal] = useState(false);
  const [targetJobTitle, setTargetJobTitle] = useState('');
  const [targetCompanyName, setTargetCompanyName] = useState('');
  const [specificPointsForCoverLetter, setSpecificPointsForCoverLetter] = useState('');
  const [generatedCoverLetter, setGeneratedCoverLetter] = useState('');
  const [isGeneratingCoverLetter, setIsGeneratingCoverLetter] = useState(false);
  const [isGeneratingPdf, setIsGeneratingPdf] = useState(false);
  const [showPdfPreviewForCapture, setShowPdfPreviewForCapture] = useState(false);


  const {
    id: currentResumeIdInStore,
    userId: userIdInStore,
    title,
    personalInfo,
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    education, experience, skills, projects, // ensure these are selected if needed for payload
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    atsScore,
    loadResume,
    resetResume,
    setTitle: setResumeTitle,
  } = useShallowResumeSelector();
  
  const allResumeDataForPayload = useResumeStore.getState; // To get full current state for save/API

  const [isLoadingPage, setIsLoadingPage] = useState(true);
  const [isSaving, setIsSaving] = useState(false);

  const stableLoadResume = useCallback(loadResume, []); // loadResume from store is stable
  const stableResetResume = useCallback(resetResume, []); // resetResume from store is stable

  useEffect(() => { /* ... (useEffect logic for loading/resetting resume - unchanged) ... */ 
    if (isAuthLoaded) {
      if (!clerkUserIdFromAuth) {
        router.push('/sign-in');
        return;
      }
      setIsLoadingPage(true);
      if (resumeIdFromParams) {
        // If current store matches, no need to fetch, unless userId mismatch (security)
        if (currentResumeIdInStore === resumeIdFromParams && userIdInStore === clerkUserIdFromAuth) {
          setIsLoadingPage(false);
          return;
        }
        // Fetch specific resume
        fetch(`/api/resumes/${resumeIdFromParams}`)
          .then(res => {
            if (!res.ok) {
              if (res.status === 404) throw new Error('Resume not found or you do not have permission to edit it.');
              throw new Error(`Failed to fetch resume (status: ${res.status})`);
            }
            return res.json();
          })
          .then((data: ResumeData & { id: string }) => {
            if (data.userId !== clerkUserIdFromAuth) { // Security check
              throw new Error('Access denied: This resume does not belong to you.');
            }
            stableLoadResume(data);
          })
          .catch(err => {
            console.error("Error fetching resume for edit:", err);
            alert((err as Error).message || "Failed to load resume. Starting a new one.");
            stableResetResume(clerkUserIdFromAuth); // Reset with current user ID
            router.replace('/dashboard/create-resume', { scroll: false }); // Go to clean create page
          })
          .finally(() => setIsLoadingPage(false));
      } else { // No resumeId in params, creating new or continuing unsaved
        if (!currentResumeIdInStore || userIdInStore !== clerkUserIdFromAuth) { // If store is empty, has different user's data, or new session
          stableResetResume(clerkUserIdFromAuth); // Reset with current user ID
        } else {
          // Store has data, possibly for current user, but ensure userId is correct if auth session changed
           if (userIdInStore !== clerkUserIdFromAuth) {
             useResumeStore.setState({ userId: clerkUserIdFromAuth });
           }
        }
        setIsLoadingPage(false);
      }
    }
  }, [isAuthLoaded, clerkUserIdFromAuth, resumeIdFromParams, router, stableLoadResume, stableResetResume, currentResumeIdInStore, userIdInStore]);


  useEffect(() => { // Auto-set title for new resumes
    if (personalInfo?.firstName && title === 'Untitled Resume' && !resumeIdFromParams && !currentResumeIdInStore) {
      setResumeTitle(`${personalInfo.firstName}'s Resume`);
    }
  }, [personalInfo?.firstName, title, setResumeTitle, resumeIdFromParams, currentResumeIdInStore]);

  const handleSaveResume = async () => { /* ... (save logic - unchanged, but ensure it uses allResumeDataForPayload()) ... */ 
    if (!clerkUserIdFromAuth) {
      alert("User not authenticated."); return;
    }
    setIsSaving(true);
    const currentState = allResumeDataForPayload(); // Get fresh state from store

    const payload = { // Omit fields not needed for API or derived by backend
      title: currentState.title,
      personalInfo: currentState.personalInfo,
      education: currentState.education,
      experience: currentState.experience,
      skills: currentState.skills,
      projects: currentState.projects,
      atsScore: currentState.atsScore,
    };

    try {
      const method = currentState.id ? 'PUT' : 'POST';
      const url = currentState.id ? `/api/resumes/${currentState.id}` : '/api/resumes';
      const response = await fetch(url, {
        method: method, headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(payload),
      });
      if (!response.ok) {
        const errorData = await response.json().catch(() => ({ message: "Failed to parse error response" }));
        throw new Error(errorData.message || `Failed to save resume: ${response.statusText}`);
      }
      const savedResume = await response.json() as ResumeData & { id: string };
      loadResume(savedResume); // Update store with saved data, including new ID if created
      alert('Resume saved successfully!');
      if (method === 'POST' && savedResume.id) { // If new resume was created and saved
        router.replace(`/dashboard/create-resume?resumeId=${savedResume.id}`, { scroll: false });
      }
    } catch (error) {
      console.error("Failed to save resume:", error);
      alert(`Error saving resume: ${error instanceof Error ? error.message : String(error)}`);
    } finally {
      setIsSaving(false);
    }
  };

  const handleNext = () => {
    if (currentStep < totalSteps - 1) { setCurrentStep(currentStep + 1); }
    else if (currentStep === totalSteps - 1) { handleSaveResume(); } // On "Review" step, next is save
  };
  const handleBack = () => {
    if (currentStep > 0) { setCurrentStep(currentStep - 1); }
  };

  const progressPercentage = ((currentStep + 1) / totalSteps) * 100;

  const handleDownloadPdf = async () => { /* ... (PDF download logic unchanged) ... */ 
    setIsGeneratingPdf(true);
    setShowPdfPreviewForCapture(true);
    let resumeContentElement: HTMLElement | null = null;
    try {
      await new Promise(resolve => setTimeout(resolve, 200)); 
      resumeContentElement = document.getElementById('resume-content-for-pdf');
      if (!resumeContentElement) {
        alert("Error: Resume content for PDF rendering could not be found.");
        setIsGeneratingPdf(false);
        setShowPdfPreviewForCapture(false);
        return;
      }
      const canvas = await html2canvas(resumeContentElement, { scale: 2, useCORS: true, logging: false });
      const imgData = canvas.toDataURL('image/png');
      const pdf = new jsPDF({ orientation: 'portrait', unit: 'mm', format: 'a4' });
      const pdfWidth = pdf.internal.pageSize.getWidth();
      const pdfPageHeight = pdf.internal.pageSize.getHeight();
      const imgProps = pdf.getImageProperties(imgData);
      const imgHeightInPdfUnits = (imgProps.height * pdfWidth) / imgProps.width;
      let heightLeft = imgHeightInPdfUnits;
      let position = 0;
      pdf.addImage(imgData, 'PNG', 0, position, pdfWidth, imgHeightInPdfUnits);
      heightLeft -= pdfPageHeight;
      while (heightLeft > 0) {
        position -= pdfPageHeight;
        pdf.addPage();
        pdf.addImage(imgData, 'PNG', 0, position, pdfWidth, imgHeightInPdfUnits);
        heightLeft -= pdfPageHeight;
      }
      const resumeTitleForFile = allResumeDataForPayload().title.replace(/[^a-z0-9_.-]/gi, '_').toLowerCase();
      pdf.save(`${resumeTitleForFile || 'resume'}.pdf`);
    } catch (error) {
      console.error("Error generating PDF:", error);
      alert("Failed to generate PDF. Please try again.");
    } finally {
      setIsGeneratingPdf(false);
      setShowPdfPreviewForCapture(false);
    }
  };

  const handleGenerateCoverLetter = async () => { /* ... (Cover letter generation logic - unchanged but uses allResumeDataForPayload()) ... */ 
     if (!targetJobTitle || !targetCompanyName) {
      alert("Please enter the Target Job Title and Company Name.");
      return;
    }
    setIsGeneratingCoverLetter(true);
    setGeneratedCoverLetter(''); 

    const currentResumeState = allResumeDataForPayload();
    const payload = {
      resumeData: { 
        personalInfo: currentResumeState.personalInfo,
        experience: currentResumeState.experience,
        skills: currentResumeState.skills,
      },
      jobTitle: targetJobTitle,
      companyName: targetCompanyName,
      specificPoints: specificPointsForCoverLetter,
    };

    try {
      const response = await fetch('/api/ai/generate-cover-letter', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload),
      });
      if (!response.ok) {
        const errorData = await response.json().catch(() => ({ message: "Failed to parse error" }));
        throw new Error(errorData.message || `Failed to generate cover letter: ${response.statusText}`);
      }
      const data = await response.json();
      setGeneratedCoverLetter(data.coverLetterText);
    } catch (error) {
      console.error("Cover letter generation error:", error);
      alert(`Error generating cover letter: ${error instanceof Error ? error.message : String(error)}`);
      setGeneratedCoverLetter("Failed to generate cover letter. Please try again.");
    } finally {
      setIsGeneratingCoverLetter(false);
    }
  };
  const handleCopyCoverLetter = () => { /* ... (unchanged) ... */ 
    navigator.clipboard.writeText(generatedCoverLetter)
      .then(() => alert("Cover letter copied to clipboard!"))
      .catch(() => alert("Failed to copy. Please copy manually."));
  };
  const handleDownloadCoverLetterTxt = () => { /* ... (unchanged) ... */ 
    const element = document.createElement("a");
    const file = new Blob([generatedCoverLetter], { type: 'text/plain' });
    element.href = URL.createObjectURL(file);
    const safeCompanyName = targetCompanyName.replace(/[^a-z0-9_.-]/gi, '_').toLowerCase() || "company";
    const safeJobTitle = targetJobTitle.replace(/[^a-z0-9_.-]/gi, '_').toLowerCase() || "job";
    element.download = `cover_letter_${safeCompanyName}_${safeJobTitle}.txt`;
    document.body.appendChild(element);
    element.click();
    document.body.removeChild(element);
  };

  if (!isAuthLoaded || isLoadingPage) {
    return (
      <div className={cn("min-h-screen flex items-center justify-center", appTheme.pageBg)}>
        <Loader2 className={cn("w-10 h-10 sm:w-12 sm:h-12 animate-spin", appTheme.textHeading)} />
      </div>
    );
  }

  return (
    <div className={cn("min-h-screen flex flex-col", appTheme.pageBg, "transition-colors duration-300")}>
      <header className={cn("sticky top-0 z-30 border-b shadow-sm", appTheme.headerBg, appTheme.borderPrimary)}>
        <div className="max-w-full mx-auto px-4 sm:px-6 py-2.5 sm:py-3">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-2 sm:space-x-3">
              <Button variant="ghost" size="icon" onClick={() => router.push('/dashboard')} className={appTheme.buttonGhostText}>
                <ArrowLeft className="w-5 h-5" />
              </Button>
              <div className="flex items-center space-x-2">
                <div className="w-7 h-7 sm:w-8 sm:h-8 bg-primary-gradient rounded-md sm:rounded-lg flex items-center justify-center shadow">
                  <FileText className="w-3.5 h-3.5 sm:w-4 sm:h-4 text-white" />
                </div>
                <span className={cn("text-base sm:text-lg font-semibold truncate max-w-[150px] xs:max-w-[200px] sm:max-w-xs md:max-w-sm", appTheme.textHeading)} title={title}>
                  {title || "Loading title..."}
                </span>
              </div>
            </div>

            <div className="flex-grow px-2 sm:px-4 lg:px-8 hidden md:block">
              <div className="max-w-md lg:max-w-lg mx-auto">
                <div className={cn("relative h-2 w-full overflow-hidden rounded-full mb-1", appTheme.progressBarBg)}>
                  <div
                    className="h-full bg-primary-gradient transition-transform duration-300 ease-out"
                    style={{ width: `${progressPercentage}%` }} // Use width for progress bar
                  />
                </div>
                <p className={cn("text-xs text-center", appTheme.textMuted)}>
                  Step {currentStep + 1} of {totalSteps}: {resumeSections[currentStep]}
                </p>
              </div>
            </div>

            <div className="flex items-center space-x-2 sm:space-x-3">
              <Button variant="ghost" size="icon" onClick={toggleTheme} aria-label="Toggle theme" className={appTheme.buttonGhostText}>
                {isDark ? <Sun className="w-4 h-4 sm:w-5 sm:h-5" /> : <Moon className="w-4 h-4 sm:w-5 sm:h-5" />}
              </Button>
              <Button variant="outline" size="sm" onClick={handleSaveResume} disabled={isSaving} className="hidden sm:inline-flex">
                {isSaving ? <Loader2 className="w-4 h-4 mr-2 animate-spin" /> : <Save className="w-4 h-4 mr-2" />}
                {currentResumeIdInStore ? 'Save' : 'Save Draft'}
              </Button>
              <Button variant="outline" size="sm" onClick={handleDownloadPdf} disabled={isGeneratingPdf || isSaving} className="hidden sm:inline-flex">
                {isGeneratingPdf ? <Loader2 className="w-4 h-4 mr-2 animate-spin" /> : <DownloadIcon className="w-4 h-4 mr-2" />}
                PDF
              </Button>
              <Button variant="outline" size="sm" onClick={() => setShowCoverLetterModal(true)} disabled={isSaving || isGeneratingPdf || !currentResumeIdInStore} className="hidden lg:inline-flex">
                <Mail className="w-4 h-4 mr-2" /> Cover Letter
              </Button>
              <UserButton 
                appearance={{
                    elements: {
                        avatarBox: "w-8 h-8 sm:w-9 sm:h-9 shadow-md", 
                        userButtonPopoverCard: `bg-card border-border shadow-xl rounded-xl`
                    }
                }}
              />
            </div>
          </div>
           {/* Progress Bar for Mobile - visible only on md and below */}
           <div className="md:hidden mt-2.5">
                <div className={cn("relative h-1.5 w-full overflow-hidden rounded-full", appTheme.progressBarBg)}>
                  <div
                    className="h-full bg-primary-gradient transition-transform duration-300 ease-out"
                    style={{ width: `${progressPercentage}%` }}
                  />
                </div>
                <p className={cn("text-xs text-center mt-1", appTheme.textMuted)}>
                  {currentStep + 1}/{totalSteps}: {resumeSections[currentStep]}
                </p>
            </div>
        </div>
      </header>

      <main className="flex-grow container mx-auto py-6 sm:py-8 px-4 grid grid-cols-1 lg:grid-cols-3 gap-6 sm:gap-8 items-start">
        <div className={cn(
            "lg:col-span-2 rounded-xl sm:rounded-2xl p-5 sm:p-6 md:p-8 shadow-xl border", 
            appTheme.formContainerBg, 
            appTheme.formContainerBorder
        )}>
          <ResumeForm currentStep={currentStep} /> {/* This will render SimpleTemplate when currentStep is Review */}
          {/* Navigation Buttons for the form */}
          {currentStep < totalSteps -1 && ( // Hide Next/Back buttons on the Review step if SimpleTemplate is full page
             <div className={cn("mt-8 pt-6 border-t flex justify-between items-center", appTheme.borderSecondary)}>
                <Button variant="outline" onClick={handleBack} disabled={currentStep === 0}>
                <ArrowLeft className="w-4 h-4 mr-2" /> Back
                </Button>
                <div className={cn("flex items-center space-x-1 text-sm", appTheme.textMuted)}>
                <span>{currentStep + 1}</span><span>/</span><span>{totalSteps}</span>
                </div>
                <Button onClick={handleNext} disabled={isSaving}>
                {currentStep === totalSteps - 2 ? 'Review & Finish' : 'Next Step'} {/* Adjusted text for last step before review */}
                <ArrowRight className="w-4 h-4 ml-2" />
                </Button>
            </div>
          )}
           {currentStep === totalSteps - 1 && ( // Special action for "Review" step's button (which is now in header)
             <div className={cn("mt-8 pt-6 border-t text-center", appTheme.borderSecondary)}>
                <p className={cn("text-sm", appTheme.textMuted)}>
                    You are viewing the final resume preview. Use the header buttons to save or download.
                </p>
             </div>
           )}
        </div>

        <div className="lg:col-span-1 space-y-6 sm:space-y-8 sticky top-[calc(var(--header-height,60px)+1.5rem)]"> {/* Adjust var(--header-height) */}
          <AtsScoreDisplay />
          <ResumePreview />
           {/* Mobile Save/PDF/Cover Letter Actions */}
           <div className="sm:hidden space-y-3">
            <Button variant="outline" size="default" onClick={handleSaveResume} disabled={isSaving} className="w-full">
                {isSaving ? <Loader2 className="w-4 h-4 mr-2 animate-spin" /> : <Save className="w-4 h-4 mr-2" />}
                {currentResumeIdInStore ? 'Save Changes' : 'Save Draft'}
            </Button>
            <Button variant="outline" size="default" onClick={handleDownloadPdf} disabled={isGeneratingPdf || isSaving} className="w-full">
                {isGeneratingPdf ? <Loader2 className="w-4 h-4 mr-2 animate-spin" /> : <DownloadIcon className="w-4 h-4 mr-2" />}
                Download PDF
            </Button>
             <Button variant="outline" size="default" onClick={() => setShowCoverLetterModal(true)} disabled={isSaving || isGeneratingPdf || !currentResumeIdInStore} className="w-full">
                <Mail className="w-4 h-4 mr-2" /> Generate Cover Letter
            </Button>
          </div>
        </div>
        
        {showPdfPreviewForCapture && (
          <div style={{ position: 'absolute', left: '-9999px', top: 'auto', width: '210mm', backgroundColor: '#fff' }}>
            <SimpleTemplate resumeData={allResumeDataForPayload()} />
          </div>
        )}

        {showCoverLetterModal && (
          <div className="fixed inset-0 bg-black/70 flex items-center justify-center z-[100] p-4 animate-fade-in-up">
              <Card className="w-full max-w-xl lg:max-w-2xl max-h-[90vh] flex flex-col"> {/* Use Themed Card */}
                  <CardHeader className="border-b"> {/* Use Themed CardHeader */}
                      <div className="flex justify-between items-center">
                          <CardTitle className={cn("text-lg sm:text-xl", appTheme.textHeading)}>Generate Cover Letter</CardTitle>
                          <Button variant="ghost" size="icon" onClick={() => setShowCoverLetterModal(false)} className={appTheme.buttonGhostText}>
                              <span className="text-2xl leading-none">×</span>
                          </Button>
                      </div>
                  </CardHeader>
                  <CardContent className="p-5 sm:p-6 space-y-4 overflow-y-auto styled-scrollbar flex-grow">
                      <div>
                          <Label htmlFor="targetJobTitle" className={cn("mb-1.5", appTheme.textBody)}>Target Job Title*</Label>
                          <Input id="targetJobTitle" value={targetJobTitle} onChange={(e) => setTargetJobTitle(e.target.value)} placeholder="e.g., Senior Software Engineer" />
                      </div>
                      <div>
                          <Label htmlFor="targetCompanyName" className={cn("mb-1.5", appTheme.textBody)}>Target Company Name*</Label>
                          <Input id="targetCompanyName" value={targetCompanyName} onChange={(e) => setTargetCompanyName(e.target.value)} placeholder="e.g., Google" />
                      </div>
                      <div>
                          <Label htmlFor="specificPointsForCoverLetter" className={cn("mb-1.5", appTheme.textBody)}>Key Points to Emphasize (Optional)</Label>
                          <Textarea id="specificPointsForCoverLetter" value={specificPointsForCoverLetter} onChange={(e) => setSpecificPointsForCoverLetter(e.target.value)} placeholder="e.g., My experience with project X, my passion for Y" rows={3} />
                      </div>
                      {generatedCoverLetter && (
                          <div className="mt-4 pt-4 border-t"> {/* Themed Divider */}
                              <h4 className={cn("text-base sm:text-md font-semibold mb-2", appTheme.textHeading)}>Generated Cover Letter:</h4>
                              <Textarea value={generatedCoverLetter} readOnly rows={8} className="text-xs leading-relaxed whitespace-pre-wrap w-full styled-scrollbar bg-muted/50" />
                          </div>
                      )}
                  </CardContent>
                  <CardFooter className={cn("border-t p-5 sm:p-6 flex flex-col sm:flex-row items-center gap-3", appTheme.borderSecondary)}>
                        <Button
                            onClick={handleGenerateCoverLetter}
                            disabled={isGeneratingCoverLetter || !targetJobTitle || !targetCompanyName}
                            className="w-full sm:w-auto sm:flex-1 py-2.5"
                            size="lg"
                        >
                            {isGeneratingCoverLetter ? <Loader2 className="w-5 h-5 animate-spin mr-2" /> : <Sparkles className="w-5 h-5 mr-2" />}
                            Generate with AI
                        </Button>
                        {generatedCoverLetter && (
                             <div className="flex w-full sm:w-auto space-x-2">
                                <Button variant="outline" size="default" onClick={handleCopyCoverLetter} className="flex-1 sm:flex-initial">
                                    <Copy size={16} className="mr-1.5"/> Copy
                                </Button>
                                <Button variant="outline" size="default" onClick={handleDownloadCoverLetterTxt} className="flex-1 sm:flex-initial">
                                    <DownloadIcon size={16} className="mr-1.5"/> .txt
                                </Button>
                             </div>
                        )}
                  </CardFooter>
              </Card>
          </div>
        )}
      </main>
    </div>
  );
}

export default function CreateResumePage() {
  return (
    <Suspense fallback={
      <div className="min-h-screen flex items-center justify-center bg-slate-100 dark:bg-neutral-950">
        <Loader2 className="w-12 h-12 text-neutral-700 dark:text-neutral-300 animate-spin" />
      </div>
    }>
      <CreateResumePageContent />
    </Suspense>
  );
}
</file>

</files>
