This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
.gitignore
app/(auth)/sign-in/[[...sign-in]]/page.tsx
app/(auth)/sign-up/[[...sign-up]]/page.tsx
app/api/ai/ats-score/route.ts
app/api/ai/enhance-experience/route.ts
app/api/ai/enhance-project/route.ts
app/api/ai/enhance-summary/route.ts
app/api/ai/generate-cover-letter/route.ts
app/api/resumes/[resumeId]/route.ts
app/api/resumes/route.ts
app/dashboard/create-resume/page.tsx
app/dashboard/page.tsx
app/globals.css
app/layout.tsx
app/page.tsx
components/dashboard/dashboard-content.tsx
components/landing/landing-page.tsx
components/landing/sliding-company.tsx
components/resume/ats-score-display.tsx
components/resume/resume-form.tsx
components/resume/resume-preview.tsx
components/resume/sections/education.tsx
components/resume/sections/experience.tsx
components/resume/sections/personal-info.tsx
components/resume/sections/projects.tsx
components/resume/sections/skills.tsx
components/resume/templates/simple-template.tsx
components/ui/button.tsx
components/ui/card.tsx
components/ui/input.tsx
components/ui/label.tsx
components/ui/progress.tsx
components/ui/select.tsx
components/ui/textarea.tsx
context/theme-provider.tsx
eslint.config.mjs
hooks/use-resume.ts
hooks/useShallowResumeSelector.ts
lib/ai/ats-scorer.ts
lib/ai/cover-letter-generator.ts
lib/ai/experience-enhancer.ts
lib/ai/gemini.ts
lib/ai/project-enhancer.ts
lib/ai/summary-enhancer.ts
lib/db.ts
lib/utils.ts
middleware.ts
next.config.ts
package.json
postcss.config.mjs
prisma/migrations/20250524181712_init_resume_models/migration.sql
prisma/migrations/20250525094131_modified_experience_entry/migration.sql
prisma/migrations/migration_lock.toml
prisma/schema.prisma
public/file.svg
public/globe.svg
public/next.svg
public/vercel.svg
public/window.svg
README.md
tailwind.config.ts
tsconfig.json
types/resume.ts
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="components/landing/sliding-company.tsx">
import React from 'react';

const SlidingCompanies = () => {
  // Mock theme classes for demonstration
  const themeClasses = {
    bgAlt: 'bg-gray-50',
    border: 'border-gray-200',
    textMuted: 'text-gray-600',
    text: 'text-gray-900'
  };

  const companies = ['Google', 'Microsoft', 'Apple', 'Amazon', 'Netflix', 'Meta'];
  
  return (
    <section className={`${themeClasses.bgAlt} py-12 border-y ${themeClasses.border} overflow-hidden`}>
      <div className="max-w-7xl mx-auto px-4 sm:px-6">
        <p className={`text-center ${themeClasses.textMuted} mb-8 text-sm font-medium`}>
          Trusted by professionals at leading companies
        </p>
        
        <div className="relative">
          <div className="flex animate-slide">
            {/* First set of companies */}
            {companies.map((company, index) => (
              <div 
                key={`first-${index}`} 
                className={`flex-shrink-0 mx-8 sm:mx-12 text-lg sm:text-xl font-bold ${themeClasses.text} hover:opacity-100 transition-opacity cursor-default opacity-60`}
              >
                {company}
              </div>
            ))}
            {/* Duplicate set for seamless loop */}
            {companies.map((company, index) => (
              <div 
                key={`second-${index}`} 
                className={`flex-shrink-0 mx-8 sm:mx-12 text-lg sm:text-xl font-bold ${themeClasses.text} hover:opacity-100 transition-opacity cursor-default opacity-60`}
              >
                {company}
              </div>
            ))}
          </div>
        </div>
      </div>
      
      <style jsx>{`
        @keyframes slide {
          0% {
            transform: translateX(0);
          }
          100% {
            transform: translateX(-50%);
          }
        }
        
        .animate-slide {
          animation: slide 20s linear infinite;
        }
        
        .animate-slide:hover {
          animation-play-state: paused;
        }
      `}</style>
    </section>
  );
};

export default SlidingCompanies;
</file>

<file path="app/api/ai/ats-score/route.ts">
// app/api/ai/ats-score/route.ts
import { NextResponse } from 'next/server';
import { auth } from '@clerk/nextjs/server';
import { getAtsScoreAndSuggestions } from '@/lib/ai/ats-scorer';
import { ResumeData } from '@/types/resume';

export async function POST(request: Request) {
  try {
    const { userId } = await auth();
    if (!userId) {
      return new NextResponse('Unauthorized', { status: 401 });
    }

    const resumeData = await request.json() as Partial<ResumeData>;
    if (!resumeData || Object.keys(resumeData).length === 0) {
      return new NextResponse('Resume data is required', { status: 400 });
    }
    
    // console.log("Received resume data for ATS scoring:", JSON.stringify(resumeData, null, 2));


    const atsDetails = await getAtsScoreAndSuggestions(resumeData);
    return NextResponse.json(atsDetails);

  } catch (error) {
    console.error('[API_ATS_SCORE_ERROR]', error);
    return new NextResponse('Internal Server Error while calculating ATS score', { status: 500 });
  }
}
</file>

<file path="app/api/ai/enhance-project/route.ts">
// app/api/ai/enhance-project/route.ts
import { NextResponse } from 'next/server';
import { auth } from '@clerk/nextjs/server';
import { enhanceProjectDescription } from '@/lib/ai/project-enhancer';

export async function POST(request: Request) {
  try {
    const { userId } = await auth();
    if (!userId) return new NextResponse('Unauthorized', { status: 401 });

    const body = await request.json();
    const { projectName, currentDescription, technologies, resumeTitle } = body;

    if (!projectName || !currentDescription) {
      return new NextResponse('Project name and description are required', { status: 400 });
    }

    const enhancedData = await enhanceProjectDescription({ projectName, currentDescription, technologies, resumeTitle });
    return NextResponse.json(enhancedData);
  } catch (error) {
    console.error('[API_ENHANCE_PROJECT_ERROR]', error);
    return new NextResponse('Internal Server Error while enhancing project', { status: 500 });
  }
}
</file>

<file path="app/api/ai/enhance-summary/route.ts">
// app/api/ai/enhance-summary/route.ts
import { NextResponse } from 'next/server';
import { auth } from '@clerk/nextjs/server';
import { enhanceSummary } from '@/lib/ai/summary-enhancer';

export async function POST(request: Request) {
  try {
    const { userId } = await auth();
    if (!userId) {
      return new NextResponse('Unauthorized', { status: 401 });
    }

    const body = await request.json();
    const { currentSummary, resumeTitle } = body;

    if (!currentSummary) {
      return new NextResponse('Current summary is required', { status: 400 });
    }

    const enhancedData = await enhanceSummary({ currentSummary, resumeTitle });
    return NextResponse.json(enhancedData);

  } catch (error) {
    console.error('[API_ENHANCE_SUMMARY_ERROR]', error);
    return new NextResponse('Internal Server Error while enhancing summary', { status: 500 });
  }
}
</file>

<file path="app/api/ai/generate-cover-letter/route.ts">
// app/api/ai/generate-cover-letter/route.ts
import { NextResponse } from 'next/server';
import { auth } from '@clerk/nextjs/server';
import { generateCoverLetter } from '@/lib/ai/cover-letter-generator';
import { ResumeData } from '@/types/resume';

export async function POST(request: Request) {
  try {
    const { userId } = await auth();
    if (!userId) {
      return new NextResponse('Unauthorized', { status: 401 });
    }

    const body = await request.json();
    const { resumeData, jobTitle, companyName, specificPoints, tone } = body as {
        resumeData: Partial<ResumeData>;
        jobTitle: string;
        companyName: string;
        specificPoints?: string;
        tone?: 'formal' | 'semi-formal' | 'enthusiastic';
    };

    if (!resumeData || !jobTitle || !companyName) {
      return new NextResponse('Missing required fields (resumeData, jobTitle, companyName)', { status: 400 });
    }
     if (!resumeData.personalInfo || !resumeData.personalInfo.firstName) {
       return new NextResponse('Resume data must include at least personal information with a first name.', { status: 400 });
     }


    const coverLetterOutput = await generateCoverLetter({
        resumeData,
        jobTitle,
        companyName,
        specificPoints,
        tone
    });
    return NextResponse.json(coverLetterOutput);

  } catch (error) {
    console.error('[API_GENERATE_COVER_LETTER_ERROR]', error);
    return new NextResponse('Internal Server Error while generating cover letter', { status: 500 });
  }
}
</file>

<file path="app/dashboard/page.tsx">
// app/dashboard/page.tsx
import { auth } from '@clerk/nextjs/server';
import { redirect } from 'next/navigation';
import DashboardContent from "@/components/dashboard/dashboard-content"

export default async function Dashboard() {
  const { userId } = await auth();

  if (!userId) {
    redirect('/sign-in');
  }

  return <DashboardContent userId={userId} />;
}
</file>

<file path="app/page.tsx">
import LandingPage from '@/components/landing/landing-page'

export default function Home() {
  return <LandingPage />
}
</file>

<file path="components/resume/resume-form.tsx">
// components/resume/resume-form.tsx
import React from 'react';
import PersonalInfoSection from './sections/personal-info';
import EducationSection from './sections/education';
import ExperienceSection from './sections/experience';
import SkillsSection from './sections/skills';
import ProjectsSection from './sections/projects';
// Import ReviewSection when it's created
// import ReviewSection from './sections/review';

interface ResumeFormProps {
  currentStep: number;
}

const ResumeForm: React.FC<ResumeFormProps> = ({ currentStep }) => {
  return (
    <div>
      {currentStep === 0 && <PersonalInfoSection />}
      {currentStep === 1 && <EducationSection />}
      {currentStep === 2 && <ExperienceSection />}
      {currentStep === 3 && <SkillsSection />}
      {currentStep === 4 && <ProjectsSection />}
      {/* {currentStep === 5 && <ReviewSection />} */}
      {currentStep === 5 && ( // Placeholder for Review step
        <div className="text-center py-10">
            <h2 className="text-2xl font-semibold mb-4 text-white">Review Your Resume</h2>
            <p className="text-gray-300">
              This is where you&apos;ll see a complete preview of your resume.
            </p>
            <p className="text-gray-300 mt-2">
              You can make final AI-powered adjustments and then proceed to download.
            </p>
            {/* Add a more detailed preview component here later */}
        </div>
      )}
    </div>
  );
};

export default ResumeForm;
</file>

<file path="components/resume/sections/education.tsx">
/* eslint-disable @typescript-eslint/no-unused-vars */
// components/resume/sections/education.tsx
'use client';
import React, { useEffect } from 'react';
import { useForm, useFieldArray, Controller, SubmitHandler } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import * as z from 'zod';
import { useResumeStore } from '@/hooks/use-resume';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { Button } from '@/components/ui/button';
import { EducationEntry } from '@/types/resume';
import { PlusCircle, Trash2, CalendarDays } from 'lucide-react';

const educationEntrySchema = z.object({
  id: z.string(),
  institution: z.string().min(1, "Institution name is required"),
  degree: z.string().min(1, "Degree is required"),
  field: z.string().min(1, "Field of study is required"),
  startDate: z.string().min(4, "Start date is required (e.g., YYYY or YYYY-MM)"),
  endDate: z.string().min(4, "End date is required (e.g., YYYY, YYYY-MM or Present)"),
  gpa: z.string().optional(),
  achievements: z.string().optional(), // Storing as single string, can be split later
});

const educationSchema = z.object({
  education: z.array(educationEntrySchema),
});

type EducationFormData = z.infer<typeof educationSchema>;

const EducationSection: React.FC = () => {
  const { education, updateEducation: updateStoreEducation, addEducation: addStoreEducation, removeEducation: removeStoreEducation } = useResumeStore();

  const { control, register, handleSubmit, watch, formState: { errors } } = useForm<EducationFormData>({
    resolver: zodResolver(educationSchema),
    defaultValues: { education: education.map(edu => ({ ...edu, achievements: edu.achievements?.join('\n') })) }, // Join achievements for textarea
  });

  const { fields, append, remove } = useFieldArray({
    control,
    name: "education",
  });

  // Sync with Zustand store
  useEffect(() => {
    const subscription = watch((value) => {
      if (value.education) {
        value.education.forEach((eduData, index) => {
          if (eduData) {
            // Convert achievements string back to array for store if necessary, or handle in store
            const achievementsArray = eduData.achievements?.split('\n').filter(ach => ach.trim() !== '');
            updateStoreEducation(index, { ...eduData, achievements: achievementsArray });
          }
        });
      }
    });
    return () => subscription.unsubscribe();
  }, [watch, updateStoreEducation]);

  const handleAddEducation = () => {
    addStoreEducation(); // Add to store first
    append({ 
      id: `temp-${Date.now()}`, // Generate a temporary ID
      institution: '', 
      degree: '', 
      field: '', 
      startDate: '', 
      endDate: '', 
      gpa: '', 
      achievements: '' 
    });
  };

  const handleRemoveEducation = (index: number) => {
    const eduIdToRemove = fields[index].id; // Get the actual ID of the item
    removeStoreEducation(eduIdToRemove); // Remove from Zustand store by ID
    remove(index); // Remove from RHF field array
  };


  return (
    <form className="space-y-8">
      <div className="flex justify-between items-center border-b border-white/10 pb-3 mb-6">
        <h2 className="text-2xl font-semibold text-white">Education</h2>
        <Button type="button" variant="outline" size="sm" onClick={handleAddEducation} className="text-white border-white/20 hover:bg-white/10">
          <PlusCircle className="w-4 h-4 mr-2" />
          Add Education
        </Button>
      </div>

      {fields.map((item, index) => (
        <div key={item.id} className="p-6 bg-slate-800/50 border border-slate-700 rounded-lg space-y-6 relative">
          <Button
            type="button"
            variant="ghost"
            size="icon"
            onClick={() => handleRemoveEducation(index)}
            className="absolute top-3 right-3 text-red-400 hover:text-red-300 hover:bg-red-500/20"
          >
            <Trash2 className="w-4 h-4" />
          </Button>
          
          <input type="hidden" {...register(`education.${index}.id`)} />

          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <Label htmlFor={`education.${index}.institution`}>Institution Name</Label>
              <Input id={`education.${index}.institution`} {...register(`education.${index}.institution`)} placeholder="e.g., University of Example" />
              {errors.education?.[index]?.institution && <p className="text-red-400 text-xs mt-1">{errors.education[index]?.institution?.message}</p>}
            </div>
            <div>
              <Label htmlFor={`education.${index}.degree`}>Degree</Label>
              <Input id={`education.${index}.degree`} {...register(`education.${index}.degree`)} placeholder="e.g., Bachelor of Science" />
              {errors.education?.[index]?.degree && <p className="text-red-400 text-xs mt-1">{errors.education[index]?.degree?.message}</p>}
            </div>
          </div>

          <div>
            <Label htmlFor={`education.${index}.field`}>Field of Study / Major</Label>
            <Input id={`education.${index}.field`} {...register(`education.${index}.field`)} placeholder="e.g., Computer Science" />
            {errors.education?.[index]?.field && <p className="text-red-400 text-xs mt-1">{errors.education[index]?.field?.message}</p>}
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <Label htmlFor={`education.${index}.startDate`}>Start Date</Label>
              <div className="relative">
                <Input id={`education.${index}.startDate`} {...register(`education.${index}.startDate`)} placeholder="YYYY or YYYY-MM" />
                <CalendarDays className="absolute right-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" />
              </div>
              {errors.education?.[index]?.startDate && <p className="text-red-400 text-xs mt-1">{errors.education[index]?.startDate?.message}</p>}
            </div>
            <div>
              <Label htmlFor={`education.${index}.endDate`}>End Date (or &quot;Present&quot;)</Label>
              <div className="relative">
                <Input id={`education.${index}.endDate`} {...register(`education.${index}.endDate`)} placeholder="YYYY, YYYY-MM or Present" />
                <CalendarDays className="absolute right-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" />
              </div>
              {errors.education?.[index]?.endDate && <p className="text-red-400 text-xs mt-1">{errors.education[index]?.endDate?.message}</p>}
            </div>
          </div>

          <div>
            <Label htmlFor={`education.${index}.gpa`}>GPA (Optional)</Label>
            <Input id={`education.${index}.gpa`} {...register(`education.${index}.gpa`)} placeholder="e.g., 3.8/4.0" />
          </div>

          <div>
            <Label htmlFor={`education.${index}.achievements`}>Key Achievements/Coursework (Optional - one per line)</Label>
            <Textarea
              id={`education.${index}.achievements`}
              {...register(`education.${index}.achievements`)}
              rows={3}
              placeholder="e.g., Dean's List, Relevant projects, Thesis title"
            />
            <p className="text-xs text-gray-400 mt-1">List key accomplishments or relevant coursework. Each on a new line.</p>
          </div>
        </div>
      ))}
      {fields.length === 0 && (
        <p className="text-center text-gray-400 py-4">No education entries added yet. Click &quot;Add Education&quot; to start.</p>
      )}
    </form>
  );
};

export default EducationSection;
</file>

<file path="components/resume/sections/skills.tsx">
// components/resume/sections/skills.tsx
'use client';
import React, { useEffect } from 'react';
import { useForm, useFieldArray, Controller } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import * as z from 'zod';
import { useResumeStore } from '@/hooks/use-resume';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Button } from '@/components/ui/button';
import { Select } from '@/components/ui/select'; // Using our new Select component
// eslint-disable-next-line @typescript-eslint/no-unused-vars
import { SkillEntry } from '@/types/resume';
import { PlusCircle, Trash2, Lightbulb } from 'lucide-react';

const skillLevels = ['Beginner', 'Intermediate', 'Advanced', 'Expert'] as const;
const skillCategories = ['Technical', 'Soft', 'Language', 'Other'] as const;

const skillEntrySchema = z.object({
  id: z.string(),
  name: z.string().min(1, "Skill name is required"),
  level: z.enum(skillLevels),
  category: z.enum(skillCategories),
});

const skillsSchema = z.object({
  skills: z.array(skillEntrySchema),
});

type SkillsFormData = z.infer<typeof skillsSchema>;

const SkillsSection: React.FC = () => {
  const { skills, updateSkill: updateStoreSkill, addSkill: addStoreSkill, removeSkill: removeStoreSkill } = useResumeStore();

  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  const { control, register, handleSubmit, watch, formState: { errors } } = useForm<SkillsFormData>({
    resolver: zodResolver(skillsSchema),
    defaultValues: { skills },
  });

  const { fields, append, remove } = useFieldArray({
    control,
    name: "skills",
  });

  useEffect(() => {
    const subscription = watch((value) => {
      if (value.skills) {
        value.skills.forEach((skillData, index) => {
          if (skillData) {
            updateStoreSkill(index, skillData);
          }
        });
      }
    });
    return () => subscription.unsubscribe();
  }, [watch, updateStoreSkill]);

  const handleAddSkill = () => {
    addStoreSkill();
    append({ 
      id: `temp-${Date.now()}`, 
      name: '', 
      level: 'Intermediate', 
      category: 'Technical' 
    });
  };
  
  const handleRemoveSkill = (index: number) => {
    const skillIdToRemove = fields[index].id;
    removeStoreSkill(skillIdToRemove);
    remove(index);
  };

  return (
    <form className="space-y-6">
      <div className="flex justify-between items-center border-b border-white/10 pb-3 mb-6">
        <h2 className="text-2xl font-semibold text-white">Skills</h2>
        <Button type="button" variant="outline" size="sm" onClick={handleAddSkill} className="text-white border-white/20 hover:bg-white/10">
          <PlusCircle className="w-4 h-4 mr-2" />
          Add Skill
        </Button>
      </div>
      
      <div className="bg-slate-800/30 p-4 rounded-lg border border-slate-700">
        <div className="flex items-start space-x-2">
          <Lightbulb className="w-5 h-5 text-yellow-400 mt-0.5 shrink-0" />
          <p className="text-sm text-gray-300">
            List both technical (e.g., Python, React, AWS) and soft skills (e.g., Communication, Teamwork). 
            Tailor these to the jobs you&apos;re applying for.
          </p>
        </div>
      </div>

      {fields.length > 0 && (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {fields.map((item, index) => (
            <div key={item.id} className="p-4 bg-slate-800/50 border border-slate-700 rounded-lg space-y-4 relative">
                <Button
                    type="button"
                    variant="ghost"
                    size="icon"
                    onClick={() => handleRemoveSkill(index)}
                    className="absolute top-2 right-2 text-red-400 hover:text-red-300 hover:bg-red-500/10 w-7 h-7"
                >
                    <Trash2 className="w-3.5 h-3.5" />
                </Button>

                <input type="hidden" {...register(`skills.${index}.id`)} />
                
                <div>
                    <Label htmlFor={`skills.${index}.name`}>Skill Name</Label>
                    <Input id={`skills.${index}.name`} {...register(`skills.${index}.name`)} placeholder="e.g., JavaScript" />
                    {errors.skills?.[index]?.name && <p className="text-red-400 text-xs mt-1">{errors.skills[index]?.name?.message}</p>}
                </div>

                <div>
                    <Label htmlFor={`skills.${index}.level`}>Proficiency Level</Label>
                    <Controller
                        name={`skills.${index}.level`}
                        control={control}
                        render={({ field }) => (
                            <Select id={`skills.${index}.level`} {...field}>
                                {skillLevels.map(level => <option key={level} value={level}>{level}</option>)}
                            </Select>
                        )}
                    />
                    {errors.skills?.[index]?.level && <p className="text-red-400 text-xs mt-1">{errors.skills[index]?.level?.message}</p>}
                </div>
                
                <div>
                    <Label htmlFor={`skills.${index}.category`}>Category</Label>
                     <Controller
                        name={`skills.${index}.category`}
                        control={control}
                        render={({ field }) => (
                            <Select id={`skills.${index}.category`} {...field}>
                                {skillCategories.map(cat => <option key={cat} value={cat}>{cat}</option>)}
                            </Select>
                        )}
                    />
                    {errors.skills?.[index]?.category && <p className="text-red-400 text-xs mt-1">{errors.skills[index]?.category?.message}</p>}
                </div>
            </div>
            ))}
        </div>
      )}

      {fields.length === 0 && (
        <p className="text-center text-gray-400 py-4">No skills added yet. Click &quot;Add Skill&quot; to start.</p>
      )}
    </form>
  );
};

export default SkillsSection;
</file>

<file path="components/resume/templates/simple-template.tsx">
// components/resume/templates/simple-template.tsx
import React from 'react';
import { ResumeData } from '@/types/resume';

interface SimpleTemplateProps {
  resumeData: ResumeData;
  isPreview?: boolean; // To slightly adjust styles if used for on-page preview vs PDF capture
}

// Basic inline styles - for PDF generation, external CSS is harder to manage with html2canvas
const styles = {
  container: { fontFamily: 'Arial, sans-serif', padding: '40px', color: '#333', width: '210mm', minHeight: '297mm', backgroundColor: '#fff' }, // A4 size approx
  header: { textAlign: 'center' as const, marginBottom: '30px' },
  name: { fontSize: '28px', fontWeight: 'bold' as const, marginBottom: '5px' },
  contact: { fontSize: '12px', marginBottom: '20px' },
  section: { marginBottom: '20px' },
  sectionTitle: { fontSize: '18px', fontWeight: 'bold' as const, borderBottom: '2px solid #333', paddingBottom: '5px', marginBottom: '10px' },
  subHeader: { fontSize: '14px', fontWeight: 'bold' as const, marginBottom: '3px' },
  dateRange: { fontSize: '12px', fontStyle: 'italic' as const, color: '#555', marginBottom: '5px' },
  listItem: { marginBottom: '8px', fontSize: '12px', lineHeight: '1.4' },
  bullet: { listStyleType: 'disc' as const, marginLeft: '20px', paddingLeft: '5px'},
  paragraph: { fontSize: '12px', lineHeight: '1.4', marginBottom: '10px', whiteSpace: 'pre-line' as const },
  skillItem: { display: 'inline-block', marginRight: '10px', marginBottom: '5px', fontSize: '12px', padding: '3px 6px', backgroundColor: '#f0f0f0', borderRadius: '3px'}
};

const SimpleTemplate: React.FC<SimpleTemplateProps> = ({ resumeData }) => {
  if (!resumeData || !resumeData.personalInfo) {
    return <div style={styles.container}><p>Loading resume data...</p></div>;
  }
  const { personalInfo, experience, education, skills, projects } = resumeData;

  return (
    <div id="resume-content-for-pdf" style={styles.container}>
      <div style={styles.header}>
        <h1 style={styles.name}>{personalInfo.firstName} {personalInfo.lastName}</h1>
        <p style={styles.contact}>
          {personalInfo.location} | {personalInfo.phone} | {personalInfo.email}
          {personalInfo.linkedin && ` | ${personalInfo.linkedin}`}
          {personalInfo.website && ` | ${personalInfo.website}`}
        </p>
      </div>

      {personalInfo.summary && (
        <div style={styles.section}>
          <h2 style={styles.sectionTitle}>Summary</h2>
          <p style={styles.paragraph}>{personalInfo.summary}</p>
        </div>
      )}

      {experience && experience.length > 0 && (
        <div style={styles.section}>
          <h2 style={styles.sectionTitle}>Experience</h2>
          {experience.map((exp, index) => (
            <div key={`exp-${exp.id || index}`} style={styles.listItem}>
              <h3 style={styles.subHeader}>{exp.position} - {exp.company}</h3>
              <p style={styles.dateRange}>{exp.startDate} - {exp.endDate}</p>
              <p style={styles.paragraph}>{exp.description}</p>
              {exp.achievements && exp.achievements.length > 0 && (
                <ul style={styles.bullet}>
                  {exp.achievements.map((ach, i) => ach && <li key={i}>{ach}</li>)}
                </ul>
              )}
            </div>
          ))}
        </div>
      )}

      {education && education.length > 0 && (
        <div style={styles.section}>
          <h2 style={styles.sectionTitle}>Education</h2>
          {education.map((edu, index) => (
            <div key={`edu-${edu.id || index}`} style={styles.listItem}>
              <h3 style={styles.subHeader}>{edu.degree} in {edu.field}</h3>
              <p>{edu.institution}</p>
              <p style={styles.dateRange}>{edu.startDate} - {edu.endDate} {edu.gpa && `| GPA: ${edu.gpa}`}</p>
              {edu.achievements && edu.achievements.length > 0 && (
                <ul style={styles.bullet}>
                  {edu.achievements.map((ach, i) => ach && <li key={i}>{ach}</li>)}
                </ul>
              )}
            </div>
          ))}
        </div>
      )}

      {skills && skills.length > 0 && (
        <div style={styles.section}>
          <h2 style={styles.sectionTitle}>Skills</h2>
          <div>
            {skills.map((skill, index) => (
              skill.name && <span key={`skill-${skill.id || index}`} style={styles.skillItem}>{skill.name}</span>
            ))}
          </div>
        </div>
      )}

      {projects && projects.length > 0 && (
        <div style={styles.section}>
          <h2 style={styles.sectionTitle}>Projects</h2>
          {projects.map((proj, index) => (
            <div key={`proj-${proj.id || index}`} style={styles.listItem}>
              <h3 style={styles.subHeader}>{proj.name}</h3>
              <p style={styles.paragraph}>{proj.description}</p>
              {proj.technologies && proj.technologies.length > 0 && <p style={{fontSize: '11px', color: '#444'}}><em>Technologies: {proj.technologies.join(', ')}</em></p>}
              {proj.url && <p style={{fontSize: '11px'}}><a href={proj.url} target="_blank" rel="noopener noreferrer">Project Link</a></p>}
              {proj.github && <p style={{fontSize: '11px'}}><a href={proj.github} target="_blank" rel="noopener noreferrer">GitHub Repo</a></p>}
            </div>
          ))}
        </div>
      )}
    </div>
  );
};

export default SimpleTemplate;
</file>

<file path="components/ui/button.tsx">
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"
import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        default: "bg-gradient-to-r from-purple-500 to-pink-500 text-primary-foreground hover:from-purple-600 hover:to-pink-600",
        destructive: "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline: "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary: "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }
</file>

<file path="components/ui/card.tsx">
import * as React from "react"
import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm backdrop-blur-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }
</file>

<file path="components/ui/input.tsx">
// components/ui/input.tsx
import * as React from "react"
import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.InputHTMLAttributes<HTMLInputElement>>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-slate-700 bg-slate-800 px-3 py-2 text-sm text-gray-100 ring-offset-slate-900 file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-slate-500 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-purple-500 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }
</file>

<file path="components/ui/label.tsx">
import * as React from "react"
import { cn } from "@/lib/utils"

export type LabelProps = React.LabelHTMLAttributes<HTMLLabelElement>

const Label = React.forwardRef<HTMLLabelElement, LabelProps>(
  ({ className, ...props }, ref) => (
    <label
      ref={ref}
      className={cn(
        "block text-sm font-medium text-gray-300 mb-1.5",
        className
      )}
      {...props}
    />
  )
)
Label.displayName = "Label"

export { Label }
</file>

<file path="components/ui/progress.tsx">
// components/ui/progress.tsx
import * as React from "react"
import { cn } from "@/lib/utils"

interface ProgressProps extends React.HTMLAttributes<HTMLDivElement> {
  value?: number // 0 to 100
}

const Progress = React.forwardRef<HTMLDivElement, ProgressProps>(
  ({ className, value, ...props }, ref) => (
    <div
      ref={ref}
      className={cn(
        "relative h-2 w-full overflow-hidden rounded-full bg-slate-700",
        className
      )}
      {...props}
    >
      <div
        className="h-full w-full flex-1 bg-gradient-to-r from-purple-500 to-pink-500 transition-all"
        style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
      />
    </div>
  )
)
Progress.displayName = "Progress"

export { Progress }
</file>

<file path="components/ui/select.tsx">
// components/ui/select.tsx
import * as React from "react"
import { cn } from "@/lib/utils"

const Select = React.forwardRef<HTMLSelectElement, React.SelectHTMLAttributes<HTMLSelectElement>>(
  ({ className, children, ...props }, ref) => {
    return (
      <select
        className={cn(
          "flex h-10 w-full rounded-md border border-slate-700 bg-slate-800 px-3 py-2 text-sm text-gray-100 ring-offset-slate-900 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-purple-500 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      >
        {children}
      </select>
    )
  }
)
Select.displayName = "Select"

export { Select }
</file>

<file path="components/ui/textarea.tsx">
// components/ui/textarea.tsx
import * as React from "react"
import { cn } from "@/lib/utils"

const Textarea = React.forwardRef<HTMLTextAreaElement, React.TextareaHTMLAttributes<HTMLTextAreaElement>>(
  ({ className, ...props }, ref) => {
    return (
      <textarea
        className={cn(
          "flex min-h-[80px] w-full rounded-md border border-slate-700 bg-slate-800 px-3 py-2 text-sm text-gray-100 ring-offset-slate-900 placeholder:text-slate-500 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-purple-500 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Textarea.displayName = "Textarea"

export { Textarea }
</file>

<file path="context/theme-provider.tsx">
// context/theme-provider.tsx
"use client";

import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';

type Theme = "light" | "dark";

interface ThemeContextType {
  theme: Theme;
  toggleTheme: () => void;
}

const ThemeContext = createContext<ThemeContextType | undefined>(undefined);

export const ThemeProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  const [theme, setTheme] = useState<Theme>("dark"); // Default to dark as per your new LP

  useEffect(() => {
    const storedTheme = localStorage.getItem("theme") as Theme | null;
    if (storedTheme) {
      setTheme(storedTheme);
      document.documentElement.classList.toggle("dark", storedTheme === "dark");
    } else {
      // Set initial theme based on system preference if no stored theme
      const prefersDark = window.matchMedia("(prefers-color-scheme: dark)").matches;
      const initialTheme = prefersDark ? "dark" : "light";
      setTheme(initialTheme);
      document.documentElement.classList.toggle("dark", initialTheme === "dark");
      localStorage.setItem("theme", initialTheme);
    }
  }, []);

  const toggleTheme = () => {
    setTheme((prevTheme) => {
      const newTheme = prevTheme === "light" ? "dark" : "light";
      localStorage.setItem("theme", newTheme);
      document.documentElement.classList.toggle("dark", newTheme === "dark");
      return newTheme;
    });
  };

  return (
    <ThemeContext.Provider value={{ theme, toggleTheme }}>
      {children}
    </ThemeContext.Provider>
  );
};

export const useTheme = () => {
  const context = useContext(ThemeContext);
  if (context === undefined) {
    throw new Error("useTheme must be used within a ThemeProvider");
  }
  return context;
};
</file>

<file path="eslint.config.mjs">
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;
</file>

<file path="lib/ai/cover-letter-generator.ts">
// lib/ai/cover-letter-generator.ts
import { model, generationConfig, safetySettings } from './gemini';
import { ResumeData } from '@/types/resume'; // Assuming you'll pass the resume data

interface GenerateCoverLetterPayload {
  resumeData: Partial<ResumeData>; // Pass the relevant parts of the resume
  jobTitle: string;
  companyName: string;
  specificPoints?: string; // Optional: User-provided points to emphasize
  tone?: 'formal' | 'semi-formal' | 'enthusiastic'; // Optional: tone for the letter
}

interface GeneratedCoverLetterOutput {
  coverLetterText: string;
  // suggestions?: string[]; // Optional: suggestions for improvement or customization
}

// Helper to quickly summarize resume for the prompt
function summarizeResumeForCoverLetter(resumeData: Partial<ResumeData>): string {
  let summary = "Key qualifications include: ";
  if (resumeData.personalInfo?.summary) {
    summary += `Professional Summary: ${resumeData.personalInfo.summary.substring(0, 200)}... `;
  }
  if (resumeData.experience && resumeData.experience.length > 0) {
    const topExperience = resumeData.experience[0];
    summary += `Recent experience as ${topExperience.position} at ${topExperience.company}. `;
  }
  if (resumeData.skills && resumeData.skills.length > 0) {
    summary += `Top skills: ${resumeData.skills.slice(0, 5).map(s => s.name).join(', ')}. `;
  }
  return summary;
}


export async function generateCoverLetter(
  payload: GenerateCoverLetterPayload
): Promise<GeneratedCoverLetterOutput> {
  const { resumeData, jobTitle, companyName, specificPoints, tone = 'semi-formal' } = payload;

  const resumeSummary = summarizeResumeForCoverLetter(resumeData);

  let promptContext = `The candidate's resume highlights: ${resumeSummary}\n`;
  if (specificPoints) {
    promptContext += `The candidate wants to specifically emphasize: "${specificPoints}".\n`;
  }

  const prompt = `
    You are an expert career advisor and professional writer.
    Generate a compelling and tailored cover letter based on the following information.
    The candidate is applying for the role of "${jobTitle}" at "${companyName}".
    The desired tone for the cover letter is "${tone}".

    ${promptContext}

    The cover letter should:
    1.  Start with a professional greeting. If a hiring manager name is not provided, use a generic professional greeting.
    2.  Clearly state the position being applied for and where it was seen (if applicable, otherwise omit).
    3.  Briefly introduce the candidate and express strong interest in the role and company.
    4.  Highlight 2-3 key skills or experiences from the candidate's resume summary that directly align with the target job title.
    5.  If specific points to emphasize were provided, weave them naturally into the letter.
    6.  Show enthusiasm for the specific company, "${companyName}". Briefly mention why the company is a good fit or what excites the candidate about it (you can make a plausible inference if not specified).
    7.  Conclude with a call to action, expressing eagerness for an interview.
    8.  End with a professional closing.

    The candidate's name is ${resumeData.personalInfo?.firstName || ''} ${resumeData.personalInfo?.lastName || ''}.
    Their contact email is ${resumeData.personalInfo?.email || '[Candidate Email]'} and phone is ${resumeData.personalInfo?.phone || '[Candidate Phone]'}.
    Include the candidate's name and contact information at the end of the letter or in a standard letterhead format if you can represent that in text.

    Output MUST be a valid JSON object with the following structure:
    \`\`\`json
    {
      "coverLetterText": "The full text of the generated cover letter here, formatted with paragraphs (use \\n for newlines)."
    }
    \`\`\`
    Ensure the "coverLetterText" is a single string with appropriate newline characters for formatting.
    Do not include any explanatory text or markdown formatting outside the JSON object.
  `;

  try {
    // Adjust generationConfig if not expecting JSON directly for this, or keep it
    const customGenerationConfig = { ...generationConfig, responseMimeType: "application/json" }; // Ensure JSON output
    const chatSession = model.startChat({ generationConfig: customGenerationConfig, safetySettings, history: [] });
    const result = await chatSession.sendMessage(prompt);
    const responseText = result.response.text();

    console.log("[Cover Letter Generator] Gemini Raw Response:", responseText);

    let cleanedJsonText = responseText.trim();
    // Basic cleaning, assuming responseMimeType: "application/json" works well
    const jsonMatch = cleanedJsonText.match(/(\{[\s\S]*\})/);
    if (jsonMatch && jsonMatch[0]) {
        cleanedJsonText = jsonMatch[0];
    } else {
        if (cleanedJsonText.startsWith('```json')) cleanedJsonText = cleanedJsonText.substring(7);
        if (cleanedJsonText.endsWith('```')) cleanedJsonText = cleanedJsonText.substring(0, cleanedJsonText.length - 3);
        cleanedJsonText = cleanedJsonText.trim();
    }


    if (!cleanedJsonText) {
        throw new Error("Cleaned JSON text for cover letter is empty from AI.");
    }
    const parsedResult = JSON.parse(cleanedJsonText) as GeneratedCoverLetterOutput;

    if (!parsedResult.coverLetterText) {
      throw new Error("AI response for cover letter is missing 'coverLetterText' field.");
    }
    return parsedResult;

  } catch (error) {
    console.error("Error generating cover letter with AI:", error);
    return {
      coverLetterText: `Dear Hiring Manager,\n\nI am writing to express my interest in the ${jobTitle} position at ${companyName}. (AI generation failed, please write manually or try again.)\n\nSincerely,\n${resumeData.personalInfo?.firstName || ''} ${resumeData.personalInfo?.lastName || ''}`,
    };
  }
}
</file>

<file path="lib/ai/gemini.ts">
// lib/ai/gemini.ts
import { GoogleGenerativeAI, HarmCategory, HarmBlockThreshold } from "@google/generative-ai";

const apiKey = process.env.GEMINI_API_KEY;
if (!apiKey) {
  throw new Error("GEMINI_API_KEY is not defined in environment variables");
}

const genAI = new GoogleGenerativeAI(apiKey);

const model = genAI.getGenerativeModel({
  model: "gemini-1.5-flash-latest", // Or another suitable model
});

const generationConfig = {
  temperature: 0.7, // Adjust for creativity vs. factuality
  topP: 0.95,
  topK: 64,
  maxOutputTokens: 8192, // Adjust as needed
  responseMimeType: "application/json", // Expect JSON output
};

const safetySettings = [
  { category: HarmCategory.HARM_CATEGORY_HARASSMENT, threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE },
  { category: HarmCategory.HARM_CATEGORY_HATE_SPEECH, threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE },
  { category: HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT, threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE },
  { category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT, threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE },
];

export { model, generationConfig, safetySettings };
</file>

<file path="lib/ai/project-enhancer.ts">
// lib/ai/project-enhancer.ts
import { model, generationConfig, safetySettings } from './gemini';

interface EnhanceProjectPayload {
  projectName: string;
  currentDescription: string;
  technologies?: string[];
  resumeTitle?: string; // For context
}

interface EnhancedProjectOutput {
  enhancedDescription: string;
  // suggestions?: string[]; // e.g., suggest adding impact metrics
}

export async function enhanceProjectDescription(
  payload: EnhanceProjectPayload
): Promise<EnhancedProjectOutput> {
  const { projectName, currentDescription, technologies = [], resumeTitle } = payload;

  let contextText = `The user is describing a project named "${projectName}" for their resume`;
  if (resumeTitle) contextText += ` (resume titled "${resumeTitle}")`;
  if (technologies.length > 0) contextText += `. Key technologies used: ${technologies.join(', ')}`;
  contextText += ".";

  const prompt = `
    You are an expert resume writing assistant.
    ${contextText}
    The user has provided the following draft for their project description:

    Current Description:
    "${currentDescription}"

    Task:
    Rewrite this "Current Description" to be more impactful, concise, and clearly articulate the project's purpose, the user's role/contributions, and key outcomes or features. 
    Focus on using strong action verbs and highlighting technical skills demonstrated. If possible, frame contributions in a way that suggests impact.

    Output MUST be a valid JSON object with the following structure:
    \`\`\`json
    {
      "enhancedDescription": "The rewritten, impactful project description here."
    }
    \`\`\`
    Ensure all string values in the JSON are properly escaped.
    Do not include any explanatory text or markdown formatting outside the JSON object.
    Your entire response must start with "{" and end with "}".
  `;

  try {
    const chatSession = model.startChat({ generationConfig, safetySettings, history: [] });
    const result = await chatSession.sendMessage(prompt);
    const responseText = result.response.text();
    console.log("[Project Enhancer] Gemini Raw:", responseText);
    let cleanedJsonText = responseText.trim();
    const jsonMatch = cleanedJsonText.match(/(\{[\s\S]*\})/);
    if (jsonMatch && jsonMatch[0]) cleanedJsonText = jsonMatch[0];
    else { /* ... cleaning logic ... */ 
        if (cleanedJsonText.startsWith('```json')) cleanedJsonText = cleanedJsonText.substring(7);
        else if (cleanedJsonText.startsWith('```')) cleanedJsonText = cleanedJsonText.substring(3);
        if (cleanedJsonText.endsWith('```')) cleanedJsonText = cleanedJsonText.substring(0, cleanedJsonText.length - 3);
        cleanedJsonText = cleanedJsonText.trim();
    }
    console.log("[Project Enhancer] Cleaned JSON:", cleanedJsonText);
    if (!cleanedJsonText) throw new Error("Cleaned JSON empty from AI for project.");
    const parsedResult = JSON.parse(cleanedJsonText) as EnhancedProjectOutput;
    if (!parsedResult.enhancedDescription) throw new Error("AI response for project enhancement missing 'enhancedDescription'.");
    return parsedResult;
  } catch (error) {
    console.error("Error enhancing project with AI:", error);
    return { enhancedDescription: currentDescription + " (AI enhancement failed, please review manually)" };
  }
}
</file>

<file path="lib/ai/summary-enhancer.ts">
// lib/ai/summary-enhancer.ts
import { model, generationConfig, safetySettings } from './gemini';

interface EnhanceSummaryPayload {
  currentSummary: string;
  resumeTitle?: string; // For context
  // You could add targetJobTitle, keySkills from resume for more context
}

interface EnhancedSummaryOutput {
  enhancedSummary: string;
  // suggestions?: string[]; // Optional: suggestions on what was improved
}

export async function enhanceSummary(
  payload: EnhanceSummaryPayload
): Promise<EnhancedSummaryOutput> {
  const { currentSummary, resumeTitle } = payload;

  let contextText = "The user is writing a professional summary for their resume";
  if (resumeTitle) contextText += ` titled "${resumeTitle}"`;
  contextText += ".";

  const prompt = `
    You are an expert resume writing assistant.
    ${contextText}
    The user has provided the following draft for their professional summary:

    Current Summary:
    "${currentSummary}"

    Task:
    Rewrite this "Current Summary" to be more impactful, concise (ideally 2-4 powerful sentences), and ATS-friendly. 
    Focus on highlighting key skills, quantifiable achievements (if inferable or generally applicable), and career aspirations relevant to a professional resume.
    Ensure the tone is professional and confident.

    Output MUST be a valid JSON object with the following structure:
    \`\`\`json
    {
      "enhancedSummary": "The rewritten, impactful professional summary here."
    }
    \`\`\`
    Ensure all string values in the JSON are properly escaped.
    Do not include any explanatory text or markdown formatting outside the JSON object.
    Your entire response must start with "{" and end with "}".
  `;

  try {
    const chatSession = model.startChat({ generationConfig, safetySettings, history: [] });
    const result = await chatSession.sendMessage(prompt);
    const responseText = result.response.text();

    console.log("[Summary Enhancer] Gemini Raw Response:", responseText);

    let cleanedJsonText = responseText.trim();
    const jsonMatch = cleanedJsonText.match(/(\{[\s\S]*\})/);
    if (jsonMatch && jsonMatch[0]) cleanedJsonText = jsonMatch[0];
    else { 
        if (cleanedJsonText.startsWith('```json')) cleanedJsonText = cleanedJsonText.substring(7);
        else if (cleanedJsonText.startsWith('```')) cleanedJsonText = cleanedJsonText.substring(3);
        if (cleanedJsonText.endsWith('```')) cleanedJsonText = cleanedJsonText.substring(0, cleanedJsonText.length - 3);
        cleanedJsonText = cleanedJsonText.trim();
    }

    console.log("[Summary Enhancer] Cleaned JSON:", cleanedJsonText);
    if (!cleanedJsonText) throw new Error("Cleaned JSON text is empty from AI for summary.");

    const parsedResult = JSON.parse(cleanedJsonText) as EnhancedSummaryOutput;

    if (!parsedResult.enhancedSummary) {
      throw new Error("AI response for summary enhancement is missing 'enhancedSummary' field.");
    }
    return parsedResult;

  } catch (error) {
    console.error("Error enhancing summary with AI:", error);
    return {
      enhancedSummary: currentSummary + " (AI enhancement failed, please review manually)",
    };
  }
}
</file>

<file path="lib/db.ts">
// lib/db.ts
import { PrismaClient } from '@prisma/client';

declare global {
  // allow global `var` declarations
  // eslint-disable-next-line no-unused-vars, no-var
  var prisma: PrismaClient | undefined;
}

export const prisma =
  global.prisma ||
  new PrismaClient({
    // log: ['query', 'info', 'warn', 'error'], // Optional: for debugging
  });

if (process.env.NODE_ENV !== 'production') global.prisma = prisma;
</file>

<file path="middleware.ts">
// middleware.ts
import { clerkMiddleware, createRouteMatcher } from '@clerk/nextjs/server';

const isProtectedRoute = createRouteMatcher([
  '/dashboard(.*)', // Protects /dashboard and any sub-routes
]);

// The middleware function itself needs to be async to use await inside it
export default clerkMiddleware(async (authProvider, req) => { // Renamed 'auth' to 'authProvider' for clarity
  // Await the promise returned by authProvider() to get the actual auth object
  const authObject = await authProvider(); 

  const { userId, redirectToSignIn } = authObject; // Destructure from the resolved authObject

  if (isProtectedRoute(req)) {
    if (!userId) {
      // If it's a protected route and the user is not signed in,
      // redirect them to the sign-in page.
      return redirectToSignIn({ returnBackUrl: req.url });
    }
  }
});

export const config = {
  matcher: [
    '/((?!_next/static|_next/image|favicon.ico|api/public).*)',
    '/',
  ],
};
</file>

<file path="next.config.ts">
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  /* config options here */
};

export default nextConfig;
</file>

<file path="postcss.config.mjs">
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;
</file>

<file path="prisma/migrations/20250524181712_init_resume_models/migration.sql">
-- CreateTable
CREATE TABLE "Resume" (
    "id" TEXT NOT NULL,
    "userId" TEXT NOT NULL,
    "title" TEXT NOT NULL,
    "atsScore" INTEGER NOT NULL DEFAULT 0,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "Resume_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "PersonalInfo" (
    "id" TEXT NOT NULL,
    "firstName" TEXT NOT NULL,
    "lastName" TEXT NOT NULL,
    "email" TEXT NOT NULL,
    "phone" TEXT NOT NULL,
    "location" TEXT NOT NULL,
    "linkedin" TEXT,
    "website" TEXT,
    "summary" TEXT NOT NULL,
    "resumeId" TEXT NOT NULL,

    CONSTRAINT "PersonalInfo_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "EducationEntry" (
    "id" TEXT NOT NULL,
    "institution" TEXT NOT NULL,
    "degree" TEXT NOT NULL,
    "field" TEXT NOT NULL,
    "startDate" TEXT NOT NULL,
    "endDate" TEXT NOT NULL,
    "gpa" TEXT,
    "achievements" TEXT[] DEFAULT ARRAY[]::TEXT[],
    "resumeId" TEXT NOT NULL,

    CONSTRAINT "EducationEntry_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "ExperienceEntry" (
    "id" TEXT NOT NULL,
    "company" TEXT NOT NULL,
    "position" TEXT NOT NULL,
    "startDate" TEXT NOT NULL,
    "endDate" TEXT NOT NULL,
    "description" TEXT NOT NULL,
    "enhancedDescription" TEXT,
    "achievements" TEXT[] DEFAULT ARRAY[]::TEXT[],
    "resumeId" TEXT NOT NULL,

    CONSTRAINT "ExperienceEntry_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "SkillEntry" (
    "id" TEXT NOT NULL,
    "name" TEXT NOT NULL,
    "level" TEXT NOT NULL,
    "category" TEXT NOT NULL,
    "resumeId" TEXT NOT NULL,

    CONSTRAINT "SkillEntry_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "ProjectEntry" (
    "id" TEXT NOT NULL,
    "name" TEXT NOT NULL,
    "description" TEXT NOT NULL,
    "technologies" TEXT[] DEFAULT ARRAY[]::TEXT[],
    "url" TEXT,
    "github" TEXT,
    "resumeId" TEXT NOT NULL,

    CONSTRAINT "ProjectEntry_pkey" PRIMARY KEY ("id")
);

-- CreateIndex
CREATE INDEX "Resume_userId_idx" ON "Resume"("userId");

-- CreateIndex
CREATE UNIQUE INDEX "PersonalInfo_resumeId_key" ON "PersonalInfo"("resumeId");

-- CreateIndex
CREATE INDEX "EducationEntry_resumeId_idx" ON "EducationEntry"("resumeId");

-- CreateIndex
CREATE INDEX "ExperienceEntry_resumeId_idx" ON "ExperienceEntry"("resumeId");

-- CreateIndex
CREATE INDEX "SkillEntry_resumeId_idx" ON "SkillEntry"("resumeId");

-- CreateIndex
CREATE UNIQUE INDEX "SkillEntry_resumeId_name_key" ON "SkillEntry"("resumeId", "name");

-- CreateIndex
CREATE INDEX "ProjectEntry_resumeId_idx" ON "ProjectEntry"("resumeId");

-- AddForeignKey
ALTER TABLE "PersonalInfo" ADD CONSTRAINT "PersonalInfo_resumeId_fkey" FOREIGN KEY ("resumeId") REFERENCES "Resume"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "EducationEntry" ADD CONSTRAINT "EducationEntry_resumeId_fkey" FOREIGN KEY ("resumeId") REFERENCES "Resume"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "ExperienceEntry" ADD CONSTRAINT "ExperienceEntry_resumeId_fkey" FOREIGN KEY ("resumeId") REFERENCES "Resume"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "SkillEntry" ADD CONSTRAINT "SkillEntry_resumeId_fkey" FOREIGN KEY ("resumeId") REFERENCES "Resume"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "ProjectEntry" ADD CONSTRAINT "ProjectEntry_resumeId_fkey" FOREIGN KEY ("resumeId") REFERENCES "Resume"("id") ON DELETE CASCADE ON UPDATE CASCADE;
</file>

<file path="prisma/migrations/20250525094131_modified_experience_entry/migration.sql">
-- AlterTable
ALTER TABLE "ExperienceEntry" ADD COLUMN     "targetCompanyValues" TEXT;
</file>

<file path="prisma/migrations/migration_lock.toml">
# Please do not edit this file manually
# It should be added in your version-control system (e.g., Git)
provider = "postgresql"
</file>

<file path="public/file.svg">
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>
</file>

<file path="public/globe.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>
</file>

<file path="public/next.svg">
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>
</file>

<file path="public/vercel.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>
</file>

<file path="public/window.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>
</file>

<file path=".gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

/lib/generated/prisma
</file>

<file path="app/(auth)/sign-in/[[...sign-in]]/page.tsx">
// app/(auth)/sign-in/[[...sign-in]]/page.tsx
import { SignIn } from '@clerk/nextjs';

export default function Page() {
  return (
    // Use body background from globals.css for consistency
    <div className="min-h-screen flex items-center justify-center p-6"> 
      <SignIn />
    </div>
  );
}
// Apply similar minimal wrapper for sign-up page
</file>

<file path="app/(auth)/sign-up/[[...sign-up]]/page.tsx">
// app/(auth)/sign-in/[[...sign-in]]/page.tsx
import { SignUp } from '@clerk/nextjs';

export default function Page() {
  return (
    // Use body background from globals.css for consistency
    <div className="min-h-screen flex items-center justify-center p-6"> 
      <SignUp />
    </div>
  );
}
// Apply similar minimal wrapper for sign-up page
</file>

<file path="app/api/ai/enhance-experience/route.ts">
// app/api/ai/enhance-experience/route.ts
import { NextResponse } from 'next/server';
import { auth } from '@clerk/nextjs/server';
import { enhanceExperienceEntry } from '@/lib/ai/experience-enhancer';

export async function POST(request: Request) {
  try {
    const { userId } = await auth();
    if (!userId) {
      return new NextResponse('Unauthorized', { status: 401 });
    }

    const body = await request.json();
    const { description, achievements, title, jobTitle, targetCompanyValues } = body; // <<< Destructure targetCompanyValues

    if (!description) {
      return new NextResponse('Experience description is required', { status: 400 });
    }

    // Pass targetCompanyValues to the enhancer function
    const enhancedData = await enhanceExperienceEntry({
        description,
        achievements,
        title,
        jobTitle,
        targetCompanyValues // <<< Pass here
    });
    return NextResponse.json(enhancedData);

  } catch (error) {
    console.error('[API_ENHANCE_EXPERIENCE_ERROR]', error);
    return new NextResponse('Internal Server Error while enhancing experience', { status: 500 });
  }
}
</file>

<file path="components/resume/resume-preview.tsx">
// components/resume/resume-preview.tsx
import React from 'react';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Eye, User, Briefcase, GraduationCap, Star, Wrench } from 'lucide-react';
// REMOVE: import { useResumeStore, ResumeStateStore } from '@/hooks/use-resume';
// REMOVE: import { shallow } from 'zustand/shallow';
import { useShallowResumeSelector } from '@/hooks/useShallowResumeSelector'; // USE THE CUSTOM HOOK

const ResumePreview: React.FC = () => {
  const { // Destructure what's needed. setAtsScore will be available but not used here.
    title,
    personalInfo,
    education,
    experience,
    skills,
    projects,
  } = useShallowResumeSelector(); // Use the custom hook

  const SectionTitle: React.FC<{ icon: React.ElementType, title: string, className?: string }> = ({ icon: Icon, title: sectionTitle, className }) => (
    <div className={`flex items-center mt-5 mb-2 border-b border-slate-700 pb-1.5 ${className}`}>
      <Icon className="w-4 h-4 mr-2 text-purple-400" />
      <h3 className="text-sm font-semibold uppercase tracking-wider text-gray-300">{sectionTitle}</h3>
    </div>
  );

  return (
    <Card className="bg-slate-800/50 border border-slate-700 backdrop-blur-sm shadow-xl">
      <CardHeader className="pb-2">
         <div className="flex items-center justify-between">
            <CardTitle className="text-lg font-semibold text-white">
            Live Preview
            </CardTitle>
            <Eye className="h-6 w-6 text-blue-400" />
        </div>
        <CardDescription className="text-xs text-gray-400 pt-1">
            A simplified view of your resume as you build it. ({title}) {/* Example of using title */}
        </CardDescription>
      </CardHeader>
      <CardContent className="text-xs text-gray-400 max-h-[70vh] overflow-y-auto p-4 styled-scrollbar">
        <div className="p-3 bg-slate-900/30 rounded-md">
          {/* Header */}
          <div className="text-center mb-4">
            <h1 className="text-xl font-bold text-white">
              {personalInfo.firstName || "[First Name]"}{" "}
              {personalInfo.lastName || "[Last Name]"}
            </h1>
            <p className="text-xs text-gray-300">
              {personalInfo.location || "[Location]"} |{" "}
              {personalInfo.phone || "[Phone]"} |{" "}
              {personalInfo.email || "[Email]"}
            </p>
            {personalInfo.linkedin && (
              <a href={personalInfo.linkedin} target="_blank" rel="noopener noreferrer" className="text-xs text-blue-400 hover:underline">
                LinkedIn
              </a>
            )}
            {personalInfo.website && (
              <span className="text-xs text-gray-300">
                {" "}|{" "}
                <a href={personalInfo.website} target="_blank" rel="noopener noreferrer" className="text-blue-400 hover:underline">
                  Portfolio
                </a>
              </span>
            )}
          </div>

          {/* Summary */}
          {personalInfo.summary && (
            <>
              <SectionTitle icon={User} title="Summary" />
              <p className="text-xs text-gray-300 leading-relaxed whitespace-pre-line">
                {personalInfo.summary}
              </p>
            </>
          )}

          {/* Experience */}
          {experience.length > 0 && (
            <>
              <SectionTitle icon={Briefcase} title="Experience" />
              {experience.map((exp) => (
                <div key={exp.id} className="mb-3">
                  <h4 className="text-sm font-semibold text-gray-200">{exp.position || "[Position]"}</h4>
                  <p className="text-xs font-medium text-gray-300">{exp.company || "[Company]"}</p>
                  <p className="text-xs text-gray-400 mb-1">
                    {exp.startDate || "[Start Date]"} - {exp.endDate || "[End Date]"}
                  </p>
                  <p className="text-xs text-gray-300 whitespace-pre-line">{exp.description || "[Description..."}</p>
                  {exp.achievements && exp.achievements.length > 0 && (
                    <ul className="list-disc list-inside ml-2 text-xs text-gray-300">
                        {exp.achievements.map((ach, i) => ach && <li key={i}>{ach}</li>)}
                    </ul>
                  )}
                </div>
              ))}
            </>
          )}

          {/* Education */}
          {education.length > 0 && (
            <>
              <SectionTitle icon={GraduationCap} title="Education" />
              {education.map((edu) => (
                <div key={edu.id} className="mb-2.5">
                  <h4 className="text-sm font-semibold text-gray-200">{edu.degree || "[Degree]"} <span className="font-normal">in</span> {edu.field || "[Field of Study]"}</h4>
                  <p className="text-xs font-medium text-gray-300">{edu.institution || "[Institution]"}</p>
                  <p className="text-xs text-gray-400 mb-0.5">
                    {edu.startDate || "[Start]"} - {edu.endDate || "[End]"}
                    {edu.gpa && ` | GPA: ${edu.gpa}`}
                  </p>
                   {edu.achievements && edu.achievements.length > 0 && (
                    <ul className="list-disc list-inside ml-2 text-xs text-gray-300">
                        {edu.achievements.map((ach, i) => ach && <li key={i}>{ach}</li>)}
                    </ul>
                  )}
                </div>
              ))}
            </>
          )}

          {/* Skills */}
          {skills.length > 0 && (
            <>
              <SectionTitle icon={Star} title="Skills" />
              <div className="flex flex-wrap gap-1.5">
                {skills.map((skill) => (
                  skill.name && <span key={skill.id} className="bg-purple-500/20 text-purple-300 px-2 py-0.5 rounded text-xs">
                    {skill.name}
                  </span>
                ))}
              </div>
            </>
          )}

          {/* Projects */}
          {projects.length > 0 && (
            <>
                <SectionTitle icon={Wrench} title="Projects"/>
                {projects.map(proj => (
                    <div key={proj.id} className="mb-3">
                        <h4 className="text-sm font-semibold text-gray-200">{proj.name || "[Project Name]"}</h4>
                        <p className="text-xs text-gray-300 whitespace-pre-line mb-0.5">{proj.description || "[Description...]"}</p>
                        {proj.technologies && proj.technologies.length > 0 && (
                            <p className="text-xs text-gray-400">
                                <span className="font-medium text-gray-300">Tech: </span>{proj.technologies.join(', ')}
                            </p>
                        )}
                         {(proj.url || proj.github) && (
                            <p className="text-xs">
                                {proj.url && <a href={proj.url} target="_blank" rel="noopener noreferrer" className="text-blue-400 hover:underline mr-2">Live Demo</a>}
                                {proj.github && <a href={proj.github} target="_blank" rel="noopener noreferrer" className="text-blue-400 hover:underline">GitHub</a>}
                            </p>
                         )}
                    </div>
                ))}
            </>
          )}

        </div>
        { (personalInfo.summary === '' && experience.length === 0 && education.length === 0 && skills.length === 0 && projects.length === 0) &&
            <p className="italic text-center text-gray-500 mt-6">Your resume preview will appear here as you fill in the details.</p>
        }
      </CardContent>
    </Card>
  );
};

export default ResumePreview;
</file>

<file path="components/resume/sections/personal-info.tsx">
// components/resume/sections/personal-info.tsx
'use client';
import React, { useState } from 'react'; // Added useState
import { useForm, Controller } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import * as z from 'zod';
import { useResumeStore } from '@/hooks/use-resume';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { Button } from '@/components/ui/button'; // Import Button
import { PersonalInfo } from '@/types/resume';
import { Sparkles, Loader2 } from 'lucide-react'; // Import Sparkles and Loader2

// Zod schema for validation
const personalInfoSchema = z.object({
  firstName: z.string().min(1, "First name is required"),
  lastName: z.string().min(1, "Last name is required"),
  email: z.string().email("Invalid email address"),
  phone: z.string().min(1, "Phone number is required"),
  location: z.string().min(1, "Location is required"),
  linkedin: z.string().url().optional().or(z.literal('')),
  website: z.string().url().optional().or(z.literal('')),
  summary: z.string().min(20, "Summary should be at least 20 characters").max(1000, "Summary too long"),
});

const PersonalInfoSection: React.FC = () => {
  const { personalInfo, updatePersonalInfo } = useResumeStore();

  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  const { control, handleSubmit, formState: { errors }, watch, setValue } = useForm<PersonalInfo>({
    resolver: zodResolver(personalInfoSchema),
    defaultValues: personalInfo,
  });

  // Watch for changes and update Zustand store (debounced or onBlur would be better for performance)
  React.useEffect(() => {
    const subscription = watch((value) => {
      updatePersonalInfo(value as PersonalInfo);
    });
    return () => subscription.unsubscribe();
  }, [watch, updatePersonalInfo]);

  // We don't need an explicit submit handler here if data is synced on change.
  // The main page's "Next" button will handle navigation.


   const [isEnhancingSummary, setIsEnhancingSummary] = useState(false);

  const handleAiEnhanceSummary = async () => {
    const currentSummaryValue = watch("summary");
    if (!currentSummaryValue || currentSummaryValue.trim().length < 10) {
      alert("Please write a brief summary first (at least 10 characters).");
      return;
    }
    setIsEnhancingSummary(true);
    try {
      const response = await fetch('/api/ai/enhance-summary', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ currentSummary: currentSummaryValue }),
      });
      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(errorData.message || `AI summary enhancement failed: ${response.statusText}`);
      }
      const { enhancedSummary } = await response.json();
      setValue("summary", enhancedSummary, { shouldDirty: true, shouldValidate: true });
      alert("Summary enhanced by AI! Please review.");
    } catch (error) {
      console.error("AI Summary Enhancement error:", error);
      alert(`AI Summary Enhancement failed: ${error instanceof Error ? error.message : String(error)}`);
    } finally {
      setIsEnhancingSummary(false);
    }
  };

  return (
    <form className="space-y-6">
      <h2 className="text-2xl font-semibold text-white border-b border-white/10 pb-3 mb-6">
        Personal Information
      </h2>
      {/* ... (firstName, lastName, email, phone, location, linkedin, website fields - keep as is) ... */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6"><div><Label htmlFor="firstName">First Name</Label><Controller name="firstName" control={control} render={({ field }) => <Input id="firstName" {...field} placeholder="e.g., John"/>}/>{errors.firstName && <p className="text-red-400 text-xs mt-1">{errors.firstName.message}</p>}</div><div><Label htmlFor="lastName">Last Name</Label><Controller name="lastName" control={control} render={({ field }) => <Input id="lastName" {...field} placeholder="e.g., Doe"/>}/>{errors.lastName && <p className="text-red-400 text-xs mt-1">{errors.lastName.message}</p>}</div></div>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6"><div><Label htmlFor="email">Email Address</Label><Controller name="email" control={control} render={({ field }) => <Input id="email" type="email" {...field} placeholder="e.g., john.doe@example.com"/>}/>{errors.email && <p className="text-red-400 text-xs mt-1">{errors.email.message}</p>}</div><div><Label htmlFor="phone">Phone Number</Label><Controller name="phone" control={control} render={({ field }) => <Input id="phone" type="tel" {...field} placeholder="e.g., (123) 456-7890"/>}/>{errors.phone && <p className="text-red-400 text-xs mt-1">{errors.phone.message}</p>}</div></div>
      <div><Label htmlFor="location">Location</Label><Controller name="location" control={control} render={({ field }) => <Input id="location" {...field} placeholder="e.g., San Francisco, CA"/>}/>{errors.location && <p className="text-red-400 text-xs mt-1">{errors.location.message}</p>}</div>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6"><div><Label htmlFor="linkedin">LinkedIn Profile URL (Optional)</Label><Controller name="linkedin" control={control} render={({ field }) => <Input id="linkedin" {...field} placeholder="e.g., linkedin.com/in/johndoe"/>}/>{errors.linkedin && <p className="text-red-400 text-xs mt-1">{errors.linkedin.message}</p>}</div><div><Label htmlFor="website">Personal Website/Portfolio (Optional)</Label><Controller name="website" control={control} render={({ field }) => <Input id="website" {...field} placeholder="e.g., johndoe.com"/>}/>{errors.website && <p className="text-red-400 text-xs mt-1">{errors.website.message}</p>}</div></div>
      
      <div>
        <div className="flex justify-between items-center mb-1.5">
            <Label htmlFor="summary">Professional Summary</Label>
            <Button
                type="button"
                variant="ghost"
                size="sm"
                onClick={handleAiEnhanceSummary}
                disabled={isEnhancingSummary}
                className="text-purple-400 hover:text-purple-300 text-xs p-1"
            >
                {isEnhancingSummary ? (
                    <Loader2 className="w-3.5 h-3.5 mr-1 animate-spin" />
                ) : (
                    <Sparkles className="w-3.5 h-3.5 mr-1" />
                )}
                AI Enhance
            </Button>
        </div>
        <Controller
          name="summary"
          control={control}
          render={({ field }) => (
            <Textarea
              id="summary"
              {...field}
              rows={5}
              placeholder="A brief summary of your career, skills, and goals (2-4 sentences)..."
            />
          )}
        />
        {errors.summary && <p className="text-red-400 text-xs mt-1">{errors.summary.message}</p>}
        <p className="text-xs text-gray-400 mt-1">Tip: Highlight your key achievements and what you bring to a role. Click &quot;AI Enhance&quot; for help!</p>
      </div>
    </form>
  );
};

export default PersonalInfoSection;


// Create similar files for:
// components/resume/sections/education.tsx
// components/resume/sections/experience.tsx
// components/resume/sections/skills.tsx
// components/resume/sections/projects.tsx
// Each will have its own form fields, validation, and logic to update the Zustand store.
// For sections with multiple entries (Education, Experience), you'll need logic to add/remove/edit items in an array.
</file>

<file path="components/resume/sections/projects.tsx">
/* eslint-disable @typescript-eslint/no-unused-vars */
// components/resume/sections/projects.tsx
'use client';
import React, { useEffect, useState } from 'react'; // Added useState
import { useForm, useFieldArray, Controller } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import * as z from 'zod';
import { useResumeStore } from '@/hooks/use-resume';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { Button } from '@/components/ui/button';
import { ProjectEntry } from '@/types/resume';
import { PlusCircle, Trash2, LinkIcon, Github, Sparkles, Loader2 } from 'lucide-react'; // Added Sparkles, Loader2


const projectEntrySchema = z.object({
  id: z.string(),
  name: z.string().min(1, "Project name is required"),
  description: z.string().min(10, "Description must be at least 10 characters").max(1000, "Description too long."),
  technologies: z.string().min(1, "List at least one technology"), // Storing as comma-separated string for input
  url: z.string().url().optional().or(z.literal('')),
  github: z.string().url().optional().or(z.literal('')),
});

const projectsSchema = z.object({
  projects: z.array(projectEntrySchema),
});

type ProjectsFormData = z.infer<typeof projectsSchema>;

const ProjectsSection: React.FC = () => {
  const { projects, updateProject: updateStoreProject, addProject: addStoreProject, removeProject: removeStoreProject } = useResumeStore();

  const { control, register, handleSubmit, watch, formState: { errors } } = useForm<ProjectsFormData>({
    resolver: zodResolver(projectsSchema),
    defaultValues: { projects: projects.map(proj => ({...proj, technologies: proj.technologies.join(', ')})) },
  });

  const { fields, append, remove } = useFieldArray({
    control,
    name: "projects",
  });

  useEffect(() => {
    const subscription = watch((value) => {
      if (value.projects) {
        value.projects.forEach((projData, index) => {
          if (projData && projData.technologies) {
            const techArray = projData.technologies.split(',').map(t => t.trim()).filter(t => t);
            updateStoreProject(index, {...projData, technologies: techArray});
          }
        });
      }
    });
    return () => subscription.unsubscribe();
  }, [watch, updateStoreProject]);

  const handleAddProject = () => {
    addStoreProject();
    append({ 
      id: `temp-${Date.now()}`, 
      name: '', 
      description: '', 
      technologies: '', 
      url: '', 
      github: '' 
    });
  };

  const handleRemoveProject = (index: number) => {
    const projIdToRemove = fields[index].id;
    removeStoreProject(projIdToRemove);
    remove(index);
  };

  
  const [enhancingProjectIndex, setEnhancingProjectIndex] = useState<number | null>(null);

  

    const handleAiEnhanceProject = async (index: number) => {
    const currentProject = watch(`projects.${index}`);
    if (!currentProject || !currentProject.name || !currentProject.description) {
      alert("Please provide a project name and description first.");
      return;
    }
    setEnhancingProjectIndex(index);
    try {
      const response = await fetch('/api/ai/enhance-project', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          projectName: currentProject.name,
          currentDescription: currentProject.description,
          technologies: typeof currentProject.technologies === 'string' ? currentProject.technologies.split(',').map(t => t.trim()).filter(Boolean) : [],
        }),
      });
      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(errorData.message || `AI project enhancement failed: ${response.statusText}`);
      }
      const { enhancedDescription } = await response.json();
      setValue(`projects.${index}.description`, enhancedDescription, { shouldDirty: true, shouldValidate: true });
      alert("Project description enhanced by AI! Please review.");
    } catch (error) {
      console.error("AI Project Enhancement error:", error);
      alert(`AI Project Enhancement failed: ${error instanceof Error ? error.message : String(error)}`);
    } finally {
      setEnhancingProjectIndex(null);
    }
  };


  return (
    <form className="space-y-8">
      {/* ... (Add Project button section) ... */}
      <div className="flex justify-between items-center border-b border-white/10 pb-3 mb-6"><h2 className="text-2xl font-semibold text-white">Projects</h2><Button type="button" variant="outline" size="sm" onClick={handleAddProject} className="text-white border-white/20 hover:bg-white/10"><PlusCircle className="w-4 h-4 mr-2" />Add Project</Button></div>

      {fields.map((item, index) => (
        <div key={item.id} className="p-6 bg-slate-800/50 border border-slate-700 rounded-lg space-y-6 relative">
          {/* ... (Remove button and project name field) ... */}
          <Button type="button" variant="ghost" size="icon" onClick={() => handleRemoveProject(index)} className="absolute top-3 right-3 text-red-400 hover:text-red-300 hover:bg-red-500/20"><Trash2 className="w-4 h-4" /></Button>
          <input type="hidden" {...register(`projects.${index}.id`)} />
          <div><Label htmlFor={`projects.${index}.name`}>Project Name</Label><Input id={`projects.${index}.name`} {...register(`projects.${index}.name`)} placeholder="e.g., AI Resume Builder"/>{errors.projects?.[index]?.name && <p className="text-red-400 text-xs mt-1">{errors.projects[index]?.name?.message}</p>}</div>
          
          <div>
            <div className="flex justify-between items-center mb-1.5">
                <Label htmlFor={`projects.${index}.description`}>Description</Label>
                <Button
                    type="button"
                    variant="ghost"
                    size="sm"
                    onClick={() => handleAiEnhanceProject(index)}
                    disabled={enhancingProjectIndex === index}
                    className="text-purple-400 hover:text-purple-300 text-xs p-1"
                >
                    {enhancingProjectIndex === index ? (
                        <Loader2 className="w-3.5 h-3.5 mr-1 animate-spin" />
                    ) : (
                        <Sparkles className="w-3.5 h-3.5 mr-1" />
                    )}
                    AI Enhance
                </Button>
            </div>
            <Textarea
              id={`projects.${index}.description`}
              {...register(`projects.${index}.description`)}
              rows={3}
              placeholder="Briefly describe the project, its purpose, and your role."
            />
            {errors.projects?.[index]?.description && <p className="text-red-400 text-xs mt-1">{errors.projects[index]?.description?.message}</p>}
          </div>
          
          {/* ... (Technologies, URL, GitHub fields) ... */}
          <div><Label htmlFor={`projects.${index}.technologies`}>Technologies Used (comma-separated)</Label><Input id={`projects.${index}.technologies`} {...register(`projects.${index}.technologies`)} placeholder="e.g., Next.js, Tailwind CSS, OpenAI API"/>{errors.projects?.[index]?.technologies && <p className="text-red-400 text-xs mt-1">{errors.projects[index]?.technologies?.message}</p>}</div>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6"><div><Label htmlFor={`projects.${index}.url`}>Project URL (Optional)</Label><div className="relative"><Input id={`projects.${index}.url`} {...register(`projects.${index}.url`)} placeholder="https://example.com"/><LinkIcon className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400"/></div>{errors.projects?.[index]?.url && <p className="text-red-400 text-xs mt-1">{errors.projects[index]?.url?.message}</p>}</div><div><Label htmlFor={`projects.${index}.github`}>GitHub Repository (Optional)</Label><div className="relative"><Input id={`projects.${index}.github`} {...register(`projects.${index}.github`)} placeholder="https://github.com/user/repo"/><Github className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400"/></div>{errors.projects?.[index]?.github && <p className="text-red-400 text-xs mt-1">{errors.projects[index]?.github?.message}</p>}</div></div>
        </div>
      ))}
      {/* ... (Empty state) ... */}
      {fields.length === 0 && (<p className="text-center text-gray-400 py-4">No projects added yet. Click &quot;Add Project&quot; to showcase your work.</p>)}
    </form>
  );
};

export default ProjectsSection;

// eslint-disable-next-line @typescript-eslint/no-explicit-any
function setValue(arg0: string, enhancedDescription: any, arg2: { shouldDirty: boolean; shouldValidate: boolean; }) {
  throw new Error('Function not implemented.');
}
</file>

<file path="hooks/use-resume.ts">
// hooks/use-resume.ts
import { create } from 'zustand';
import { 
    ResumeData, 
    PersonalInfo, 
    EducationEntry, 
    ExperienceEntry, 
    SkillEntry, 
    ProjectEntry 
} from '@/types/resume';
import { v4 as uuidv4 } from 'uuid';

// Define the initial state for a new resume, excluding dynamic parts like userId or title
const initialResumeSubStates: Omit<ResumeData, 'userId' | 'title' | 'id' | 'atsScore'> = {
  personalInfo: {
    firstName: '',
    lastName: '',
    email: '',
    phone: '',
    location: '',
    linkedin: '',
    website: '',
    summary: '',
  },
  education: [],
  experience: [],
  skills: [],
  projects: [],
};

// Define the full store state including methods
export interface ResumeStateStore extends ResumeData {
  id?: string; // Optional: The DB ID of the resume being edited/created
  
  // Setters for top-level resume properties
  setId: (id: string) => void;
  setUserId: (userId: string) => void; // Though userId is often set once on init
  setTitle: (title: string) => void;
  setAtsScore: (score: number) => void;
  
  // Methods for PersonalInfo
  updatePersonalInfo: (data: Partial<PersonalInfo>) => void;
  
  // Methods for Education array
  addEducation: () => string; // Returns new entry ID
  updateEducation: (index: number, data: Partial<EducationEntry>) => void;
  removeEducation: (id: string) => void; // Remove by entry's unique ID
  
  // Methods for Experience array
  addExperience: () => string; // Returns new entry ID
  updateExperience: (index: number, data: Partial<ExperienceEntry>) => void;
  removeExperience: (id: string) => void;

  // Methods for Skills array
  addSkill: () => string; // Returns new entry ID
  updateSkill: (index: number, data: Partial<SkillEntry>) => void;
  removeSkill: (id: string) => void;

  // Methods for Projects array
  addProject: () => string; // Returns new entry ID
  updateProject: (index: number, data: Partial<ProjectEntry>) => void;
  removeProject: (id: string) => void;
  
  // Function to load an existing resume (e.g., for editing)
  loadResume: (resume: ResumeData & { id: string }) => void; // Ensure loaded resume has an ID
  // Function to reset to initial state (e.g., for creating a new resume)
  resetResume: (userId: string) => void;
}

// eslint-disable-next-line @typescript-eslint/no-unused-vars
export const useResumeStore = create<ResumeStateStore>((set, get) => ({
  // Initial state values
  id: undefined,
  userId: '', 
  title: 'Untitled Resume',
  atsScore: 0,
  ...initialResumeSubStates,

  // Implementations
  setId: (id) => set({ id }),
  setUserId: (userId) => set({ userId }),
  setTitle: (title) => set({ title }),
  setAtsScore: (score) => set({ atsScore: score }),

  updatePersonalInfo: (data) => set((state) => ({
    personalInfo: { ...state.personalInfo, ...data },
  })),

  addEducation: () => {
    const newId = uuidv4();
    set((state) => ({
      education: [
        ...state.education, 
        { id: newId, institution: '', degree: '', field: '', startDate: '', endDate: '', achievements: [] }
      ],
    }));
    return newId;
  },
  updateEducation: (index, data) => set((state) => {
    const educationList = [...state.education];
    if (educationList[index]) {
      educationList[index] = { ...educationList[index], ...data };
    }
    return { education: educationList };
  }),
  removeEducation: (idToRemove) => set((state) => ({
    education: state.education.filter(edu => edu.id !== idToRemove),
  })),

  addExperience: () => {
    const newId = uuidv4();
    set((state) => ({
      experience: [
        ...state.experience, 
        { id: newId, company: '', position: '', startDate: '', endDate: '', description: '', achievements: [] }
      ],
    }));
    return newId;
  },
  updateExperience: (index, data) => set((state) => {
    const experienceList = [...state.experience];
    if (experienceList[index]) {
      experienceList[index] = { ...experienceList[index], ...data };
    }
    return { experience: experienceList };
  }),
  removeExperience: (idToRemove) => set((state) => ({
    experience: state.experience.filter(exp => exp.id !== idToRemove),
  })),

  addSkill: () => {
    const newId = uuidv4();
    set((state) => ({
      skills: [
        ...state.skills, 
        { id: newId, name: '', level: 'Intermediate', category: 'Technical' }
      ],
    }));
    return newId;
  },
  updateSkill: (index, data) => set((state) => {
    const skillsList = [...state.skills];
    if (skillsList[index]) {
      skillsList[index] = { ...skillsList[index], ...data };
    }
    return { skills: skillsList };
  }),
  removeSkill: (idToRemove) => set((state) => ({
    skills: state.skills.filter(skill => skill.id !== idToRemove),
  })),
  
  addProject: () => {
    const newId = uuidv4();
    set((state) => ({
      projects: [
        ...state.projects, 
        { id: newId, name: '', description: '', technologies: [] }
      ],
    }));
    return newId;
  },
  updateProject: (index, data) => set((state) => {
    const projectsList = [...state.projects];
    if (projectsList[index]) {
      projectsList[index] = { ...projectsList[index], ...data };
    }
    return { projects: projectsList };
  }),
  removeProject: (idToRemove) => set((state) => ({
    projects: state.projects.filter(proj => proj.id !== idToRemove),
  })),
  
  loadResume: (resumeToLoad) => set({ 
    ...resumeToLoad, // This spreads all properties from resumeToLoad
                     // including its id, userId, title, atsScore, and all sections
  }),
  resetResume: (userIdForNewResume) => set({
    id: undefined, // Explicitly reset the resume's own ID
    userId: userIdForNewResume,
    title: 'Untitled Resume',
    atsScore: 0,
    ...initialResumeSubStates, // Spread the clean sub-states
  }),
}));
</file>

<file path="lib/ai/ats-scorer.ts">
// lib/ai/ats-scorer.ts
import { model, generationConfig, safetySettings } from './gemini'; // Assuming gemini.ts is set up correctly
// eslint-disable-next-line @typescript-eslint/no-unused-vars
import { ResumeData, ATSScoreDetails, PersonalInfo, ExperienceEntry, EducationEntry, SkillEntry, ProjectEntry } from '@/types/resume';

// Helper function to construct a text representation of the resume
function constructResumeText(resumeData: Partial<ResumeData>): string {
  let text = `Resume Title: ${resumeData.title || 'N/A'}\n\n`;
  
  if (resumeData.personalInfo) {
    const pi = resumeData.personalInfo;
    text += `Personal Information:\n`;
    text += `Name: ${pi.firstName || ''} ${pi.lastName || ''}\n`;
    text += `Email: ${pi.email || ''}\n`;
    text += `Phone: ${pi.phone || ''}\n`;
    text += `Location: ${pi.location || ''}\n`;
    if (pi.linkedin) text += `LinkedIn: ${pi.linkedin}\n`;
    if (pi.website) text += `Website: ${pi.website}\n`;
    text += `Summary: ${pi.summary || 'N/A'}\n\n`;
  }

  if (resumeData.experience && resumeData.experience.length > 0) {
    text += `Experience:\n`;
    resumeData.experience.forEach(exp => {
      text += `- Position: ${exp.position || 'N/A'} at ${exp.company || 'N/A'}\n`;
      text += `  Dates: ${exp.startDate || 'N/A'} - ${exp.endDate || 'N/A'}\n`;
      text += `  Description: ${exp.description || 'N/A'}\n`;
      if (exp.achievements && exp.achievements.length > 0) {
        text += `  Achievements:\n${exp.achievements.filter(a => a).map(a => `    * ${a}`).join('\n')}\n`;
      }
    });
    text += `\n`;
  }

  if (resumeData.education && resumeData.education.length > 0) {
    text += `Education:\n`;
    resumeData.education.forEach(edu => {
      text += `- Degree: ${edu.degree || 'N/A'} in ${edu.field || 'N/A'} from ${edu.institution || 'N/A'}\n`;
      text += `  Dates: ${edu.startDate || 'N/A'} - ${edu.endDate || 'N/A'}\n`;
      if (edu.gpa) text += `  GPA: ${edu.gpa}\n`;
      if (edu.achievements && edu.achievements.length > 0) {
        text += `  Achievements:\n${edu.achievements.filter(a => a).map(a => `    * ${a}`).join('\n')}\n`;
      }
    });
    text += `\n`;
  }
  
  if (resumeData.skills && resumeData.skills.length > 0) {
    text += `Skills:\n`;
    resumeData.skills.forEach(skill => {
        text += `- ${skill.name || 'N/A'} (${skill.level || 'N/A'}, ${skill.category || 'N/A'})\n`
    });
    text += `\n`;
  }

  if (resumeData.projects && resumeData.projects.length > 0) {
    text += `Projects:\n`;
    resumeData.projects.forEach(proj => {
        text += `- Name: ${proj.name || 'N/A'}\n Description: ${proj.description || 'N/A'}\n Technologies: ${proj.technologies?.join(', ') || 'N/A'}\n`;
        if(proj.url) text += ` URL: ${proj.url}\n`;
        if(proj.github) text += ` GitHub: ${proj.github}\n`;
    });
  }
  return text.trim();
}

// Define the fallback (default) score structure
const defaultAtsScoreDetails: ATSScoreDetails = {
    overall: 10, // Default low score
    suggestions: ["AI analysis could not be completed. Please ensure your resume has sufficient content and try again."],
    breakdown: {
        keywords: { score: 0, suggestions: ["Content needed for keyword analysis."] },
        clarityAndConciseness: { score: 0, suggestions: ["Content needed for clarity analysis."] },
        actionVerbs: { score: 0, suggestions: ["Content needed for action verb analysis."] },
        quantifiableResults: { score: 0, suggestions: ["Content needed for quantifiable results analysis."] },
        formattingAndConciseness: { score: 0, suggestions: ["Content needed for formatting analysis."] }, // Corrected key
        lengthAndRelevance: { score: 0, suggestions: ["Content needed for length/relevance analysis."] },
    }
};


export async function getAtsScoreAndSuggestions(resumeData: Partial<ResumeData>): Promise<ATSScoreDetails> {
  const resumeTextContent = constructResumeText(resumeData);

  if (!resumeTextContent || resumeTextContent.split('\n').length < 5) { // Basic check for minimal content
    console.warn("[ATS Scorer] Insufficient content for meaningful analysis. Returning default low score.");
    return {
        ...defaultAtsScoreDetails,
        overall: 5,
        suggestions: ["Please add more content to your resume for an accurate ATS score and suggestions."]
    };
  }

 const prompt = `
    You are an expert ATS (Applicant Tracking System) resume analyzer.
    Analyze the following resume content and provide a detailed ATS compatibility assessment.
    The output MUST be a single, valid JSON object adhering strictly to this TypeScript interface:
    \`\`\`typescript
    interface ATSScoreDetails {
      overall: number; // Holistic ATS friendliness score (0-100).
      breakdown?: { 
        keywords: { score: number; suggestions: string[]; }; 
        clarityAndConciseness: { score: number; suggestions: string[]; };
        actionVerbs: { score: number; suggestions: string[]; };
        quantifiableResults: { score: number; suggestions: string[]; };
        formattingAndConciseness: { score: number; suggestions: string[]; };
        lengthAndRelevance: { score: number; suggestions: string[]; };
      }; // End of the 'breakdown' object.
      suggestions: string[]; // <<<<---- VERY IMPORTANT: This is a TOP-LEVEL array for 2-4 concise, actionable, overall suggestions. This 'suggestions' array MUST NOT be inside the 'breakdown' object. It must be a direct property of the root JSON object.
    }
    \`\`\`
    For each category in 'breakdown', provide a 'score' (0-100) and a 'suggestions' array (1-2 concise points, or an empty array if the category is strong).
    The top-level 'suggestions' array is mandatory and should always exist and contain 2-4 high-level improvement points.
    Ensure all string values in the JSON are properly escaped. Do not include any text, markdown (like \`\`\`json\`), or anything else outside the single JSON object itself.
    Your entire response must start with "{" and end with "}".

    Resume Content to Analyze:
    ---
    ${constructResumeText(resumeData)}
    ---
  `;

  let attempt = 0;
  const maxAttempts = 2; 

  while (attempt < maxAttempts) {
    attempt++;
    try {
      const chatSession = model.startChat({
        generationConfig, // Ensure responseMimeType: "application/json" is in gemini.ts
        safetySettings,
        history: [],
      });

      const result = await chatSession.sendMessage(prompt);
      const responseText = result.response.text();
      
      console.log(`[ATS Scorer Attempt ${attempt}] Gemini Raw Response Text:\n---\n${responseText}\n---`);

      let cleanedJsonText = responseText.trim();
      const jsonMatch = cleanedJsonText.match(/(\{[\s\S]*\})/); // Try to extract content between first { and last }
      if (jsonMatch && jsonMatch[0]) {
          cleanedJsonText = jsonMatch[0];
      } else {
          // Fallback cleaning for common markdown ```json ... ```
          if (cleanedJsonText.startsWith('```json')) cleanedJsonText = cleanedJsonText.substring(7);
          else if (cleanedJsonText.startsWith('```')) cleanedJsonText = cleanedJsonText.substring(3);
          if (cleanedJsonText.endsWith('```')) cleanedJsonText = cleanedJsonText.substring(0, cleanedJsonText.length - 3);
          cleanedJsonText = cleanedJsonText.trim();
      }
      
      console.log(`[ATS Scorer Attempt ${attempt}] Cleaned JSON Text for Parsing:\n---\n${cleanedJsonText}\n---`);
      
      if (!cleanedJsonText) {
        throw new Error("Cleaned JSON text is empty after attempting to extract from AI response.");
      }
      
       // eslint-disable-next-line @typescript-eslint/no-explicit-any
       const parsedAsAny = JSON.parse(cleanedJsonText) as any;

      // ---- START: NORMALIZATION LOGIC (CRUCIAL) ----
      if ((!parsedAsAny.suggestions || !Array.isArray(parsedAsAny.suggestions)) && 
          parsedAsAny.breakdown && 
          Array.isArray(parsedAsAny.breakdown.suggestions)) {
          console.warn("[ATS Scorer] NORMALIZING: Top-level 'suggestions' missing. Moving 'breakdown.suggestions' to top level and deleting from breakdown.");
          parsedAsAny.suggestions = parsedAsAny.breakdown.suggestions;
          delete parsedAsAny.breakdown.suggestions; 
      }
      // ---- END: NORMALIZATION LOGIC ----
      
      const finalResult = parsedAsAny as ATSScoreDetails;

      // Validate essential top-level properties AFTER normalization
      if (typeof finalResult.overall !== 'number' || finalResult.overall < 0 || finalResult.overall > 100 ||
          !finalResult.suggestions || !Array.isArray(finalResult.suggestions) || finalResult.suggestions.length === 0 ) {
          console.error("[ATS Scorer] VALIDATION FAILED: Final JSON missing/invalid 'overall' or TOP-LEVEL 'suggestions'.", finalResult);
          throw new Error("Final JSON does not match structure (overall or top-level suggestions missing, empty, or invalid).");
      }

      // ... (rest of your breakdown validation logic - this should be fine if the above is correct)
      // Ensure defaultAtsScoreDetails and the breakdown validation use "formattingAndConciseness"
      const requiredBreakdownKeys: (keyof NonNullable<ATSScoreDetails['breakdown']>)[] = 
          ["keywords", "clarityAndConciseness", "actionVerbs", "quantifiableResults", "formattingAndConciseness", "lengthAndRelevance"];
      
      if (!finalResult.breakdown) {
        console.warn("[ATS Scorer] AI response missing 'breakdown' object. Providing default breakdown.");
        finalResult.breakdown = { ...defaultAtsScoreDetails.breakdown! };
      } else {
        for (const key of requiredBreakdownKeys) {
            const category = finalResult.breakdown[key];
            if (!category || typeof category.score !== 'number' || category.score < 0 || category.score > 100 || 
                !Array.isArray(category.suggestions)) {
                 console.warn(`[ATS Scorer] Breakdown for '${key}' malformed or missing. Applying default.`);
                 finalResult.breakdown[key] = { ...defaultAtsScoreDetails.breakdown![key]! };
            }
        }
      }
      return finalResult;

    } catch (error) {
      console.error(`[ATS Scorer Attempt ${attempt}] Error parsing or validating JSON:`, error);
      if (attempt >= maxAttempts) {
        console.error("All ATS scoring attempts failed. Returning fallback default score.");
        return defaultAtsScoreDetails;
      }
      // Optional: add a small delay before retrying
      // await new Promise(resolve => setTimeout(resolve, 300));
    }
  }
  // This line should theoretically be unreachable if maxAttempts >= 1
  console.error("Exhausted ATS scoring attempts, returning default.");
  return defaultAtsScoreDetails; 
}
</file>

<file path="lib/ai/experience-enhancer.ts">
// lib/ai/experience-enhancer.ts
import { model, generationConfig, safetySettings } from './gemini'; // Your Gemini client setup
// eslint-disable-next-line @typescript-eslint/no-unused-vars
import { ExperienceEntry } from '@/types/resume';

interface EnhanceExperiencePayload {
  description: string;
  achievements?: string[]; // Existing achievements
  title?: string; // Resume title, for context
  jobTitle?: string; // Target job title, for context (optional)
  targetCompanyValues?: string; // <<< NEW FIELD: Comma-separated string of keywords/values
}

interface EnhancedExperienceOutput {
  enhancedDescription: string;
  suggestedAchievements: string[];
}

export async function enhanceExperienceEntry(
  payload: EnhanceExperiencePayload
): Promise<EnhancedExperienceOutput> {
  const { description, achievements = [], title, jobTitle, targetCompanyValues } = payload;

  let contextText = "The user is building a resume";
  if (title) contextText += ` titled "${title}"`;
  if (jobTitle) contextText += ` for a role like "${jobTitle}"`;

  // <<< ADD COMPANY VALUES TO CONTEXT
  if (targetCompanyValues && targetCompanyValues.trim() !== '') {
    contextText += `. They are targeting a company that values: "${targetCompanyValues}". Please try to incorporate or reflect these values subtly in the language and focus of the enhanced content if appropriate.`;
  } else {
    contextText += ".";
  }

  const achievementsText = achievements.length > 0
    ? `Current achievements listed:\n${achievements.map(a => `- ${a}`).join('\n')}`
    : "No specific achievements listed yet for this role.";

  const prompt = `
    You are an expert resume writing assistant specializing in ATS optimization.
    ${contextText}

    The user has provided the following job experience description and (optionally) existing achievements for their role as "${jobTitle || 'a professional'}".

    Current Description:
    "${description}"

    ${achievementsText}

    Task:
    1. Rewrite the "Current Description" to be more impactful, concise, and ATS-friendly. Focus on using strong action verbs and highlighting responsibilities clearly. The rewritten description should be a single paragraph or a few short sentences.
    2. Based on the rewritten description AND considering the target company values (if provided), suggest 3-5 new or refined achievement-oriented bullet points. Each bullet point must start with a strong action verb. Quantify achievements with data or specific examples where possible. If existing achievements were provided, either refine them or suggest entirely new ones that are more impactful.

    Output MUST be a valid JSON object with the following structure:
    \`\`\`json
    {
      "enhancedDescription": "The rewritten job description text here.",
      "suggestedAchievements": [
        "Suggested achievement 1...",
        "Suggested achievement 2...",
        "Suggested achievement 3..."
      ]
    }
    \`\`\`
    Ensure all string values in the JSON are properly escaped.
    Do not include any explanatory text or markdown formatting outside the JSON object.
    Your entire response must start with "{" and end with "}".
  `;

  try {
    const chatSession = model.startChat({ generationConfig, safetySettings, history: [] });
    const result = await chatSession.sendMessage(prompt);
    const responseText = result.response.text();

    console.log("[Experience Enhancer] Gemini Raw Response:", responseText);
    console.log("[Experience Enhancer] Prompt Sent:", prompt); // Log the prompt

    let cleanedJsonText = responseText.trim();
    const jsonMatch = cleanedJsonText.match(/(\{[\s\S]*\})/);
    if (jsonMatch && jsonMatch[0]) cleanedJsonText = jsonMatch[0];
    else {
        if (cleanedJsonText.startsWith('```json')) cleanedJsonText = cleanedJsonText.substring(7);
        else if (cleanedJsonText.startsWith('```')) cleanedJsonText = cleanedJsonText.substring(3);
        if (cleanedJsonText.endsWith('```')) cleanedJsonText = cleanedJsonText.substring(0, cleanedJsonText.length - 3);
        cleanedJsonText = cleanedJsonText.trim();
    }

    console.log("[Experience Enhancer] Cleaned JSON:", cleanedJsonText);
    if (!cleanedJsonText) throw new Error("Cleaned JSON text is empty from AI.");

    const parsedResult = JSON.parse(cleanedJsonText) as EnhancedExperienceOutput;

    if (!parsedResult.enhancedDescription || !Array.isArray(parsedResult.suggestedAchievements)) {
      throw new Error("AI response for experience enhancement is missing required fields.");
    }
    return parsedResult;

  } catch (error) {
    console.error("Error enhancing experience with AI:", error);
    return {
      enhancedDescription: description + " (AI enhancement failed, please review manually)",
      suggestedAchievements: achievements,
    };
  }
}
</file>

<file path="lib/utils.ts">
import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
</file>

<file path="prisma/schema.prisma">
// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL") // Optional: for connection pooling tools like PgBouncer with Prisma Accelerate
}

// We don't define a User model here explicitly managed by Prisma for auth,
// as Clerk handles user management. We'll link resumes to Clerk's userId.

model Resume {
  id        String   @id @default(cuid())
  userId    String   // Clerk User ID
  title     String
  atsScore  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  personalInfo PersonalInfo?
  education    EducationEntry[]
  experience   ExperienceEntry[]
  skills       SkillEntry[]
  projects     ProjectEntry[]

  @@index([userId])
}

model PersonalInfo {
  id        String  @id @default(cuid())
  firstName String
  lastName  String
  email     String
  phone     String
  location  String
  linkedin  String?
  website   String?
  summary   String  @db.Text // Use Text for potentially longer content

  resume   Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  resumeId String @unique // Each resume has one personal info
}

model EducationEntry {
  id           String    @id @default(cuid())
  institution  String
  degree       String
  field        String
  startDate    String
  endDate      String
  gpa          String?
  achievements String[]  @default([]) // Array of strings for bullet points

  resume   Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  resumeId String

  @@index([resumeId])
}

model ExperienceEntry {
  id                  String    @id @default(cuid())
  company             String
  position            String
  startDate           String
  endDate             String
  description         String    @db.Text
  enhancedDescription String?   @db.Text
  achievements        String[]  @default([])
  targetCompanyValues String?   // <<< ADDED FIELD
  resume   Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  resumeId String

  @@index([resumeId])
}

model SkillEntry {
  id       String @id @default(cuid())
  name     String
  level    String // Could be an Enum later if strict values are enforced
  category String // Could be an Enum later

  resume   Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  resumeId String

  @@index([resumeId])
  @@unique([resumeId, name]) // Optional: prevent duplicate skill names per resume
}

model ProjectEntry {
  id           String   @id @default(cuid())
  name         String
  description  String   @db.Text
  technologies String[] @default([])
  url          String?
  github       String?

  resume   Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  resumeId String

  @@index([resumeId])
}
</file>

<file path="tailwind.config.ts">
import type { Config } from 'tailwindcss'

const config: Config = {
  darkMode: ["class"], // This is crucial for the theme toggle
  content: [
    './pages/**/*.{ts,tsx}',
    './components/**/*.{ts,tsx}',
    './app/**/*.{ts,tsx}',
    './src/**/*.{ts,tsx}',
  ],
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          // DEFAULT: "hsl(var(--primary))", // We'll use gradient for buttons
          DEFAULT: "transparent", // Placeholder, primary buttons will be gradients
          foreground: "hsl(var(--primary-text))", 
        },
        secondary: {
          DEFAULT: "hsl(var(--muted))", // Using muted for secondary bg
          foreground: "hsl(var(--muted-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
        // Direct colors from your new landing page for gradients/specifics
        'theme-blue-600': '#2563EB',
        'theme-purple-600': '#7C3AED',
        'theme-blue-400': '#60A5FA',
        'theme-purple-400': '#A78BFA',
        'theme-pink-400': '#F472B6', // From landing page text gradient
      },
      borderRadius: {
        lg: "var(--radius)", // 0.75rem
        md: "calc(var(--radius) - 2px)", // 0.625rem
        sm: "calc(var(--radius) - 4px)", // 0.5rem
        xl: "calc(var(--radius) + 4px)", // 1rem (as seen in landing page buttons)
        '2xl': "calc(var(--radius) + 8px)", // 1.25rem
        '3xl': "calc(var(--radius) + 16px)", // 1.75rem (as seen in landing page sections)
      },
      backgroundImage: {
        'primary-gradient': 'linear-gradient(to right, hsl(var(--primary-gradient-start)), hsl(var(--primary-gradient-end)))',
      },
      keyframes: {
        "accordion-down": {
          from: { height: "0" },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: "0" },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
      },
    },
  },
  // eslint-disable-next-line @typescript-eslint/no-require-imports
  plugins: [require("tailwindcss-animate")],
}

export default config
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts", "app/api/resumes/[resumeId]/route.ts"],
  "exclude": ["node_modules"]
}
</file>

<file path="app/api/resumes/route.ts">
// app/api/resumes/route.ts
import { NextResponse } from 'next/server';
import { auth } from '@clerk/nextjs/server';
import { prisma } from '@/lib/db';
import { ResumeData } from '@/types/resume'; // Assuming your full ResumeData type

// POST handler (Create new resume)
export async function POST(request: Request) {
  try {
    const { userId } = await auth();
    if (!userId) {
      return new NextResponse('Unauthorized', { status: 401 });
    }

    // For body type, ensure it matches what the frontend sends for creation
    // Omitting fields that are auto-generated or derived on the backend.
    const body = await request.json() as Omit<ResumeData, 'id' | 'userId' | 'createdAt' | 'updatedAt' | 'atsScore'> & { title: string, atsScore?:number };
    
    const {
      title,
      personalInfo,
      education = [],
      experience = [],
      skills = [],
      projects = [],
      atsScore = 0 // Default ATS score from client or calculate here
    } = body;

    if (!title || !personalInfo) {
        return new NextResponse('Missing required fields (title or personalInfo)', { status: 400 });
    }

    const newResume = await prisma.resume.create({
      data: {
        userId,
        title,
        atsScore,
        personalInfo: { create: personalInfo },
        education: { create: education.map(edu => ({...edu, id: undefined})) },
        experience: { create: experience.map(exp => ({...exp, id: undefined})) },
        skills: { create: skills.map(skill => ({...skill, id: undefined})) },
        projects: { create: projects.map(proj => ({...proj, id: undefined})) },
      },
      include: { 
        personalInfo: true, education: true, experience: true,
        skills: true, projects: true,
      },
    });

    return NextResponse.json(newResume, { status: 201 });
  } catch (error) {
    console.error('[RESUMES_POST_API]', error);
    return new NextResponse('Internal Server Error', { status: 500 });
  }
}

// GET handler (Get all resumes for the user)
export async function GET() { // request parameter is optional if not used
  try {
    const { userId } = await auth();
    if (!userId) {
      return new NextResponse('Unauthorized', { status: 401 });
    }

    const resumes = await prisma.resume.findMany({
      where: {
        userId: userId,
      },
      orderBy: {
        updatedAt: 'desc',
      },
      select: { // Select only necessary fields for the dashboard list
        id: true,
        title: true,
        atsScore: true,
        updatedAt: true,
        // Add 'status' if it's in your Prisma model
      }
    });

    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const resumesWithStatus = resumes.map((r: any) => ({
        ...r,
        status: r.atsScore > 70 ? 'completed' : 'draft' as 'completed' | 'draft' 
    }));

    return NextResponse.json(resumesWithStatus);

  } catch (error) {
    console.error('[RESUMES_GET_ALL_API]', error); // Changed log identifier
    return new NextResponse('Internal Server Error', { status: 500 });
  }
}
</file>

<file path="app/globals.css">
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%; /* Light theme background (white) */
    --foreground: 224 71.4% 4.1%; /* Light theme text (near black) */

    --muted: 220 14.3% 95.9%; /* Light theme muted bg (light gray) */
    --muted-foreground: 220 8.9% 46.1%; /* Light theme muted text */

    --popover: 0 0% 100%;
    --popover-foreground: 224 71.4% 4.1%;

    --card: 0 0% 100%;
    --card-foreground: 224 71.4% 4.1%;

    --border: 220 13% 91%; /* Light theme border (gray-200) */
    --input: 220 13% 91%; /* Light theme input border */

    --primary-gradient-start: 217 91% 60%; /* blue-600 */
    --primary-gradient-end: 262 83% 58%; /* purple-600 */
    
    --primary-text: 0 0% 100%; /* Text on primary gradient buttons */

    --accent: 220 14.3% 95.9%; /* Light theme accent (e.g., hover) */
    --accent-foreground: 224 71.4% 4.1%;

    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;

    --ring: 224 71.4% 4.1%;
    --radius: 0.75rem; /* Keep your existing radius */
  }

  .dark {
    --background: 222.2 84% 4.9%; /* Dark theme background (gray-900) */
    --foreground: 210 20% 98%; /* Dark theme text (near white) */

    --muted: 215 27.9% 16.9%; /* Dark theme muted bg (gray-800) */
    --muted-foreground: 217.9 10.6% 64.9%; /* Dark theme muted text (gray-300/400) */

    --popover: 222.2 84% 4.9%;
    --popover-foreground: 210 20% 98%;

    --card: 215 27.9% 16.9%; /* Dark theme card bg (gray-800/50) - adjust if using transparency */
    /* For bg-gray-800/50, you might need to apply opacity directly or use a solid color */
    /* Using a solid near equivalent for now */
    /* --card: 222.2 47.4% 11.2%; /* slate-800 */


    --card-foreground: 210 20% 98%;

    --border: 215 20.2% 25.1%; /* Dark theme border (gray-700) */
    --input: 215 20.2% 25.1%; /* Dark theme input border */
    
    /* Primary gradient is often the same, text on it might differ if needed */
    /* --primary-gradient-start: 217 91% 60%; */
    /* --primary-gradient-end: 262 83% 58%; */
    /* --primary-text: 0 0% 100%; */

    --accent: 215 27.9% 16.9%; /* Dark theme accent */
    --accent-foreground: 210 20% 98%;

    /* Destructive etc. can be kept or adjusted */
  }
}

@layer base {
  body {
    @apply bg-background text-foreground;
    font-feature-settings: "rlig" 1, "calt" 1;
    min-height: 100vh;
  }
}

/* Custom Scrollbar (as before, check if it needs theme adjustments) */
.styled-scrollbar::-webkit-scrollbar {
  width: 8px;
}
.styled-scrollbar::-webkit-scrollbar-track {
  /* Consider theming this too */
  background: hsl(var(--muted) / 0.5); 
  border-radius: 10px;
}
.styled-scrollbar::-webkit-scrollbar-thumb {
  /* Use primary gradient colors */
  background: linear-gradient(to bottom, hsl(var(--primary-gradient-start)), hsl(var(--primary-gradient-end)));
  border-radius: 10px;
}
.styled-scrollbar::-webkit-scrollbar-thumb:hover {
  background: linear-gradient(to bottom, hsl(var(--primary-gradient-start) / 0.8), hsl(var(--primary-gradient-end) / 0.8));
}

/* Remove old gradient-border and animate-glow if not used by new landing page */
.animate-glow {
  /* animation: glow 2s ease-in-out infinite; */ /* If you still need it */
}

@keyframes glow {
  /* 0%, 100% { opacity: 1; } */
  /* 50% { opacity: 0.5; } */
}
</file>

<file path="app/layout.tsx">
// app/layout.tsx
import './globals.css'
import type { Metadata } from 'next'
import { Inter } from 'next/font/google'
import { ClerkProvider } from '@clerk/nextjs'
import { dark } from '@clerk/themes';
import { ThemeProvider } from '@/context/theme-provider';

const inter = Inter({ subsets: ['latin'] })

export const metadata: Metadata = {
  title: 'GetHired - AI-Powered Resume Builder',
  description: 'Build ATS-optimized resumes with AI assistance. Land interviews 3x faster with GetHired.',
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <ClerkProvider
      appearance={{
        baseTheme: dark,
        variables: {
          colorPrimary: '#6366F1',
          colorBackground: '#111827',
          colorInputBackground: '#1F2937',
          colorInputText: '#F3F4F6',
          borderRadius: '0.75rem',
        },
        elements: {
          card: 'bg-gray-800 border-gray-700 shadow-2xl',
          formButtonPrimary: 'bg-gradient-to-r from-theme-blue-600 to-theme-purple-600 hover:opacity-90',
          footerActionLink: 'text-purple-400 hover:text-purple-300'
        }
      }}
    >
      {/* Ensure NO WHITESPACE directly inside <html> before <body> */}
      <html lang="en" suppressHydrationWarning>
        <body className={`${inter.className} antialiased`}>
          <ThemeProvider>
            {children}
          </ThemeProvider>
        </body>
      </html>
    </ClerkProvider>
  )
}
</file>

<file path="components/resume/ats-score-display.tsx">
/* eslint-disable @typescript-eslint/no-unused-vars */
// components/resume/ats-score-display.tsx
import React, { useEffect, useState, useMemo } from 'react';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Target, Zap, CheckCircle, AlertTriangle, Info, Loader2 } from 'lucide-react'; // Added Loader2
import { Progress } from '@/components/ui/progress';
import { 
    ATSScoreDetails, 
    ResumeData, 
    PersonalInfo, 
    EducationEntry, 
    ExperienceEntry, 
    SkillEntry, 
    ProjectEntry 
} from '@/types/resume';
import { useShallowResumeSelector } from '@/hooks/useShallowResumeSelector';
import { useResumeStore } from '@/hooks/use-resume';
import { useDebouncedCallback } from 'use-debounce';

// calculateMockAtsScoreDetails function aligned with ATSScoreDetails type
const calculateMockAtsScoreDetails = (data: {
    personalInfo?: PersonalInfo;
    education?: EducationEntry[];
    experience?: ExperienceEntry[];
    skills?: SkillEntry[];
    projects?: ProjectEntry[];
}): ATSScoreDetails => {
    let overall = 0;
    const suggestions: string[] = [];
    
    // Initialize breakdown scores
    let keywordsScore = 0;
    let clarityAndConcisenessScore = 0;
    let actionVerbsScore = 0; // Assuming some logic for this, mocking for now
    let quantifiableResultsScore = 0;
    // eslint-disable-next-line prefer-const
    let formattingAndStructureScore = 70; // Mocked
    let lengthAndRelevanceScore = 40; // Mocked


    if (data.personalInfo?.summary && data.personalInfo.summary.length > 10) clarityAndConcisenessScore += 10;
    if (data.personalInfo?.summary && data.personalInfo.summary.length > 50) {
        overall += 15;
        clarityAndConcisenessScore += 15;
    } else if (data.personalInfo?.summary !== undefined) {
        suggestions.push("Expand your professional summary for better clarity and impact.");
    }

    if (data.experience && data.experience.length > 0) {
        overall += 20;
        lengthAndRelevanceScore = Math.max(lengthAndRelevanceScore, 60); // Increase if experience exists
    } else if (data.experience !== undefined) {
        suggestions.push("Add at least one work experience entry.");
    }
    
    let hasActionVerbs = false;
    let hasQuantifiedResults = false;
    data.experience?.forEach((exp) => {
        if (exp.description && exp.description.length > 30) overall += 3; // Small increment for description
        // Simple check for action verbs (very basic)
        if (/(led|managed|developed|created|implemented|achieved|increased|reduced)/i.test(exp.description || '')) {
            hasActionVerbs = true;
        }
        // Simple check for quantified results (very basic)
        if (/\d+%?/.test(exp.description || '') || (exp.achievements && exp.achievements.some(ach => /\d+%?/.test(ach)))) {
            hasQuantifiedResults = true;
            quantifiableResultsScore += 10;
            overall += 7; // Higher increment for quantified results
        }
        if (exp.achievements && exp.achievements.length > 0) {
            overall += 5;
            quantifiableResultsScore += 5 * exp.achievements.length; // More for more achievements
        }
    });

    if (hasActionVerbs) actionVerbsScore = Math.max(actionVerbsScore, 60); else suggestions.push("Use strong action verbs in your experience descriptions.");
    if (hasQuantifiedResults) quantifiableResultsScore = Math.max(quantifiableResultsScore, 70); else suggestions.push("Quantify your achievements with numbers and data where possible.");


    if (data.skills && data.skills.length > 0) keywordsScore += 5 * Math.min(data.skills.length, 5); // Basic score for skills
    if (data.skills && data.skills.length > 2) overall += 15;
    else if (data.skills !== undefined) suggestions.push("List more relevant skills (aim for 5-10 key skills).");

    if (data.education && data.education.length > 0) overall += 10;
    else if (data.education !== undefined) suggestions.push("Add your educational background.");
    
    const commonKeywords = ["developed", "managed", "led", "javascript", "python", "aws", "react", "node.js", "project management", "data analysis"];
    let foundKeywordsCount = 0;
    const resumeText = JSON.stringify(data).toLowerCase();
    commonKeywords.forEach(kw => {
        if(resumeText.includes(kw)) foundKeywordsCount++;
    });
    keywordsScore += Math.min(foundKeywordsCount * 3, 30); // Add to keyword score
    overall += Math.min(foundKeywordsCount * 2, 20); // Add to overall score

    // Cap individual scores
    keywordsScore = Math.min(keywordsScore, 100);
    clarityAndConcisenessScore = Math.min(clarityAndConcisenessScore, 100);
    actionVerbsScore = Math.min(actionVerbsScore, 100);
    quantifiableResultsScore = Math.min(quantifiableResultsScore, 100);
    if (data.experience && data.experience.length > 1) lengthAndRelevanceScore = Math.max(lengthAndRelevanceScore, 80);


    overall = Math.min(Math.max(overall, 0), 100); // Cap overall score

    if (overall < 60 && data.experience !== undefined) suggestions.push("Review experience descriptions for impact and clarity.");
    if (overall < 75 && keywordsScore < 50 && data.skills !== undefined) suggestions.push("Ensure your resume includes keywords relevant to your target roles.");

    return {
        overall,
        breakdown: {
            keywords: { score: keywordsScore, suggestions: keywordsScore < 50 ? ["Add more relevant industry keywords."] : ["Good keyword presence."] },
            clarityAndConciseness: { score: clarityAndConcisenessScore, suggestions: clarityAndConcisenessScore < 60 ? ["Ensure your summary and descriptions are clear and concise."] : [] },
            actionVerbs: { score: actionVerbsScore, suggestions: actionVerbsScore < 60 ? ["Incorporate more strong action verbs at the start of your bullet points."] : [] },
            quantifiableResults: { score: quantifiableResultsScore, suggestions: quantifiableResultsScore < 60 ? ["Try to quantify more of your achievements with specific numbers or data."] : [] },
           formattingAndConciseness: { score: formattingAndStructureScore, suggestions: formattingAndStructureScore < 70 ? ["Review for consistent formatting and clear sectioning."] : [] },
            lengthAndRelevance: { score: lengthAndRelevanceScore, suggestions: lengthAndRelevanceScore < 60 ? ["Ensure resume length is appropriate and content is relevant."] : [] }
        },
        suggestions: suggestions.slice(0, 3).filter(s => s) // Filter out any empty suggestions
    };
};


const AtsScoreDisplay: React.FC = () => {
  const { 
    personalInfo, 
    education, 
    experience, 
    skills, 
    projects, 
    setAtsScore: setStoreAtsScore 
  } = useShallowResumeSelector();

  const memoizedResumeData = useMemo(() => ({
    personalInfo, education, experience, skills, projects
  }), [personalInfo, education, experience, skills, projects]);

  const [atsDetails, setAtsDetails] = useState<ATSScoreDetails>(() => calculateMockAtsScoreDetails({})); // Initialize with mock for empty
  const [isLoadingScore, setIsLoadingScore] = useState(false);

  const debouncedFetchAtsScore = useDebouncedCallback(
    async (dataForApi: typeof memoizedResumeData) => {
      const isPersonalInfoEmpty = !dataForApi.personalInfo || Object.values(dataForApi.personalInfo).every(val => val === '' || val === undefined);
      const isExperienceEmpty = !dataForApi.experience || dataForApi.experience.length === 0;

      if (isPersonalInfoEmpty && isExperienceEmpty && (!dataForApi.skills || dataForApi.skills.length === 0)) {
          const defaultEmptyScore = calculateMockAtsScoreDetails({}); // Use the mock for truly empty
          setAtsDetails(defaultEmptyScore);
          const currentGlobalScore = useResumeStore.getState().atsScore;
          if (currentGlobalScore !== defaultEmptyScore.overall) {
              setStoreAtsScore(defaultEmptyScore.overall);
          }
          setIsLoadingScore(false);
          return;
      }

      setIsLoadingScore(true);
      try {
        const response = await fetch('/api/ai/ats-score', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(dataForApi),
        });
        if (!response.ok) {
          const errorText = await response.text(); // Get raw error text
          console.error("ATS API Error Response:", errorText);
          throw new Error(`API error: ${response.status} - ${errorText.substring(0,100)}`); // Limit error message length
        }
        const newDetails: ATSScoreDetails = await response.json();
        setAtsDetails(newDetails);
        
        const currentGlobalScore = useResumeStore.getState().atsScore;
        if (newDetails.overall !== currentGlobalScore) {
          setStoreAtsScore(newDetails.overall);
        }

      } catch (error) {
        console.error("Error fetching ATS score:", error);
        setAtsDetails(prev => ({ // Provide a sensible fallback based on previous state or a generic error state
            ...calculateMockAtsScoreDetails(dataForApi), // Recalculate mock based on current data as fallback
            overall: Math.max(0, prev.overall - 5), // Slightly degrade score
            suggestions: ["AI analysis failed. Displaying estimated score.", (error as Error).message.substring(0,100) ],
        }));
      } finally {
        setIsLoadingScore(false);
      }
    }, 
    1500
  );

  useEffect(() => {
    if (memoizedResumeData) { // Check if memoizedResumeData is not undefined
        debouncedFetchAtsScore(memoizedResumeData);
    }
  }, [memoizedResumeData, debouncedFetchAtsScore]);

  const score = atsDetails.overall;

  const getScoreColor = (s: number) => {
    if (s >= 80) return 'text-green-400';
    if (s >= 60) return 'text-yellow-400';
    return 'text-red-400';
  };
  
  const getScoreRingColor = (s: number) => {
    if (s >= 80) return 'ring-green-500';
    if (s >= 60) return 'ring-yellow-500';
    return 'ring-red-500';
  };

  const getScoreFeedback = (s: number) => {
    if (s >= 80) return { text: 'Excellent!', icon: <CheckCircle className="w-5 h-5 text-green-400" /> };
    if (s >= 60) return { text: 'Good Foundation', icon: <Info className="w-5 h-5 text-yellow-400" /> };
    return { text: 'Needs Improvement', icon: <AlertTriangle className="w-5 h-5 text-red-400" /> };
  };

  const feedback = getScoreFeedback(score);

  return (
    <Card className="bg-slate-800/50 border border-slate-700 backdrop-blur-sm shadow-xl sticky top-24">
      <CardHeader className="pb-3">
        <div className="flex items-center justify-between">
            <CardTitle className="text-lg font-semibold text-white flex items-center">
            ATS Score {isLoadingScore && <Loader2 className="w-4 h-4 ml-2 inline animate-spin" />}
            </CardTitle>
            <Target className="h-6 w-6 text-purple-400" />
        </div>
        <CardDescription className="text-xs text-gray-400 pt-1">
            Real-time AI-powered analysis of your resume.
        </CardDescription>
      </CardHeader>
      <CardContent className="pt-2">
        <div className="flex flex-col items-center justify-center my-6">
            <div className={`relative w-32 h-32 rounded-full flex items-center justify-center border-4 ${getScoreRingColor(score)} bg-slate-700/30`}>
                <span className={`text-4xl font-bold ${getScoreColor(score)}`}>
                    {score}
                </span>
                <span className={`absolute top-1/2 left-1/2 -translate-x-1/2 translate-y-5 text-lg font-medium ${getScoreColor(score)}`}>%</span>
            </div>
            <div className="flex items-center mt-4">
                {feedback.icon}
                <p className={`ml-2 text-md font-medium ${getScoreColor(score)}`}>
                    {feedback.text}
                </p>
            </div>
        </div>
        
        <Progress value={score} className="h-1.5 mb-6" />

        <div className="space-y-3">
            <h4 className="text-sm font-semibold text-gray-200 flex items-center">
                <Zap size={16} className="mr-2 text-yellow-400"/>
                AI Suggestions:
            </h4>
            {atsDetails.suggestions && atsDetails.suggestions.length > 0 ? (
                <ul className="list-disc list-inside text-xs text-gray-300 space-y-1.5 pl-1">
                    {atsDetails.suggestions.map((suggestion, index) => (
                        <li key={index}>{suggestion}</li>
                    ))}
                </ul>
            ) : (
                <p className="text-xs text-gray-400 italic">No specific suggestions at this score, or analysis pending.</p>
            )}
        </div>
        {atsDetails.breakdown && (
            <div className="mt-4 pt-3 border-t border-slate-700/50">
                 <h5 className="text-xs font-semibold text-gray-300 mb-1.5">Score Breakdown:</h5>
                 <ul className="text-xs text-gray-400 space-y-1">
                    {Object.entries(atsDetails.breakdown).map(([key, value]) => {
                        // Type guard to ensure value is an object with score and suggestions
                        if (value && typeof value === 'object' && 'score' in value && 'suggestions' in value) {
                            const typedValue = value as { score: number; suggestions: string[] }; // Assert type
                            // Create a more readable key
                            const displayKey = key.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase());
                            return (
                                <li key={key} className="flex justify-between items-center">
                                    <span>{displayKey}:</span>
                                    <span className={getScoreColor(typedValue.score)}>{typedValue.score}%</span>
                                </li>
                            );
                        }
                        return null;
                    })}
                 </ul>
            </div>
        )}
      </CardContent>
    </Card>
  );
};

export default AtsScoreDisplay;
</file>

<file path="components/resume/sections/experience.tsx">
/* eslint-disable @typescript-eslint/no-unused-vars */
'use client';
import React, { useEffect, useState } from 'react';
import { useForm, useFieldArray, Controller } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import * as z from 'zod';
import { useResumeStore } from '@/hooks/use-resume';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { Button } from '@/components/ui/button';
// eslint-disable-next-line @typescript-eslint/no-unused-vars
import { ExperienceEntry } from '@/types/resume';
import { PlusCircle, Trash2, Sparkles, CalendarDays, Target } from 'lucide-react'; // Added Target icon

const experienceEntrySchema = z.object({
  id: z.string(),
  company: z.string().min(1, "Company name is required"),
  position: z.string().min(1, "Position/Title is required"),
  startDate: z.string().min(4, "Start date is required"),
  endDate: z.string().min(4, "End date is required (or Present)"),
  description: z.string().min(10, "Description must be at least 10 characters").max(2000, "Description too long."),
  achievements: z.string().optional(), // Storing as single string for textarea
  targetCompanyValues: z.string().optional(), // <<< NEW FIELD
});

const experienceSchema = z.object({
  experience: z.array(experienceEntrySchema),
});

type ExperienceFormData = z.infer<typeof experienceSchema>;

const ExperienceSection: React.FC = () => {
  const { experience, updateExperience: updateStoreExperience, addExperience: addStoreExperience, removeExperience: removeStoreExperience } = useResumeStore();
  const [enhancingIndex, setEnhancingIndex] = useState<number | null>(null);
  const resumeTitle = useResumeStore(state => state.title);

  const { control, register, handleSubmit, watch, setValue, formState: { errors } } = useForm<ExperienceFormData>({
    resolver: zodResolver(experienceSchema),
    defaultValues: { experience: experience.map(exp => ({ ...exp, achievements: exp.achievements?.join('\n'), targetCompanyValues: exp.targetCompanyValues || '' })) }, // Added targetCompanyValues
  });

  const { fields, append, remove } = useFieldArray({
    control,
    name: "experience",
  });

  useEffect(() => {
    const subscription = watch((value) => {
      if (value.experience) {
        value.experience.forEach((expData, index) => {
          if (expData) {
            const achievementsArray = expData.achievements?.split('\n').filter(ach => ach.trim() !== '');
            // Also ensure targetCompanyValues is passed to the store if needed, or handle directly from RHF
            updateStoreExperience(index, { ...expData, achievements: achievementsArray });
          }
        });
      }
    });
    return () => subscription.unsubscribe();
  }, [watch, updateStoreExperience]);

  const handleAddExperience = () => {
    const newId = addStoreExperience(); // Get the ID from the store action
    append({
      id: newId, // Use the ID from the store
      company: '',
      position: '',
      startDate: '',
      endDate: '',
      description: '',
      achievements: '',
      targetCompanyValues: '' // <<< NEW FIELD
    });
  };

  const handleRemoveExperience = (index: number) => {
    const expIdToRemove = fields[index].id;
    removeStoreExperience(expIdToRemove);
    remove(index);
  };

  const handleAiEnhance = async (index: number) => {
    setEnhancingIndex(index);
    const currentEntry = watch(`experience.${index}`);

    if (!currentEntry || !currentEntry.description) {
      alert("Please provide a description for the experience entry first.");
      setEnhancingIndex(null);
      return;
    }

    try {
      const response = await fetch('/api/ai/enhance-experience', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          description: currentEntry.description,
          achievements: currentEntry.achievements?.split('\n').filter(ach => ach.trim() !== ''),
          title: resumeTitle,
          jobTitle: currentEntry.position, // Using current position as jobTitle for context
          targetCompanyValues: currentEntry.targetCompanyValues || '', // <<< PASS NEW FIELD
        }),
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(errorData.message || `AI enhancement failed: ${response.statusText}`);
      }

      const enhancedData = await response.json();

      setValue(`experience.${index}.description`, enhancedData.enhancedDescription, { shouldDirty: true, shouldValidate: true });
      setValue(`experience.${index}.achievements`, enhancedData.suggestedAchievements.join('\n'), { shouldDirty: true, shouldValidate: true });
      alert("Experience enhanced! Review the changes and the suggested achievements.");

    } catch (error) {
      console.error("AI Enhancement error:", error);
      alert(`AI Enhancement failed: ${error instanceof Error ? error.message : String(error)}`);
    } finally {
      setEnhancingIndex(null);
    }
  };

  return (
    <form className="space-y-8">
      <div className="flex justify-between items-center border-b border-white/10 pb-3 mb-6">
        <h2 className="text-2xl font-semibold text-white">Work Experience</h2>
        <Button type="button" variant="outline" size="sm" onClick={handleAddExperience} className="text-white border-white/20 hover:bg-white/10">
          <PlusCircle className="w-4 h-4 mr-2" />
          Add Experience
        </Button>
      </div>

      {fields.map((item, index) => (
        <div key={item.id} className="p-6 bg-slate-800/50 border border-slate-700 rounded-lg space-y-6 relative">
           <Button
            type="button"
            variant="ghost"
            size="icon"
            onClick={() => handleRemoveExperience(index)}
            className="absolute top-3 right-3 text-red-400 hover:text-red-300 hover:bg-red-500/20"
          >
            <Trash2 className="w-4 h-4" />
          </Button>

          <input type="hidden" {...register(`experience.${index}.id`)} />

          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <Label htmlFor={`experience.${index}.company`}>Company Name</Label>
              <Input id={`experience.${index}.company`} {...register(`experience.${index}.company`)} placeholder="e.g., Tech Solutions Inc." />
              {errors.experience?.[index]?.company && <p className="text-red-400 text-xs mt-1">{errors.experience[index]?.company?.message}</p>}
            </div>
            <div>
              <Label htmlFor={`experience.${index}.position`}>Position / Title</Label>
              <Input id={`experience.${index}.position`} {...register(`experience.${index}.position`)} placeholder="e.g., Software Engineer" />
              {errors.experience?.[index]?.position && <p className="text-red-400 text-xs mt-1">{errors.experience[index]?.position?.message}</p>}
            </div>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <Label htmlFor={`experience.${index}.startDate`}>Start Date</Label>
              <div className="relative">
                <Input id={`experience.${index}.startDate`} {...register(`experience.${index}.startDate`)} placeholder="YYYY-MM" />
                <CalendarDays className="absolute right-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" />
              </div>
              {errors.experience?.[index]?.startDate && <p className="text-red-400 text-xs mt-1">{errors.experience[index]?.startDate?.message}</p>}
            </div>
            <div>
              <Label htmlFor={`experience.${index}.endDate`}>End Date (or &quot;Present&quot;)</Label>
               <div className="relative">
                <Input id={`experience.${index}.endDate`} {...register(`experience.${index}.endDate`)} placeholder="YYYY-MM or Present" />
                <CalendarDays className="absolute right-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" />
              </div>
              {errors.experience?.[index]?.endDate && <p className="text-red-400 text-xs mt-1">{errors.experience[index]?.endDate?.message}</p>}
            </div>
          </div>

          {/* Target Company Values Input */}
          <div>
            <Label htmlFor={`experience.${index}.targetCompanyValues`}>
                Target Company Keywords/Values (Optional)
            </Label>
            <div className="relative">
                <Input
                    id={`experience.${index}.targetCompanyValues`}
                    {...register(`experience.${index}.targetCompanyValues`)}
                    placeholder="e.g., innovation, customer-centric, agile, specific tech stack"
                    className="pl-10"
                />
                <Target className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" />
            </div>
            <p className="text-xs text-gray-400 mt-1">
                Provide comma-separated keywords or values important to the company you&apos;re targeting with this experience.
            </p>
          </div>


          <div>
            <div className="flex justify-between items-center mb-1.5">
                <Label htmlFor={`experience.${index}.description`}>Key Responsibilities</Label>
                <Button
                    type="button"
                    variant="ghost"
                    size="sm"
                    onClick={() => handleAiEnhance(index)}
                    disabled={enhancingIndex === index} // Disable button while enhancing this specific entry
                    className="text-purple-400 hover:text-purple-300 text-xs p-1"
                  >
                    {enhancingIndex === index ? (
                        <Sparkles className="w-3.5 h-3.5 mr-1 animate-spin" />
                    ) : (
                        <Sparkles className="w-3.5 h-3.5 mr-1" />
                    )}
                    AI Enhance Description & Achievements
                </Button>
            </div>
            <Textarea
              id={`experience.${index}.description`}
              {...register(`experience.${index}.description`)}
              rows={4}
              placeholder="Describe your role and key contributions. Start sentences with action verbs."
            />
            {errors.experience?.[index]?.description && <p className="text-red-400 text-xs mt-1">{errors.experience[index]?.description?.message}</p>}
          </div>

          <div>
            <Label htmlFor={`experience.${index}.achievements`}>Quantifiable Achievements (Optional - one per line)</Label>
            <Textarea
              id={`experience.${index}.achievements`}
              {...register(`experience.${index}.achievements`)}
              rows={3}
              placeholder="e.g., Increased sales by 15% in Q3., Led a team of 5 developers."
            />
             <p className="text-xs text-gray-400 mt-1">The AI can help generate or refine these based on your description above.</p>
          </div>
        </div>
      ))}
      {fields.length === 0 && (
        <p className="text-center text-gray-400 py-4">No work experience entries added yet. Click &quot;Add Experience&quot; to start.</p>
      )}
    </form>
  );
};

export default ExperienceSection;
</file>

<file path="hooks/useShallowResumeSelector.ts">
// hooks/useShallowResumeSelector.ts
import { useSyncExternalStoreWithSelector } from 'use-sync-external-store/with-selector';
import { shallow } from 'zustand/shallow';
import { useResumeStore, ResumeStateStore } from './use-resume'; // Your main store

// Define the shape of the data selected by this general-purpose hook
export interface ShallowSelectedResumeParts {
  id?: ResumeStateStore['id'];
  userId: ResumeStateStore['userId'];
  title: ResumeStateStore['title'];
  personalInfo: ResumeStateStore['personalInfo'];
  education: ResumeStateStore['education'];
  experience: ResumeStateStore['experience'];
  skills: ResumeStateStore['skills'];
  projects: ResumeStateStore['projects'];
  atsScore: ResumeStateStore['atsScore'];
  
  // Actions
  loadResume: ResumeStateStore['loadResume'];
  resetResume: ResumeStateStore['resetResume'];
  setTitle: ResumeStateStore['setTitle'];
  setAtsScore: ResumeStateStore['setAtsScore'];
  updatePersonalInfo: ResumeStateStore['updatePersonalInfo']; // Added

  // Education Actions - ADDED
  addEducation: ResumeStateStore['addEducation'];
  updateEducation: ResumeStateStore['updateEducation'];
  removeEducation: ResumeStateStore['removeEducation'];

  // Experience Actions - ADDED
  addExperience: ResumeStateStore['addExperience'];
  updateExperience: ResumeStateStore['updateExperience'];
  removeExperience: ResumeStateStore['removeExperience'];

  // Skills Actions - ADDED
  addSkill: ResumeStateStore['addSkill'];
  updateSkill: ResumeStateStore['updateSkill'];
  removeSkill: ResumeStateStore['removeSkill'];

  // Projects Actions - ADDED
  addProject: ResumeStateStore['addProject'];
  updateProject: ResumeStateStore['updateProject'];
  removeProject: ResumeStateStore['removeProject'];
}

export function useShallowResumeSelector(): ShallowSelectedResumeParts {
  const selector = (state: ResumeStateStore): ShallowSelectedResumeParts => ({
    id: state.id,
    userId: state.userId,
    title: state.title,
    personalInfo: state.personalInfo,
    education: state.education,
    experience: state.experience,
    skills: state.skills,
    projects: state.projects,
    atsScore: state.atsScore,
    loadResume: state.loadResume,
    resetResume: state.resetResume,
    setTitle: state.setTitle,
    setAtsScore: state.setAtsScore,
    updatePersonalInfo: state.updatePersonalInfo, // Added

    // Education Actions - ADDED
    addEducation: state.addEducation,
    updateEducation: state.updateEducation,
    removeEducation: state.removeEducation,

    // Experience Actions - ADDED
    addExperience: state.addExperience,
    updateExperience: state.updateExperience,
    removeExperience: state.removeExperience,

    // Skills Actions - ADDED
    addSkill: state.addSkill,
    updateSkill: state.updateSkill,
    removeSkill: state.removeSkill,

    // Projects Actions - ADDED
    addProject: state.addProject,
    updateProject: state.updateProject,
    removeProject: state.removeProject,
  });

  const storeApi = useResumeStore; 

  return useSyncExternalStoreWithSelector(
    storeApi.subscribe,
    storeApi.getState,
    storeApi.getState, 
    selector,
    shallow
  );
}
</file>

<file path="README.md">
````markdown
# GetHired

**AI-Powered, ATS-Optimized Resume Builder**

GetHired combines the latest in AI with professional templates and real-time feedback to help you craft resumes that get noticed.

---

## Table of Contents

- [Features](#features)
- [Tech Stack](#tech-stack)
- [Prerequisites](#prerequisites)
- [Getting Started](#getting-started)
  - [1. Clone the Repo](#1-clone-the-repo)
  - [2. Install Dependencies](#2-install-dependencies)
  - [3. Configure Environment](#3-configure-environment)
  - [4. Database Setup](#4-database-setup)
  - [5. Run the Dev Server](#5-run-the-dev-server)
- [Production Build](#production-build)
- [Linting](#linting)
- [Deployment](#deployment)
- [Resources](#resources)
- [License](#license)

---

## Features

- **AI-Powered Content Generation:** Summaries, experience bullets, project descriptions
- **Real-Time ATS Scoring & Feedback:** Ensure keyword optimization and formatting standards
- **Multi-Step Builder:** Guided form flow for personal info, experience, education, skills
- **Live Preview & PDF Export:** See changes instantly and download a print-ready PDF
- **User Dashboard:** Save, edit, and manage multiple resumes
- **Dark/Light Mode:** Switch themes to reduce eye strain

## Tech Stack

- **Framework:** Next.js (App Router)
- **Language:** TypeScript
- **AI Engine:** Google Gemini
- **Auth:** Clerk
- **ORM:** Prisma (PostgreSQL)
- **Styling:** Tailwind CSS
- **State:** Zustand
- **Forms & Validation:** React Hook Form + Zod

## Prerequisites

- Node.js v18+ and npm/yarn/pnpm
- Git
- Access to a PostgreSQL database
- API keys for:
  - Google Gemini
  - Clerk

## Getting Started

### 1. Clone the Repo

```bash
git clone https://github.com/your-username/resumeai-pro.git
cd resumeai-pro
````

### 2. Install Dependencies

```bash
# npm
npm install
# or yarn
yarn install
# or pnpm
pnpm install
```

### 3. Configure Environment

Create a `.env.local` file at the project root:

```env
# Clerk
NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=pk_test_xxx
CLERK_SECRET_KEY=sk_test_xxx
NEXT_PUBLIC_CLERK_SIGN_IN_URL=/sign-in
NEXT_PUBLIC_CLERK_SIGN_UP_URL=/sign-up
NEXT_PUBLIC_CLERK_AFTER_SIGN_IN_URL=/dashboard
NEXT_PUBLIC_CLERK_AFTER_SIGN_UP_URL=/dashboard

# PostgreSQL
DATABASE_URL="postgresql://USER:PASSWORD@HOST:PORT/DATABASE?schema=public"
# (Optional) DIRECT_URL for pooling
# DIRECT_URL="postgresql://USER:PASSWORD@HOST:PORT/DATABASE"

# Google Gemini
GEMINI_API_KEY=your_gemini_api_key
```

> **Tip:** Keep your keys secure and never commit `.env.local` to version control.

### 4. Database Setup

```bash
# Generate and apply migrations
npx prisma migrate dev --name init
# (Optional) Preview in Prisma Studio
npx prisma studio
```

### 5. Run the Dev Server

```bash
npm run dev
# or yarn dev
# or pnpm dev
```

Open [http://localhost:3000](http://localhost:3000) in your browser.

## Production Build

```bash
npm run build
# or yarn build
# or pnpm build
```

This outputs an optimized build in the `.next` folder.

## Linting

```bash
npm run lint
# or yarn lint
# or pnpm lint
```

## Deployment

We recommend deploying on Vercel:

1. Push your code to GitHub
2. Import the repo in Vercel
3. Add environment variables in Vercel dashboard
4. Vercel will auto-run `npm run build` and deploy

*For other platforms, see [Next.js deployment docs](https://nextjs.org/docs/deployment).*

## Resources

* [Next.js Documentation](https://nextjs.org/docs)
* [Prisma Docs](https://www.prisma.io/docs)
* [Clerk Quickstart](https://clerk.com/docs)
* [Tailwind CSS Guide](https://tailwindcss.com/docs)


```
```
</file>

<file path="components/landing/landing-page.tsx">
/* eslint-disable @typescript-eslint/no-unused-vars */
// components/landing/landing-page.tsx
"use client";
import React, { useState, useEffect } from 'react';
import Link from 'next/link';
import { useRouter } from 'next/navigation';
import { ArrowRight, Play, Star, Check, Users, Award, Clock, Shield, Moon, Sun, Sparkles, TrendingUp, Zap, Target } from 'lucide-react';
import { useTheme } from '@/context/theme-provider';
import SlidingCompanies from './sliding-company';

const LandingPageContent = () => {
  const [isVisible, setIsVisible] = useState(false);
  const [scrollY, setScrollY] = useState(0);
  const { theme, toggleTheme } = useTheme();
  const router = useRouter();

  useEffect(() => {
    setIsVisible(true);
    
    const handleScroll = () => setScrollY(window.scrollY);
    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, []);

  const isDark = theme === 'dark';

  const themeClasses = {
    bg: isDark ? 'bg-gray-900' : 'bg-white',
    bgAlt: isDark ? 'bg-gray-800' : 'bg-gray-50',
    text: isDark ? 'text-white' : 'text-gray-900',
    textMuted: isDark ? 'text-gray-300' : 'text-gray-600',
    textMuted2: isDark ? 'text-gray-400' : 'text-gray-500',
    border: isDark ? 'border-gray-700' : 'border-gray-200',
    cardBg: isDark ? 'bg-gray-800/50' : 'bg-white',
    accent: 'bg-gradient-to-r from-blue-600 to-indigo-600',
    accentHover: 'hover:from-blue-700 hover:to-indigo-700'
  };

  const handleWatchDemo = () => {
    alert("Watch Demo functionality to be implemented!");
  };

  return (
    <div className={`${themeClasses.bg} transition-colors duration-300 font-sans`}>
      {/* Navigation */}
      <nav className={`flex items-center justify-between px-4 sm:px-6 py-3 max-w-7xl mx-auto ${themeClasses.bg} backdrop-blur-md bg-opacity-90 sticky top-0 z-50 border-b ${themeClasses.border}`}>
        <Link href="/" className="flex items-center space-x-2">
          <div className="w-8 h-8 bg-gradient-to-br from-blue-600 to-indigo-600 rounded-lg flex items-center justify-center shadow-md">
            <Sparkles className="w-4 h-4 text-white" />
          </div>
          <span className="text-xl font-bold bg-gradient-to-r from-blue-600 to-indigo-600 bg-clip-text text-transparent">
            GetHired
          </span>
        </Link>
        
        <div className="hidden md:flex items-center space-x-6">
          <a href="#features" className={`${themeClasses.textMuted} hover:${themeClasses.text} transition-colors text-sm font-medium`}>Features</a>
          <a href="#pricing" className={`${themeClasses.textMuted} hover:${themeClasses.text} transition-colors text-sm font-medium`}>Pricing</a>
          <a href="#examples" className={`${themeClasses.textMuted} hover:${themeClasses.text} transition-colors text-sm font-medium`}>Examples</a>
          <a href="#testimonials" className={`${themeClasses.textMuted} hover:${themeClasses.text} transition-colors text-sm font-medium`}>Reviews</a>
        </div>
        
        <div className="flex items-center space-x-3">
          <button 
            onClick={toggleTheme}
            className={`p-2 rounded-md ${themeClasses.textMuted} hover:${themeClasses.text} transition-colors`}
            aria-label="Toggle theme"
          >
            {isDark ? <Sun className="w-4 h-4" /> : <Moon className="w-4 h-4" />}
          </button>
          <Link href="/sign-in" passHref>
            <button className={`${themeClasses.textMuted} hover:${themeClasses.text} text-sm font-medium transition-colors`}>
              Sign in
            </button>
          </Link>
          <Link href="/sign-up" passHref>
            <button className={`${themeClasses.accent} ${themeClasses.accentHover} text-white px-4 py-2 rounded-lg text-sm font-semibold transition-all duration-200 shadow-md hover:shadow-lg transform hover:-translate-y-0.5`}>
              Get Started
            </button>
          </Link>
        </div>
      </nav>

      {/* Hero Section */}
      <section className="max-w-7xl mx-auto px-4 sm:px-6 pt-16 pb-24 relative overflow-hidden">
        {/* Animated background elements */}
        <div className="absolute inset-0 overflow-hidden">
          <div className="absolute -top-40 -right-40 w-80 h-80 bg-blue-400/10 rounded-full blur-3xl animate-pulse"></div>
          <div className="absolute -bottom-40 -left-40 w-80 h-80 bg-indigo-400/10 rounded-full blur-3xl animate-pulse animation-delay-1000"></div>
        </div>
        
        <div className={`text-center transition-all duration-1000 relative z-10 ${isVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-8'}`}>
          {/* Status badge */}
          <div className={`inline-flex items-center ${isDark ? 'bg-emerald-900/20 text-emerald-300 border border-emerald-700/30' : 'bg-emerald-50 text-emerald-700 border border-emerald-200'} px-3 py-1.5 rounded-full text-xs font-medium mb-8 backdrop-blur-sm animate-fade-in-up`} style={{animationDelay: '0.2s'}}>
            <div className="w-1.5 h-1.5 bg-emerald-400 rounded-full mr-2 animate-pulse"></div>
            Trusted by 150,000+ professionals worldwide
          </div>
          
          {/* Main headline */}
          <div className="animate-fade-in-up" style={{animationDelay: '0.4s'}}>
            <h1 className={`text-4xl sm:text-5xl lg:text-6xl font-bold ${themeClasses.text} mb-6 leading-tight tracking-tight`}>
              Build resumes that
              <span className="block bg-gradient-to-r from-blue-600 via-indigo-600 to-purple-600 bg-clip-text text-transparent animate-gradient-x">
                dominate ATS systems
              </span>
            </h1>
          </div>
          
          {/* Subtitle */}
          <div className="animate-fade-in-up" style={{animationDelay: '0.6s'}}>
            <p className={`text-lg sm:text-xl ${themeClasses.textMuted} mb-10 max-w-2xl mx-auto leading-relaxed`}>
              AI-powered resume builder with advanced ATS optimization, real-time scoring, and templates designed by industry experts. Land interviews 3x faster.
            </p>
          </div>
          
          {/* CTA buttons */}
          <div className="flex flex-col sm:flex-row items-center justify-center space-y-4 sm:space-y-0 sm:space-x-4 mb-16 animate-fade-in-up" style={{animationDelay: '0.8s'}}>
            <Link href="/sign-up" passHref>
              <button className={`${themeClasses.accent} ${themeClasses.accentHover} text-white px-8 py-3.5 rounded-lg font-semibold flex items-center transition-all duration-200 shadow-lg hover:shadow-xl transform hover:-translate-y-1 group`}>
                Create Professional Resume
                <ArrowRight className="w-4 h-4 ml-2 group-hover:translate-x-1 transition-transform" />
              </button>
            </Link>
            <button 
              onClick={handleWatchDemo}
              className={`flex items-center ${themeClasses.textMuted} hover:${themeClasses.text} font-medium transition-colors group`}
            >
              <div className={`p-2.5 rounded-full ${isDark ? 'bg-white/10' : 'bg-gray-100'} backdrop-blur-sm mr-3 group-hover:bg-blue-50 transition-colors`}>
                <Play className="w-4 h-4" />
              </div>
              Watch Demo (2 min)
            </button>
          </div>

          {/* Stats grid */}
          <div className="grid grid-cols-2 lg:grid-cols-4 gap-4 sm:gap-6 max-w-4xl mx-auto animate-fade-in-up" style={{animationDelay: '1s'}}>
            {[
              { value: '97%', label: 'Interview Rate', icon: TrendingUp, color: 'text-emerald-500' },
              { value: '150K+', label: 'Resumes Created', icon: Users, color: 'text-blue-500' },
              { value: '4.9/5', label: 'User Rating', icon: Star, color: 'text-yellow-500' },
              { value: '90s', label: 'Build Time', icon: Zap, color: 'text-purple-500' }
            ].map((stat, index) => (
              <div key={index} className={`text-center p-4 sm:p-6 rounded-xl ${themeClasses.cardBg} backdrop-blur-sm border ${themeClasses.border} hover:border-blue-400/30 transition-all duration-300 hover:-translate-y-1 group`}>
                <stat.icon className={`w-5 h-5 ${stat.color} mx-auto mb-2 group-hover:scale-110 transition-transform`} />
                <div className={`text-2xl sm:text-3xl font-bold ${stat.color} mb-1`}>
                  {stat.value}
                </div>
                <div className={`text-xs sm:text-sm ${themeClasses.textMuted2} font-medium`}>
                  {stat.label}
                </div>
              </div>
            ))}
          </div>
        </div>
      </section>

      {/* Social Proof */}
      <section className={`${themeClasses.bgAlt} py-12 border-y ${themeClasses.border}`}>
        {/* <div className="max-w-7xl mx-auto px-4 sm:px-6">
          <p className={`text-center ${themeClasses.textMuted} mb-8 text-sm font-medium`}>
            Trusted by professionals at leading companies
          </p>
          <div className="flex flex-wrap items-center justify-center gap-8 sm:gap-12 opacity-60">
            {['Google', 'Microsoft', 'Apple', 'Amazon', 'Netflix', 'Meta'].map((company) => (
              <div key={company} className={`text-lg sm:text-xl font-bold ${themeClasses.text} hover:opacity-100 transition-opacity cursor-default`}>
                {company}
              </div>
            ))}
          </div>
        </div> */}
        <SlidingCompanies/>
      </section>

      {/* Features */}
      <section id="features" className="max-w-7xl mx-auto px-4 sm:px-6 py-20">
        <div className="text-center mb-16">
          <h2 className={`text-3xl sm:text-4xl font-bold ${themeClasses.text} mb-4 tracking-tight`}>
            Advanced Features for Modern Job Seekers
          </h2>
          <p className={`text-lg ${themeClasses.textMuted} max-w-2xl mx-auto`}>
            Enterprise-grade tools that give you the competitive edge in today&apos;s job market
          </p>
        </div>

        <div className="grid sm:grid-cols-2 lg:grid-cols-3 gap-6 lg:gap-8">
          {[
            {
              icon: Target,
              title: 'Advanced ATS Optimization',
              description: 'Bypass 99% of ATS filters with our proprietary scanning technology and keyword optimization engine.',
              iconColor: 'text-blue-600',
              bgColor: isDark ? 'bg-blue-600/10' : 'bg-blue-50'
            },
            {
              icon: Zap,
              title: 'AI Content Generation',
              description: 'Generate compelling bullet points and achievements using GPT-powered writing assistance.',
              iconColor: 'text-emerald-600',
              bgColor: isDark ? 'bg-emerald-600/10' : 'bg-emerald-50'
            },
            {
              icon: Award,
              title: 'Premium Templates',
              description: 'Access 50+ executive-level templates designed by Fortune 500 hiring managers.',
              iconColor: 'text-purple-600',
              bgColor: isDark ? 'bg-purple-600/10' : 'bg-purple-50'
            },
            {
              icon: TrendingUp,
              title: 'Real-Time Analytics',
              description: 'Live scoring system with detailed feedback on keyword density, formatting, and impact.',
              iconColor: 'text-orange-600',
              bgColor: isDark ? 'bg-orange-600/10' : 'bg-orange-50'
            },
            {
              icon: Check,
              title: 'Multi-Format Export',
              description: 'Export to PDF, Word, LinkedIn, and share via custom branded links with tracking.',
              iconColor: 'text-red-600',
              bgColor: isDark ? 'bg-red-600/10' : 'bg-red-50'
            },
            {
              icon: Star,
              title: 'Cover Letter Suite',
              description: 'AI-generated cover letters that perfectly complement your resume with consistent branding.',
              iconColor: 'text-yellow-600',
              bgColor: isDark ? 'bg-yellow-600/10' : 'bg-yellow-50'
            }
          ].map((feature, index) => (
            <div key={index} className={`p-6 rounded-xl ${themeClasses.cardBg} border ${themeClasses.border} hover:border-blue-400/30 transition-all duration-300 hover:-translate-y-1 hover:shadow-lg group`}>
              <div className={`w-12 h-12 ${feature.bgColor} rounded-xl flex items-center justify-center mb-4 group-hover:scale-110 transition-transform duration-300`}>
                <feature.icon className={`w-6 h-6 ${feature.iconColor}`} />
              </div>
              <h3 className={`text-lg font-bold ${themeClasses.text} mb-3`}>
                {feature.title}
              </h3>
              <p className={`${themeClasses.textMuted} text-sm leading-relaxed`}>
                {feature.description}
              </p>
            </div>
          ))}
        </div>
      </section>

      {/* How it works */}
      <section className={`${themeClasses.bgAlt} py-20`}>
        <div className="max-w-7xl mx-auto px-4 sm:px-6">
          <div className="text-center mb-16">
            <h2 className={`text-3xl sm:text-4xl font-bold ${themeClasses.text} mb-4 tracking-tight`}>
              Three Steps to Success
            </h2>
            <p className={`text-lg ${themeClasses.textMuted}`}>
              Professional results in under 3 minutes
            </p>
          </div>

          <div className="grid md:grid-cols-3 gap-8 lg:gap-12">
            {[
              {
                step: '01',
                title: 'Import Your Data',
                description: 'Upload your existing resume or LinkedIn profile. Our AI extracts and optimizes your information automatically.'
              },
              {
                step: '02',
                title: 'AI Enhancement',
                description: 'Choose from premium templates while our AI suggests improvements, keywords, and quantified achievements.'
              },
              {
                step: '03',
                title: 'Deploy & Track',
                description: 'Download your ATS-optimized resume and track application performance with built-in analytics.'
              }
            ].map((item, index) => (
              <div key={index} className="text-center group">
                <div className="relative mb-6">
                  <div className={`w-16 h-16 bg-gradient-to-br from-blue-600 to-indigo-600 text-white rounded-2xl flex items-center justify-center text-lg font-bold mx-auto shadow-lg group-hover:scale-110 transition-transform duration-300`}>
                    {item.step}
                  </div>
                  {index < 2 && (
                    <div className={`hidden md:block absolute top-8 left-full w-full h-0.5 ${isDark ? 'bg-gray-700' : 'bg-gray-300'} -z-10`}></div>
                  )}
                </div>
                <h3 className={`text-xl font-bold ${themeClasses.text} mb-3`}>
                  {item.title}
                </h3>
                <p className={`${themeClasses.textMuted} leading-relaxed`}>
                  {item.description}
                </p>
              </div>
            ))}
          </div>
        </div>
      </section>



      {/* Final CTA */}
      <section className="bg-gradient-to-r from-blue-600 via-indigo-600 to-purple-600 py-20 relative overflow-hidden">
        <div className="absolute inset-0 bg-black/10"></div>
        <div className="max-w-4xl mx-auto px-4 sm:px-6 text-center relative z-10">
          <h2 className="text-3xl sm:text-5xl font-bold text-white mb-6 leading-tight tracking-tight">
            Ready to Transform Your Career?
          </h2>
          <p className="text-lg text-blue-100 mb-8 max-w-2xl mx-auto">
            Join 150,000+ professionals who&apos;ve accelerated their careers with AI-powered resumes
          </p>
          <div className="flex flex-col sm:flex-row items-center justify-center space-y-4 sm:space-y-0 sm:space-x-4">
            <Link href="/sign-up" passHref>
              <button className="bg-white text-gray-900 px-8 py-3.5 rounded-lg font-semibold hover:bg-gray-100 transition-all duration-200 shadow-lg transform hover:-translate-y-1">
                Start Building Now - Free
              </button>
            </Link>
            <button 
              onClick={handleWatchDemo}
              className="border-2 border-white text-white px-8 py-3.5 rounded-lg font-semibold hover:bg-white hover:text-gray-900 transition-all duration-200"
            >
              View Live Demo
            </button>
          </div>
          <p className="text-blue-200 text-xs mt-4">
            No credit card required • 7-day free trial • Cancel anytime
          </p>
        </div>
      </section>

      {/* Footer */}
      <footer className={`${themeClasses.bgAlt} border-t ${themeClasses.border}`}>
        <div className="max-w-7xl mx-auto px-4 sm:px-6 py-12">
          <div className="flex flex-col md:flex-row justify-between items-center mb-6">
            <Link href="/" className="flex items-center space-x-2 mb-4 md:mb-0">
              <div className="w-8 h-8 bg-gradient-to-br from-blue-600 to-indigo-600 rounded-lg flex items-center justify-center shadow-md">
                <Sparkles className="w-4 h-4 text-white" />
              </div>
              <span className="text-xl font-bold bg-gradient-to-r from-blue-600 to-indigo-600 bg-clip-text text-transparent">
                GetHired
              </span>
            </Link>
            <div className="flex flex-wrap justify-center gap-6">
              {['Privacy Policy', 'Terms of Service', 'Support Center', 'API Documentation'].map((link) => (
                <a key={link} href="#" className={`${themeClasses.textMuted} hover:${themeClasses.text} transition-colors text-sm font-medium`}>
                  {link}
                </a>
              ))}
            </div>
          </div>
          <div className={`border-t ${themeClasses.border} pt-6 text-center ${themeClasses.textMuted2}`}>
            <p className="text-sm">© {new Date().getFullYear()} GetHired. All rights reserved. Built with cutting-edge AI technology.</p>
          </div>
        </div>
      </footer>

      <style jsx>{`
        @keyframes fade-in-up {
          from {
            opacity: 0;
            transform: translateY(20px);
          }
          to {
            opacity: 1;
            transform: translateY(0);
          }
        }
        
        @keyframes gradient-x {
          0%, 100% {
            background-size: 200% 200%;
            background-position: left center;
          }
          50% {
            background-size: 200% 200%;
            background-position: right center;
          }
        }
        
        .animate-fade-in-up {
          animation: fade-in-up 0.6s ease-out forwards;
          opacity: 0;
        }
        
        .animate-gradient-x {
          animation: gradient-x 3s ease infinite;
        }
        
        .animation-delay-1000 {
          animation-delay: 1s;
        }
      `}</style>
    </div>
  );
};

export default LandingPageContent;
</file>

<file path="types/resume.ts">
// types/resume.ts

export interface PersonalInfo {
  firstName: string;
  lastName: string;
  email: string;
  phone: string;
  location: string; // e.g., "City, Country" or "City, State"
  linkedin?: string;
  website?: string;
  summary: string;
}

export interface EducationEntry {
  id: string; // UUID for list management
  institution: string;
  degree: string;
  field: string; // Major or field of study
  startDate: string; // Could be YYYY-MM or YYYY
  endDate: string;   // Could be YYYY-MM, YYYY or "Present"
  gpa?: string;
  achievements?: string[]; // List of achievements/bullet points
}
export interface ExperienceEntry {
  id: string; // UUID
  company: string;
  position: string;
  startDate: string;
  endDate: string;
  description: string; // User's raw input
  enhancedDescription?: string; // AI-enhanced version
  achievements: string[]; // Bullet points, can also be AI-enhanced
  targetCompanyValues?: string; // <<< ADDED for storing in Zustand/DB if needed
}

export interface SkillEntry {
  id: string; // UUID
  name: string;
  level: 'Beginner' | 'Intermediate' | 'Advanced' | 'Expert';
  category: 'Technical' | 'Soft' | 'Language' | 'Other';
}

export interface ProjectEntry {
  id: string; // UUID
  name: string;
  description: string;
  technologies: string[]; // List of tech used
  url?: string;
  github?: string;
}

export interface ResumeData {
  id?: string; // Optional: might not exist until saved
  userId: string;
  title: string;
  personalInfo: PersonalInfo;
  education: EducationEntry[];
  experience: ExperienceEntry[];
  skills: SkillEntry[];
  projects: ProjectEntry[];
  atsScore: number; // Overall score
  // createdAt: string; // Handled by DB or backend
  // updatedAt: string; // Handled by DB or backend
}

// For the store, we might want to manage current step and other UI states
export interface ResumeState extends ResumeData {
  updateField: <K extends keyof ResumeData>(field: K, value: ResumeData[K]) => void;
  addEducation: (entry: EducationEntry) => void;
  updateEducation: (index: number, entry: EducationEntry) => void;
  removeEducation: (index: number) => void;
  addExperience: (entry: ExperienceEntry) => void;
  updateExperience: (index: number, entry: ExperienceEntry) => void;
  removeExperience: (index: number) => void;
  // ... similar methods for skills and projects
}


export interface ATSScoreDetails {
  overall: number;
  breakdown?: {
    keywords: { score: number; suggestions: string[]; };
    clarityAndConciseness: { score: number; suggestions: string[]; };
    actionVerbs: { score: number; suggestions: string[]; };
    quantifiableResults: { score: number; suggestions: string[]; };
    // formattingAndStructure: { score: number; suggestions: string[]; }; // OLD
    formattingAndConciseness: { score: number; suggestions: string[]; }; // NEW - Align with AI output
    lengthAndRelevance: { score: number; suggestions: string[]; };
  };
  suggestions: string[];
}
</file>

<file path="app/api/resumes/[resumeId]/route.ts">
/* eslint-disable @typescript-eslint/no-explicit-any */
// app/api/resumes/[resumeId]/route.ts
import { NextResponse } from 'next/server';
import { auth } from '@clerk/nextjs/server';
import { prisma } from '@/lib/db';
import { ResumeData } from '@/types/resume'; // Make sure this includes all sub-types

type UpdateResumePayload = Omit<ResumeData, 'id' | 'userId' | 'createdAt' | 'updatedAt'>;

export async function GET(
  request: Request, // Not used, but part of the signature
  context: { params: Promise<{ resumeId: string }> }
) {
  try {
    const { userId } = await auth();
    const { resumeId } = await context.params;

    if (!userId) {
      return new NextResponse('Unauthorized', { status: 401 });
    }

    if (!resumeId) {
      return new NextResponse('Resume ID is required', { status: 400 });
    }

    const resume = await prisma.resume.findUnique({
      where: {
        id: resumeId,
        userId: userId, // Crucial: Ensure the user owns this resume
      },
      include: { // Fetch all related data needed to populate the form
        personalInfo: true,
        education: true,
        experience: true,
        skills: true,
        projects: true,
      },
    });

    if (!resume) {
      // It's important to distinguish between "not found" and "access denied"
      // For simplicity here, we return 404 for both if the query doesn't yield a result for this user.
      return new NextResponse('Resume not found or access denied', { status: 404 });
    }

    return NextResponse.json(resume);

  } catch (error) {
    console.error(`[RESUME_ID_GET_API Error for ID: ${(await context.params).resumeId}]`, error);
    return new NextResponse('Internal Server Error', { status: 500 });
  }
}

export async function PUT(
  request: Request,
  context: { params: Promise<{ resumeId: string }> }
) {
  console.log('[DEBUG] PUT context:', JSON.stringify(context, null, 2));
  try {
    const { userId } = await auth();
    const { resumeId } = await context.params;

    if (!userId) {
      return new NextResponse('Unauthorized', { status: 401 });
    }
    if (!resumeId) {
      return new NextResponse('Resume ID is required', { status: 400 });
    }

    const body = await request.json() as UpdateResumePayload;
    const {
      title,
      personalInfo,
      education = [],
      experience = [],
      skills = [],
      projects = [],
      atsScore = 0
    } = body;

    if (!title || !personalInfo) {
        return new NextResponse('Missing title or personalInfo', { status: 400 });
    }
    
    const existingResume = await prisma.resume.findUnique({
      where: { id: resumeId },
    });

    if (!existingResume) {
      return new NextResponse('Resume not found', { status: 404 });
    }
    if (existingResume.userId !== userId) {
      return new NextResponse('Access denied', { status: 403 });
    }

    const updatedResume = await prisma.$transaction(async (tx : any) => {
      await tx.resume.update({
        where: { id: resumeId },
        data: { title, atsScore },
      });

      if (personalInfo) {
        await tx.personalInfo.upsert({
          where: { resumeId: resumeId },
          create: { ...personalInfo, resumeId: resumeId },
          update: { ...personalInfo }, 
        });
      }

      await tx.educationEntry.deleteMany({ where: { resumeId: resumeId } });
      if (education.length > 0) {
        await tx.educationEntry.createMany({
          data: education.map(edu => ({
            institution: edu.institution, degree: edu.degree, field: edu.field,
            startDate: edu.startDate, endDate: edu.endDate, gpa: edu.gpa,
            achievements: edu.achievements, resumeId: resumeId,
          })),
        });
      }
      
      await tx.experienceEntry.deleteMany({ where: { resumeId: resumeId } });
      if (experience.length > 0) {
        await tx.experienceEntry.createMany({
          data: experience.map(exp => ({
            company: exp.company, position: exp.position, startDate: exp.startDate,
            endDate: exp.endDate, description: exp.description,
            enhancedDescription: exp.enhancedDescription, achievements: exp.achievements,
            resumeId: resumeId,
          })),
        });
      }

      await tx.skillEntry.deleteMany({ where: { resumeId: resumeId } });
      if (skills.length > 0) {
        await tx.skillEntry.createMany({
          data: skills.map(skill => ({
            name: skill.name, level: skill.level, category: skill.category,
            resumeId: resumeId,
          })),
        });
      }

      await tx.projectEntry.deleteMany({ where: { resumeId: resumeId } });
      if (projects.length > 0) {
        await tx.projectEntry.createMany({
          data: projects.map(proj => ({
            name: proj.name, description: proj.description, technologies: proj.technologies,
            url: proj.url, github: proj.github, resumeId: resumeId,
          })),
        });
      }

      return tx.resume.findUniqueOrThrow({
        where: { id: resumeId },
        include: {
          personalInfo: true, education: true, experience: true,
          skills: true, projects: true,
        },
      });
    }, 
    {
      maxWait: 15000, 
      timeout: 15000,
    });

    return NextResponse.json(updatedResume);

  } catch (error) {
    console.error('[RESUME_ID_PUT_API]', error);
    // if (error instanceof prisma.PrismaClientKnownRequestError) { // Corrected 'prisma.'
    //     if (error.code === 'P2025') {
    //         return new NextResponse('Resource not found during update operation.', { status: 404 });
    //     } else if (error.code === 'P2028') {
    //         return new NextResponse('Operation timed out, please try again.', { status: 504 });
    //     }
    // }
    return new NextResponse('Internal Server Error', { status: 500 });
  }
}

export async function DELETE(
  request: Request, // Not used, but part of the signature
  context: { params: Promise<{ resumeId: string }> }
) {
  try {
    const { userId } = await auth();
    const { resumeId } = await context.params;

    if (!userId) {
      return new NextResponse('Unauthorized', { status: 401 });
    }

    if (!resumeId) {
      return new NextResponse('Resume ID is required', { status: 400 });
    }

    // Verify ownership before deleting
    const resumeToDelete = await prisma.resume.findUnique({
      where: {
        id: resumeId,
        userId: userId,
      },
    });

    if (!resumeToDelete) {
      return new NextResponse('Resume not found or access denied', { status: 404 });
    }

    // Delete the resume. Prisma's `onDelete: Cascade` in the schema
    // should handle deleting related PersonalInfo, EducationEntries, etc.
    await prisma.resume.delete({
      where: {
        id: resumeId,
      },
    });

    return new NextResponse(null, { status: 204 }); // 204 No Content for successful deletion

  } catch (error) {
    console.error('[RESUME_ID_DELETE_API]', error);
    // if (error instanceof prisma.PrismaClientKnownRequestError && error.code === 'P2025') { // Record to delete not found
    //     return new NextResponse('Resume not found.', { status: 404 });
    // }
    return new NextResponse('Internal Server Error', { status: 500 });
  }
}
</file>

<file path="components/dashboard/dashboard-content.tsx">
// components/dashboard/dashboard-content.tsx
'use client';

import React, { useState, useEffect, useCallback } from 'react';
import Link from 'next/link';
import { UserButton } from '@clerk/nextjs';
import { 
    Plus, FileText, Download, Calendar, Star, Sparkles, Sun, Moon, 
    Briefcase, BarChart3, DownloadCloud, Loader2, Trash2, Edit3, AlertTriangle 
} from 'lucide-react'; // Ensure AlertTriangle and Edit3 are imported
import { useTheme } from '@/context/theme-provider';
import { useResumeStore } from '@/hooks/use-resume';

interface ResumeFromApi {
  id: string;
  title: string;
  atsScore: number;
  updatedAt: string;
  status: 'draft' | 'completed';
}

interface DashboardContentProps {
  userId: string;
}

const DashboardContent: React.FC<DashboardContentProps> = ({ userId }) => {
  const { theme, toggleTheme } = useTheme();
  const [resumes, setResumes] = useState<ResumeFromApi[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const resetResumeInStore = useResumeStore(state => state.resetResume);

  const isDark = theme === 'dark';
  const themeClasses = { 
    bg: isDark ? 'bg-gray-900' : 'bg-gray-50',
    bgAlt: isDark ? 'bg-gray-800' : 'bg-gray-100',
    text: isDark ? 'text-white' : 'text-gray-900',
    textMuted: isDark ? 'text-gray-300' : 'text-gray-600',
    textMuted2: isDark ? 'text-gray-400' : 'text-gray-500',
    border: isDark ? 'border-gray-700' : 'border-gray-200',
    cardBg: isDark ? 'bg-gray-800/60 backdrop-blur-md' : 'bg-white/80 backdrop-blur-md',
    cardBorderHover: isDark ? 'hover:border-blue-500/70' : 'hover:border-blue-500/70',
    accentGradient: 'bg-gradient-to-r from-blue-600 to-purple-600',
    accentHover: 'hover:from-blue-700 hover:to-purple-700',
    buttonOutline: isDark ? 'border-gray-600 hover:bg-gray-700/50' : 'border-gray-300 hover:bg-gray-200/50',
    buttonGhost: isDark ? 'hover:bg-gray-700/50' : 'hover:bg-gray-200/50',
  };

  const fetchResumes = useCallback(async () => {
    setLoading(true);
    setError(null);
    try {
      const response = await fetch('/api/resumes');
      if (!response.ok) {
        const errorData = await response.json().catch(() => ({ message: `HTTP error! status: ${response.status}` }));
        throw new Error(errorData.message || `Failed to fetch resumes: ${response.statusText}`);
      }
      const data: ResumeFromApi[] = await response.json();
      setResumes(data);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'An unknown error occurred while fetching resumes.');
      setResumes([]);
    } finally {
      setLoading(false);
    }
  }, []);

  useEffect(() => {
    if (userId) { // Only fetch if userId is available
        fetchResumes();
    }
  }, [userId, fetchResumes]);

  const handleCreateNewClick = () => {
    if (userId) {
      resetResumeInStore(userId);
    }
  };

  const handleDeleteResume = async (resumeId: string, resumeTitle: string) => {
    if (!confirm(`Are you sure you want to delete the resume titled "${resumeTitle}"? This action cannot be undone.`)) {
      return;
    }
    try {
      const response = await fetch(`/api/resumes/${resumeId}`, { method: 'DELETE' });
      if (!response.ok) {
        // Try to parse error message from backend if available
        let errorMsg = `Failed to delete resume: ${response.statusText}`;
        try {
            const errorData = await response.json();
            if (errorData && errorData.message) {
                errorMsg = errorData.message;
            }
        } catch (e) {
          console.error("Failed to parse error response:", e);
            // Ignore if parsing error response fails, use default message
        }
        throw new Error(errorMsg);
      }
      // Update UI: Filter out the deleted resume from the local state
      setResumes(prevResumes => prevResumes.filter(r => r.id !== resumeId));
      alert('Resume deleted successfully.'); // Replace with a more subtle toast notification
    } catch (err) {
      console.error("Error deleting resume:", err);
      alert(`Error deleting resume: ${err instanceof Error ? err.message : String(err)}`);
    }
  };

  const getScoreColorText = (score: number) => { /* ... */ 
    if (score >= 80) return isDark ? 'text-green-400' : 'text-green-600';
    if (score >= 60) return isDark ? 'text-yellow-400' : 'text-yellow-500';
    return isDark ? 'text-red-400' : 'text-red-500';
  };
  const getScoreBgClass = (score: number) => { /* ... */ 
    if (score >= 80) return isDark ? 'bg-green-500/20 border-green-500/30' : 'bg-green-100 border-green-200';
    if (score >= 60) return isDark ? 'bg-yellow-500/20 border-yellow-500/30' : 'bg-yellow-100 border-yellow-200';
    return isDark ? 'bg-red-500/20 border-red-500/30' : 'bg-red-100 border-red-200';
  };
  const statIcons = [ /* ... */ 
    <Briefcase key="total" className={`w-6 h-6 ${isDark ? 'text-blue-400' : 'text-blue-600'}`} />,
    <BarChart3 key="avg" className={`w-6 h-6 ${isDark ? 'text-purple-400' : 'text-purple-600'}`} />,
    <DownloadCloud key="downloads" className={`w-6 h-6 ${isDark ? 'text-green-400' : 'text-green-600'}`} />
  ];

  // Loading and Error States (condensed for brevity, keep your full versions)
  if (loading) {
    return (
      <div className={`min-h-screen ${themeClasses.bg} flex flex-col`}>
        <header className={`${themeClasses.bgAlt} ${themeClasses.border} border-b shadow-sm sticky top-0 z-40`}> {/* Header */}
            <div className="max-w-full mx-auto px-6 py-3.5"><div className="flex items-center justify-between"><Link href="/dashboard" className="flex items-center space-x-3"><div className="w-9 h-9 bg-gradient-to-br from-blue-600 to-purple-600 rounded-lg flex items-center justify-center shadow-md"><Sparkles className="w-4 h-4 text-white" /></div><span className={`text-xl font-bold ${themeClasses.text} hidden sm:inline`}>GetHired</span><span className={`text-xl font-normal ${themeClasses.textMuted2} hidden md:inline`}>/ Dashboard</span></Link><div className="flex items-center space-x-4"><button onClick={toggleTheme} className={`p-2 rounded-lg ${themeClasses.textMuted} hover:${themeClasses.text} ${themeClasses.buttonGhost} transition-colors`} aria-label="Toggle theme">{isDark ? <Sun className="w-5 h-5" /> : <Moon className="w-5 h-5" />}</button><UserButton appearance={{elements: {avatarBox: "w-9 h-9 shadow-md", userButtonPopoverCard: `${themeClasses.cardBg} ${themeClasses.border} border`}}}/></div></div></div>
        </header>
        <div className="flex-grow flex items-center justify-center">
          <Loader2 className={`w-12 h-12 ${themeClasses.text} animate-spin`} />
        </div>
      </div>
    );
  }
  if (error) {
    return (
        <div className={`min-h-screen ${themeClasses.bg} flex flex-col`}>
            <header className={`${themeClasses.bgAlt} ${themeClasses.border} border-b shadow-sm sticky top-0 z-40`}> {/* Header */}
                <div className="max-w-full mx-auto px-6 py-3.5"><div className="flex items-center justify-between"><Link href="/dashboard" className="flex items-center space-x-3"><div className="w-9 h-9 bg-gradient-to-br from-blue-600 to-purple-600 rounded-lg flex items-center justify-center shadow-md"><Sparkles className="w-4 h-4 text-white" /></div><span className={`text-xl font-bold ${themeClasses.text} hidden sm:inline`}>GetHired</span><span className={`text-xl font-normal ${themeClasses.textMuted2} hidden md:inline`}>/ Dashboard</span></Link><div className="flex items-center space-x-4"><button onClick={toggleTheme} className={`p-2 rounded-lg ${themeClasses.textMuted} hover:${themeClasses.text} ${themeClasses.buttonGhost} transition-colors`} aria-label="Toggle theme">{isDark ? <Sun className="w-5 h-5" /> : <Moon className="w-5 h-5" />}</button><UserButton appearance={{elements: {avatarBox: "w-9 h-9 shadow-md", userButtonPopoverCard: `${themeClasses.cardBg} ${themeClasses.border} border`}}}/></div></div></div>
            </header>
            <div className="flex-grow flex flex-col items-center justify-center text-center px-4">
                <AlertTriangle className={`w-16 h-16 ${isDark ? 'text-red-400' : 'text-red-500'} mb-4`} />
                <h2 className={`text-2xl font-semibold ${themeClasses.text} mb-2`}>Oops! Something went wrong.</h2>
                <p className={`${themeClasses.textMuted} mb-6`}>{error}</p>
                <button onClick={fetchResumes} className={`${themeClasses.accentGradient} ${themeClasses.accentHover} text-white px-6 py-2.5 rounded-xl font-semibold`}>Try Again</button>
            </div>
        </div>
    );
  }

  return (
    <div className={`min-h-screen ${themeClasses.bg} transition-colors duration-300`}>
      {/* Header ... (same as above) */}
      <header className={`${themeClasses.bgAlt} ${themeClasses.border} border-b shadow-sm sticky top-0 z-40`}>
        <div className="max-w-full mx-auto px-6 py-3.5">
          <div className="flex items-center justify-between">
            <Link href="/dashboard" className="flex items-center space-x-3">
              <div className="w-9 h-9 bg-gradient-to-br from-blue-600 to-purple-600 rounded-lg flex items-center justify-center shadow-md">
                <Sparkles className="w-4 h-4 text-white" />
              </div>
              <span className={`text-xl font-bold ${themeClasses.text} hidden sm:inline`}>GetHired</span>
               <span className={`text-xl font-normal ${themeClasses.textMuted2} hidden md:inline`}>/ Dashboard</span>
            </Link>
            <div className="flex items-center space-x-4">
              <button onClick={toggleTheme} className={`p-2 rounded-lg ${themeClasses.textMuted} hover:${themeClasses.text} ${themeClasses.buttonGhost} transition-colors`} aria-label="Toggle theme">
                {isDark ? <Sun className="w-5 h-5" /> : <Moon className="w-5 h-5" />}
              </button>
              <UserButton appearance={{elements: {avatarBox: "w-9 h-9 shadow-md", userButtonPopoverCard: `${themeClasses.cardBg} ${themeClasses.border} border`}}}/>
            </div>
          </div>
        </div>
      </header>

      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Stats Cards ... (same as before, ensure values are dynamic) */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-10">
          {[
            { title: 'Total Resumes', value: resumes.length, change: `+${resumes.filter(r => new Date(r.updatedAt).getTime() > Date.now() - 30 * 24 * 60 * 60 * 1000).length} this month`, icon: statIcons[0] },
            { title: 'Avg. ATS Score', value: resumes.length > 0 ? Math.round(resumes.reduce((sum, r) => sum + r.atsScore, 0) / resumes.length) : 0, change: resumes.length > 0 ? 'Based on current' : 'N/A', icon: statIcons[1], unit: '%' },
            { title: 'Downloads', value: 0, change: 'Feature pending', icon: statIcons[2] }
          ].map((stat) => (
            <div key={stat.title} className={`${themeClasses.cardBg} p-6 rounded-xl border ${themeClasses.border} ${themeClasses.cardBorderHover} transition-all duration-300 shadow-lg hover:shadow-xl`}>
              <div className="flex items-center justify-between mb-3"> <h3 className={`text-sm font-medium ${themeClasses.textMuted}`}>{stat.title}</h3> {stat.icon} </div>
              <p className={`text-3xl font-bold ${themeClasses.text}`}>{stat.value}{stat.unit || ''}</p>
              <p className={`text-xs ${stat.change.startsWith('+') || stat.change.includes('current') ? (isDark ? 'text-green-400' : 'text-green-600') : themeClasses.textMuted2} mt-1`}>{stat.change}</p>
            </div>
          ))}
        </div>

        <div className="flex items-center justify-between mb-8">
          <div> <h2 className={`text-3xl font-bold ${themeClasses.text}`}>Your Resumes</h2> <p className={`${themeClasses.textMuted} mt-1`}>Manage and create your AI-powered resumes.</p> </div>
          <Link href="/dashboard/create-resume" passHref>
            <button onClick={handleCreateNewClick} className={`${themeClasses.accentGradient} ${themeClasses.accentHover} text-white px-6 py-3 rounded-xl font-semibold flex items-center transition-all duration-200 shadow-lg hover:shadow-purple-500/30 transform hover:-translate-y-0.5`}>
              <Plus className="w-5 h-5 mr-2" /> Create New Resume
            </button>
          </Link>
        </div>

        {resumes.length === 0 ? ( /* Empty state ... (same as before) */ 
          <div className={`${themeClasses.cardBg} text-center py-16 px-6 rounded-xl border ${themeClasses.border} shadow-xl`}>
            <FileText className={`w-16 h-16 ${themeClasses.textMuted2} mx-auto mb-6`} />
            <h3 className={`text-2xl font-semibold ${themeClasses.text} mb-3`}>No Resumes Yet</h3>
            <p className={`${themeClasses.textMuted} mb-8 max-w-md mx-auto`}>It looks like you haven&apos;t created any resumes. Let&apos;s build your first one and unlock your career potential!</p>
            <Link href="/dashboard/create-resume" passHref><button onClick={handleCreateNewClick} className={`${themeClasses.accentGradient} ${themeClasses.accentHover} text-white px-8 py-3.5 rounded-xl font-semibold text-lg`}><Plus className="w-5 h-5 mr-2 inline-block" />Create Your First Resume</button></Link>
          </div>
        ) : (
          <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
            {resumes.map((resume) => (
              <div key={resume.id} className={`${themeClasses.cardBg} rounded-xl border ${themeClasses.border} ${themeClasses.cardBorderHover} transition-all duration-300 shadow-lg hover:shadow-2xl flex flex-col`}>
                <div className="p-6 flex-grow">
                  <div className="flex items-start justify-between mb-3">
                    <h4 className={`text-lg font-semibold ${themeClasses.text} group-hover:text-purple-400 transition-colors truncate`}>
                      {resume.title}
                    </h4>
                    {/* Delete Button */}
                    <button 
                        onClick={() => handleDeleteResume(resume.id, resume.title)} // Pass resume.title for confirm dialog
                        title="Delete Resume"
                        className={`p-1.5 rounded ${themeClasses.buttonGhost} text-red-500/70 hover:text-red-500 hover:bg-red-500/10`} // Specific styling for delete
                    >
                      <Trash2 className="w-4 h-4" />
                    </button>
                  </div>
                  {/* ... (ATS Score and Status badges remain the same) ... */}
                  <div className="flex items-center space-x-3 mb-4">
                    <span className={`inline-flex items-center px-2.5 py-1 rounded-full text-xs font-medium border ${getScoreBgClass(resume.atsScore)} ${getScoreColorText(resume.atsScore)}`}>
                      <Star className="w-3 h-3 mr-1.5" /> {resume.atsScore}% ATS
                    </span>
                    <span className={`inline-flex items-center px-2.5 py-1 rounded-full text-xs font-medium border ${resume.status === 'completed' ? (isDark ? 'bg-green-500/20 text-green-300 border-green-500/30' : 'bg-green-100 text-green-700 border-green-300') : (isDark ? 'bg-yellow-500/20 text-yellow-300 border-yellow-500/30' : 'bg-yellow-100 text-yellow-700 border-yellow-300')}`}>
                      {resume.status.charAt(0).toUpperCase() + resume.status.slice(1)}
                    </span>
                  </div>
                  <div className={`flex items-center text-xs ${themeClasses.textMuted2} space-x-1.5`}>
                    <Calendar className="w-3.5 h-3.5" /> <span>Updated: {new Date(resume.updatedAt).toLocaleDateString()}</span>
                  </div>
                </div>
                <div className={`border-t ${themeClasses.border} p-4 flex space-x-3`}>
                  <Link href={`/dashboard/create-resume?resumeId=${resume.id}`} className="flex-1"> 
                    <button className={`w-full px-4 py-2.5 rounded-lg text-sm font-medium flex items-center justify-center ${themeClasses.text} ${themeClasses.buttonOutline} transition-colors`}>
                      <Edit3 className="w-4 h-4 mr-2" /> Edit
                    </button>
                  </Link>
                  <button title="Download PDF (coming soon)" disabled className={`px-4 py-2.5 rounded-lg text-sm font-medium flex items-center justify-center ${themeClasses.text} ${themeClasses.buttonOutline} transition-colors disabled:opacity-50 disabled:cursor-not-allowed`}>
                    <Download className="w-4 h-4" />
                  </button>
                </div>
              </div>
            ))}
          </div>
        )}
      </main>
    </div>
  );
};

export default DashboardContent;
</file>

<file path="package.json">
{
  "name": "resume-builder-claude",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "prisma generate && next build",
    "postinstall": "prisma generate",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@clerk/nextjs": "^6.20.0",
    "@clerk/themes": "^2.2.46",
    "@google/genai": "^1.0.1",
    "@google/generative-ai": "^0.24.1",
    "@hookform/resolvers": "^5.0.1",
    "@prisma/client": "^6.8.2",
    "@radix-ui/react-slot": "^1.2.3",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "html2canvas": "^1.4.1",
    "jspdf": "^3.0.1",
    "lucide-react": "^0.511.0",
    "next": "^15.2.3",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "react-hook-form": "^7.56.4",
    "tailwind-merge": "^3.3.0",
    "tailwindcss-animate": "^1.0.7",
    "use-debounce": "^10.0.4",
    "zod": "^3.25.28",
    "zustand": "^5.0.5"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@types/node": "^20.17.50",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "@types/use-sync-external-store": "^1.5.0",
    "@types/uuid": "^10.0.0",
    "eslint": "^9",
    "eslint-config-next": "15.1.8",
    "postcss": "^8",
    "prisma": "^6.8.2",
    "tailwindcss": "^3.4.1",
    "typescript": "^5"
  }
}
</file>

<file path="app/dashboard/create-resume/page.tsx">
/* eslint-disable @typescript-eslint/no-unused-vars */
// app/dashboard/create-resume/page.tsx
'use client';

import React, { useEffect, useState, Suspense, useCallback } from 'react';
import { useAuth, UserButton } from '@clerk/nextjs';
import { useRouter, useSearchParams } from 'next/navigation';
import { Loader2, FileText, ArrowLeft, ArrowRight, Save, Sun, Moon, Sparkles } from 'lucide-react';
import ResumeForm from '@/components/resume/resume-form';
import AtsScoreDisplay from '@/components/resume/ats-score-display';
import ResumePreview from '@/components/resume/resume-preview';
import { Button } from '@/components/ui/button';
import { useResumeStore } from '@/hooks/use-resume'; // Keep for getState() if absolutely needed outside selectors
import { useShallowResumeSelector, ShallowSelectedResumeParts } from '@/hooks/useShallowResumeSelector';
import { ResumeData, EducationEntry, ExperienceEntry, ProjectEntry, SkillEntry, PersonalInfo } from '@/types/resume';
import { useTheme } from '@/context/theme-provider';
import { Download } from 'lucide-react'; // Add Download icon
import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';
import SimpleTemplate from '@/components/resume/templates/simple-template';
import { Mail, Copy, Download as DownloadIcon } from 'lucide-react'
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { Input } from '@/components/ui/input';

const resumeSections = ['Personal Info', 'Education', 'Experience', 'Skills', 'Projects', 'Review'];
const totalSteps = resumeSections.length;

type ResumeApiPayload = Omit<ResumeData, 'id' | 'userId' | 'createdAt' | 'updatedAt'>;

function CreateResumePageContent() {
  const { userId: clerkUserIdFromAuth, isLoaded: isAuthLoaded } = useAuth();
  const router = useRouter();
  const searchParams = useSearchParams();
  const resumeIdFromParams = searchParams.get('resumeId');
  const [isGeneratingPdf, setIsGeneratingPdf] = useState(false);
  const [showPdfPreview, setShowPdfPreview] = useState(false);
  const [currentStep, setCurrentStep] = useState(0);
  const { theme, toggleTheme } = useTheme();
  const isDark = theme === 'dark';
  const [showCoverLetterModal, setShowCoverLetterModal] = useState(false);
  const [targetJobTitle, setTargetJobTitle] = useState('');
  const [targetCompanyName, setTargetCompanyName] = useState('');
  const [specificPointsForCoverLetter, setSpecificPointsForCoverLetter] = useState('');
  const [generatedCoverLetter, setGeneratedCoverLetter] = useState('');
  const [isGeneratingCoverLetter, setIsGeneratingCoverLetter] = useState(false);

  const allResumeDataForCoverLetter = useShallowResumeSelector();



  const themeClasses = {
    textMuted: isDark ? 'text-gray-300' : 'text-gray-600',
    buttonGhost: isDark ? 'hover:bg-gray-700/50' : 'hover:bg-gray-200/50',
    buttonOutline: isDark ? 'text-white border-white/20 hover:bg-white/10' : 'text-gray-700 border-gray-300 hover:bg-gray-100',
    accentGradient: 'bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700',
    pageBg: isDark ? 'bg-gradient-to-br from-gray-900 via-purple-950 to-gray-900' : 'bg-gradient-to-br from-gray-100 via-blue-50 to-gray-100',
    cardBg: isDark ? 'bg-gray-800/60 backdrop-blur-md border border-gray-700' : 'bg-white/80 backdrop-blur-md border border-gray-200',
    headerBg: isDark ? 'bg-gray-800/80 backdrop-blur-md border-b border-gray-700' : 'bg-white/80 backdrop-blur-md border-b border-gray-200',
    text: isDark ? 'text-white' : 'text-gray-900',
    progressBarBg: isDark ? 'bg-gray-700' : 'bg-gray-200',
  };


  const {
    id: currentResumeIdInStore,
    userId: userIdInStore,
    title,
    personalInfo,
    // Destructure the arrays too, as they are part of the payload
    education,
    experience,
    skills,
    projects,
    atsScore,
    loadResume,
    resetResume,
    setTitle: setResumeTitle,
  } = useShallowResumeSelector();

  const [isLoadingPage, setIsLoadingPage] = useState(true);
  const [isSaving, setIsSaving] = useState(false);

  const [showPdfPreviewForCapture, setShowPdfPreviewForCapture] = useState(false);

  // Using useCallback for functions passed to useEffect if they are redefined on each render
  // However, loadResume and resetResume from Zustand store are typically stable.
  // For explicitness or if they were derived:
  const stableLoadResume = useCallback(loadResume, [loadResume]);
  const stableResetResume = useCallback(resetResume, [resetResume]);


  useEffect(() => {
    if (isAuthLoaded) {
      if (!clerkUserIdFromAuth) {
        router.push('/sign-in');
        return;
      }
      setIsLoadingPage(true);
      if (resumeIdFromParams) {
        if (currentResumeIdInStore === resumeIdFromParams && userIdInStore === clerkUserIdFromAuth) {
          setIsLoadingPage(false);
          return;
        }
        fetch(`/api/resumes/${resumeIdFromParams}`)
          .then(res => {
            if (!res.ok) {
              if (res.status === 404) throw new Error('Resume not found or you do not have permission to edit it.');
              throw new Error(`Failed to fetch resume (status: ${res.status})`);
            }
            return res.json();
          })
          .then((data: ResumeData & { id: string }) => {
            if (data.userId !== clerkUserIdFromAuth) {
              throw new Error('Access denied: This resume does not belong to you.');
            }
            stableLoadResume(data);
          })
          .catch(err => {
            console.error("Error fetching resume for edit:", err);
            alert((err as Error).message || "Failed to load resume. Starting a new one.");
            stableResetResume(clerkUserIdFromAuth);
            router.replace('/dashboard/create-resume', { scroll: false });
          })
          .finally(() => setIsLoadingPage(false));
      } else {
        if (!currentResumeIdInStore || userIdInStore !== clerkUserIdFromAuth) {
          stableResetResume(clerkUserIdFromAuth);
        } else {
          if (userIdInStore !== clerkUserIdFromAuth) {
            useResumeStore.setState({ userId: clerkUserIdFromAuth });
          }
        }
        setIsLoadingPage(false);
      }
    }
  }, [isAuthLoaded, clerkUserIdFromAuth, resumeIdFromParams, router, stableLoadResume, stableResetResume, currentResumeIdInStore, userIdInStore]);

  useEffect(() => {
    if (personalInfo?.firstName && title === 'Untitled Resume' && !resumeIdFromParams && !currentResumeIdInStore) {
      setResumeTitle(`${personalInfo.firstName}'s Resume`);
    }
  }, [personalInfo?.firstName, title, setResumeTitle, resumeIdFromParams, currentResumeIdInStore]);

  const handleSaveResume = async () => {
    if (!clerkUserIdFromAuth) {
      alert("User not authenticated."); return;
    }
    setIsSaving(true);

    // Get the freshest state for the payload directly from the store
    // This ensures all fields selected by useShallowResumeSelector are up-to-date for the payload
    const currentState = useResumeStore.getState();

    const payload: ResumeApiPayload = {
      title: currentState.title,
      personalInfo: currentState.personalInfo,
      // Keep the full objects, including their client-side IDs.
      // The backend (Prisma create/createMany) will handle ID generation for new sub-records.
      education: currentState.education,
      experience: currentState.experience,
      skills: currentState.skills,
      projects: currentState.projects,
      atsScore: currentState.atsScore,
    };

    try {
      const method = currentState.id ? 'PUT' : 'POST'; // Use currentState.id from store
      const url = currentState.id ? `/api/resumes/${currentState.id}` : '/api/resumes';
      const response = await fetch(url, {
        method: method, headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(payload),
      });
      if (!response.ok) {
        const errorData = await response.json().catch(() => ({ message: "Failed to parse error response" }));
        throw new Error(errorData.message || `Failed to save resume: ${response.statusText}`);
      }
      const savedResume = await response.json() as ResumeData & { id: string };
      loadResume(savedResume);
      alert('Resume saved successfully!');
      if (method === 'POST' && savedResume.id) {
        router.replace(`/dashboard/create-resume?resumeId=${savedResume.id}`, { scroll: false });
      }
    } catch (error) {
      console.error("Failed to save resume:", error);
      alert(`Error saving resume: ${error instanceof Error ? error.message : String(error)}`);
    } finally {
      setIsSaving(false);
    }
  };

  const handleNext = () => {
    if (currentStep < totalSteps - 1) { setCurrentStep(currentStep + 1); }
    else if (currentStep === totalSteps - 1) { handleSaveResume(); }
  };
  const handleBack = () => {
    if (currentStep > 0) { setCurrentStep(currentStep - 1); }
  };

  const progressPercentage = ((currentStep + 1) / totalSteps) * 100;

  if (!isAuthLoaded || isLoadingPage) {
    return (
      <div className={`min-h-screen ${themeClasses.pageBg} flex items-center justify-center`}>
        <Loader2 className={`w-12 h-12 ${themeClasses.text} animate-spin`} />
      </div>
    );
  }



  const handleDownloadPdf = async () => {
    setIsGeneratingPdf(true);
    setShowPdfPreviewForCapture(true);

    // Declare resumeContentElement here so it's accessible in finally if needed, though not strictly necessary for this logic
    let resumeContentElement: HTMLElement | null = null;

    try {
      // Give React a moment to render the hidden template
      await new Promise(resolve => setTimeout(resolve, 200)); // Increased slightly for good measure

      resumeContentElement = document.getElementById('resume-content-for-pdf');

      if (!resumeContentElement) {
        // This alert will now correctly indicate the element wasn't found AFTER the attempt to get it.
        alert("Error: Resume content for PDF rendering could not be found in the DOM. Please try again.");
        // No need to set visibility if element is null
        setIsGeneratingPdf(false);
        setShowPdfPreviewForCapture(false);
        return;
      }

      // Optional: Briefly make it visible for html2canvas if issues persist, then hide again
      // resumeContentElement.style.visibility = 'visible'; 
      // await new Promise(resolve => setTimeout(resolve, 50)); // Very short delay

      const canvas = await html2canvas(resumeContentElement, {
        scale: 2,
        useCORS: true,
        logging: false, // Set to true for html2canvas debugging if needed
        // Ensure html2canvas captures based on the element's actual rendered size
        // width: resumeContentElement.offsetWidth, // or scrollWidth
        // height: resumeContentElement.offsetHeight, // or scrollHeight
      });

      // resumeContentElement.style.visibility = 'hidden'; // Hide again if made visible

      const imgData = canvas.toDataURL('image/png');
      const pdf = new jsPDF({
        orientation: 'portrait',
        unit: 'mm',
        format: 'a4',
      });

      const pdfWidth = pdf.internal.pageSize.getWidth();
      const pdfPageHeight = pdf.internal.pageSize.getHeight();
      const imgProps = pdf.getImageProperties(imgData);
      const imgHeightInPdfUnits = (imgProps.height * pdfWidth) / imgProps.width;

      let heightLeft = imgHeightInPdfUnits;
      let position = 0;

      pdf.addImage(imgData, 'PNG', 0, position, pdfWidth, imgHeightInPdfUnits);
      heightLeft -= pdfPageHeight;

      while (heightLeft > 0) {
        position -= pdfPageHeight;
        pdf.addPage();
        pdf.addImage(imgData, 'PNG', 0, position, pdfWidth, imgHeightInPdfUnits);
        heightLeft -= pdfPageHeight;
      }

      const resumeTitleForFile = useResumeStore.getState().title.replace(/[^a-z0-9_.-]/gi, '_').toLowerCase();
      pdf.save(`${resumeTitleForFile || 'resume'}.pdf`);

    } catch (error) {
      console.error("Error generating PDF:", error);
      alert("Failed to generate PDF. Please try again.");
      // If resumeContentElement was found and made visible, hide it on error
      // if (resumeContentElement) resumeContentElement.style.visibility = 'hidden'; 
    } finally {
      setIsGeneratingPdf(false);
      setShowPdfPreviewForCapture(false); // Always hide the capture div
    }
  };


  const handleGenerateCoverLetter = async () => {
    if (!targetJobTitle || !targetCompanyName) {
      alert("Please enter the Target Job Title and Company Name.");
      return;
    }
    setIsGeneratingCoverLetter(true);
    setGeneratedCoverLetter(''); // Clear previous

    // Construct payload using all relevant parts from the store
    const payload = {
      resumeData: { // Send only necessary parts of the resume
        personalInfo: allResumeDataForCoverLetter.personalInfo,
        experience: allResumeDataForCoverLetter.experience,
        skills: allResumeDataForCoverLetter.skills,
        // education: allResumeDataForCoverLetter.education, // Optional
        // projects: allResumeDataForCoverLetter.projects, // Optional
      },
      jobTitle: targetJobTitle,
      companyName: targetCompanyName,
      specificPoints: specificPointsForCoverLetter,
      // tone: 'semi-formal' // Or make this a user selection
    };

    try {
      const response = await fetch('/api/ai/generate-cover-letter', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload),
      });
      if (!response.ok) {
        const errorData = await response.json().catch(() => ({ message: "Failed to parse error" }));
        throw new Error(errorData.message || `Failed to generate cover letter: ${response.statusText}`);
      }
      const data = await response.json();
      setGeneratedCoverLetter(data.coverLetterText);
    } catch (error) {
      console.error("Cover letter generation error:", error);
      alert(`Error generating cover letter: ${error instanceof Error ? error.message : String(error)}`);
      setGeneratedCoverLetter("Failed to generate cover letter. Please try again.");
    } finally {
      setIsGeneratingCoverLetter(false);
    }
  };

  const handleCopyCoverLetter = () => {
    navigator.clipboard.writeText(generatedCoverLetter)
      .then(() => alert("Cover letter copied to clipboard!"))
      .catch(err => alert("Failed to copy. Please copy manually."));
  };

  const handleDownloadCoverLetterTxt = () => {
    const element = document.createElement("a");
    const file = new Blob([generatedCoverLetter], { type: 'text/plain' });
    element.href = URL.createObjectURL(file);
    const safeCompanyName = targetCompanyName.replace(/[^a-z0-9_.-]/gi, '_').toLowerCase() || "company";
    const safeJobTitle = targetJobTitle.replace(/[^a-z0-9_.-]/gi, '_').toLowerCase() || "job";
    element.download = `cover_letter_${safeCompanyName}_${safeJobTitle}.txt`;
    document.body.appendChild(element); // Required for this to work in FireFox
    element.click();
    document.body.removeChild(element);
  };





  return (
    <div className={`min-h-screen flex flex-col ${themeClasses.pageBg} transition-colors duration-300`}>
      <header className={`${themeClasses.headerBg} sticky top-0 z-50 shadow-md`}>
        <div className="max-w-full mx-auto px-4 sm:px-6 py-3">
          <div className="flex items-center justify-between">
            {/* Back Button and Title Section */}
            <div className="flex items-center space-x-3">
              <Button variant="ghost" size="icon" onClick={() => router.push('/dashboard')} className={`${themeClasses.text} ${themeClasses.buttonGhost}`}>
                <ArrowLeft className="w-5 h-5" />
              </Button>
              <div className="flex items-center space-x-2">
                <div className="w-8 h-8 bg-gradient-to-br from-blue-600 to-purple-600 rounded-lg flex items-center justify-center shadow-md">
                  <FileText className="w-4 h-4 text-white" />
                </div>
                <span className={`text-lg font-semibold ${themeClasses.text} hidden sm:inline truncate max-w-[200px] md:max-w-xs`} title={title}>
                  {title || "Loading title..."}
                </span>
              </div>
            </div>

            {/* Progress Bar Section */}
            <div className="flex-grow px-4 sm:px-8 lg:px-16">
              <div className="max-w-xl mx-auto">
                <div className="mb-1">
                  <div className={`relative h-2 w-full overflow-hidden rounded-full ${themeClasses.progressBarBg}`}>
                    <div
                      className={`h-full w-full flex-1 ${themeClasses.accentGradient} transition-all`}
                      style={{ transform: `translateX(-${100 - progressPercentage}%)` }}
                    />
                  </div>
                </div>
                <p className={`text-xs text-center ${themeClasses.textMuted}`}>
                  Step {currentStep + 1} of {totalSteps}: {resumeSections[currentStep]}
                </p>
              </div>
            </div>

            {/* Action Buttons Section */}
            <div className="flex items-center space-x-3">
              <button
                onClick={toggleTheme}
                className={`p-2 rounded-lg ${themeClasses.textMuted} ${themeClasses.buttonGhost} transition-colors`}
                aria-label="Toggle theme"
              >
                {isDark ? <Sun className="w-5 h-5" /> : <Moon className="w-5 h-5" />}
              </button>
              <Button
                variant="outline"
                size="sm"
                onClick={handleSaveResume}
                disabled={isSaving}
                className={`${themeClasses.buttonOutline} flex items-center`}
              >
                {isSaving ? <Loader2 className="w-4 h-4 mr-2 animate-spin" /> : <Save className="w-4 h-4 mr-2" />}
                {currentResumeIdInStore ? 'Save Changes' : 'Save Draft'}
              </Button>
              <Button
                variant="outline"
                size="sm"
                onClick={handleDownloadPdf}
                disabled={isGeneratingPdf || isSaving} // Disable if saving or generating PDF
                className={`${themeClasses.buttonOutline} flex items-center`}
              >
                {isGeneratingPdf ? <Loader2 className="w-4 h-4 mr-2 animate-spin" /> : <Download className="w-4 h-4 mr-2" />}
                PDF
              </Button>
              <Button
                variant="outline"
                size="sm"
                onClick={() => setShowCoverLetterModal(true)}
                disabled={isSaving || isGeneratingPdf || !currentResumeIdInStore} // Disable if no resume saved yet
                className={`${themeClasses.buttonOutline} flex items-center`}
                title="Generate Cover Letter"
              >
                <Mail className="w-4 h-4 mr-2" />
                Cover Letter
              </Button>


              <UserButton
                appearance={{
                  elements: {
                    avatarBox: "w-9 h-9 shadow-md",
                    userButtonPopoverCard: `${isDark ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'}`,
                  }
                }}
              />
            </div>
          </div>
        </div>
      </header>

      {/* Main Content Area */}
      <main className="flex-grow container mx-auto py-8 px-4 sm:px-6 grid grid-cols-1 lg:grid-cols-3 gap-8 items-start">
        {/* Left Side: Form Sections */}
        <div className={`lg:col-span-2 ${themeClasses.cardBg} rounded-xl p-6 sm:p-8 shadow-xl`}>
          <ResumeForm currentStep={currentStep} />
          {/* Navigation Buttons */}
          <div className={`mt-8 pt-6 border-t ${isDark ? 'border-white/10' : 'border-gray-200'} flex justify-between items-center`}>
            <Button
              variant="outline"
              onClick={handleBack}
              disabled={currentStep === 0}
              className={`${themeClasses.buttonOutline}`}
            >
              <ArrowLeft className="w-4 h-4 mr-2" />
              Back
            </Button>
            <div className={`flex items-center space-x-1 text-sm ${themeClasses.textMuted}`}>
              <span>{currentStep + 1}</span>
              <span>/</span>
              <span>{totalSteps}</span>
            </div>
            <Button
              onClick={handleNext}
              className={`${themeClasses.accentGradient} text-white`}
            >
              {currentStep === totalSteps - 1 ? (currentResumeIdInStore ? 'Finalize & Save' : 'Save & Finish') : (currentStep === totalSteps - 2 ? 'Review & Finish' : 'Next Step')}
              <ArrowRight className="w-4 h-4 ml-2" />
            </Button>
          </div>
        </div>

        {/* Right Side: ATS Score & Preview */}
        <div className="lg:col-span-1 space-y-8 sticky top-24">
          <AtsScoreDisplay />
          <ResumePreview />
        </div>

        {/* Hidden PDF Template for Download */}
        {showPdfPreviewForCapture && ( // This state variable controls if SimpleTemplate is rendered
          <div style={{
            position: 'absolute',
            left: '-9999px', // Way off-screen
            top: 'auto',
            width: '210mm',     // A4 width for layout consistency before capture
            backgroundColor: '#fff', // Ensures canvas doesn't have transparent background
          }}>
            {/* This renders the div with id="resume-content-for-pdf" */}
            <SimpleTemplate resumeData={useResumeStore.getState()} />
          </div>
        )}

        {/* Cover Letter Modal */}
        {showCoverLetterModal && (
    <div className="fixed inset-0 bg-black/70 flex items-center justify-center z-[100] p-4">
        <div className={`${themeClasses.cardBg} rounded-xl p-6 sm:p-8 shadow-xl w-full max-w-2xl max-h-[90vh] flex flex-col`}>
            <div className="flex justify-between items-center mb-6">
                <h3 className={`text-xl font-semibold ${themeClasses.text}`}>Generate Cover Letter</h3>
                <Button variant="ghost" size="icon" onClick={() => setShowCoverLetterModal(false)} className={themeClasses.textMuted}>X</Button>
            </div>

            <div className="space-y-4 mb-6 overflow-y-auto pr-2 styled-scrollbar flex-shrink min-h-[150px]">
                 <div>
                    <Label htmlFor="targetJobTitle" className={themeClasses.textMuted}>Target Job Title*</Label>
                    <Input id="targetJobTitle" value={targetJobTitle} onChange={(e) => setTargetJobTitle(e.target.value)} placeholder="e.g., Senior Software Engineer" className="bg-slate-700/50 text-white placeholder-slate-400"/>
                </div>
                <div>
                    <Label htmlFor="targetCompanyName" className={themeClasses.textMuted}>Target Company Name*</Label>
                    <Input id="targetCompanyName" value={targetCompanyName} onChange={(e) => setTargetCompanyName(e.target.value)} placeholder="e.g., Google" className="bg-slate-700/50 text-white placeholder-slate-400"/>
                </div>
                <div>
                    <Label htmlFor="specificPointsForCoverLetter" className={themeClasses.textMuted}>Key Points to Emphasize (Optional)</Label>
                    <Textarea id="specificPointsForCoverLetter" value={specificPointsForCoverLetter} onChange={(e) => setSpecificPointsForCoverLetter(e.target.value)} placeholder="e.g., My experience with project X, my passion for Y" rows={3} className="bg-slate-700/50 text-white placeholder-slate-400"/>
                </div>
            </div>

            <Button
                onClick={handleGenerateCoverLetter}
                disabled={isGeneratingCoverLetter || !targetJobTitle || !targetCompanyName}
                className={`${themeClasses.accentGradient} text-white w-full mb-4 py-2.5`}
            >
                {isGeneratingCoverLetter ? <Loader2 className="w-5 h-5 animate-spin mr-2" /> : <Sparkles className="w-5 h-5 mr-2" />}
                Generate with AI
            </Button>

            {generatedCoverLetter && (
                <div className="mt-4 border-t pt-4 border-slate-700 flex-grow flex flex-col overflow-hidden">
                    <h4 className={`text-md font-semibold mb-2 ${themeClasses.text}`}>Generated Cover Letter:</h4>
                    <Textarea
                        value={generatedCoverLetter}
                        readOnly
                        rows={10}
                        className="text-xs leading-relaxed whitespace-pre-wrap w-full flex-grow bg-slate-700/30 border-slate-600 text-gray-200 styled-scrollbar"
                    />
                    <div className="mt-3 flex space-x-2">
                        <Button variant="outline" size="sm" onClick={handleCopyCoverLetter} className={themeClasses.buttonOutline}>
                            <Copy size={14} className="mr-1.5"/> Copy Text
                        </Button>
                         <Button variant="outline" size="sm" onClick={handleDownloadCoverLetterTxt} className={themeClasses.buttonOutline}>
                            <DownloadIcon size={14} className="mr-1.5"/> Download .txt
                        </Button>
                      </div>
                  </div>
              )}
          </div>
      </div>
  )}
  
        </main>
      </div>
    );
}

// Default export wrapping content in Suspense
export default function CreateResumePage() {
  // The useTheme() hook cannot be called here directly as this is the top-level Server Component for the route.
  // The Suspense fallback styling should ideally be simple and not rely on hooks.
  // For a themed fallback, you might need a client component wrapper around Suspense itself
  // or use CSS that respects the 'dark' class on <html>.
  // A simple, un-themed loader is safer here for the outermost Suspense.
  return (
    <Suspense fallback={
      <div className="min-h-screen flex items-center justify-center bg-gray-50 dark:bg-gray-900"> {/* Basic fallback style */}
        <Loader2 className="w-12 h-12 text-gray-700 dark:text-gray-300 animate-spin" />
      </div>
    }>
      <CreateResumePageContent />
    </Suspense>
  );
}
</file>

</files>
