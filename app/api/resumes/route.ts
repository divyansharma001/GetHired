// app/api/resumes/route.ts
import { NextResponse } from 'next/server';
import { auth } from '@clerk/nextjs/server';
import { prisma } from '@/lib/db';
import { ResumeData } from '@/types/resume'; // Assuming your full ResumeData type

export async function POST(request: Request) {
  try {
    const { userId } = await auth();
    if (!userId) {
      return new NextResponse('Unauthorized', { status: 401 });
    }

    const body = await request.json() as Omit<ResumeData, 'userId' | 'id' | 'atsScore'> & { title: string, atsScore?: number };
    // The body should match the structure from useResumeStore, minus userId (which we get from auth)
    // and id (which will be auto-generated by DB). `atsScore` is also typically calculated.

    const {
      title,
      personalInfo,
      education,
      experience,
      skills,
      projects,
      atsScore = 0 // Default ATS score if not provided
    } = body;

    if (!title || !personalInfo) {
        return new NextResponse('Missing required fields (title or personalInfo)', { status: 400 });
    }

    const newResume = await prisma.resume.create({
      data: {
        userId,
        title,
        atsScore, // Use the calculated or default ATS score
        personalInfo: {
          create: personalInfo,
        },
        // For array fields, use 'createMany' if structure matches directly, or map if transformation needed
        // Prisma's 'create' within a nested write handles this well for one-to-many
        education: {
          create: education.map(edu => ({ ...edu, id: undefined })), // Prisma generates ID
        },
        experience: {
          create: experience.map(exp => ({ ...exp, id: undefined })),
        },
        skills: {
          create: skills.map(skill => ({ ...skill, id: undefined })),
        },
        projects: {
          create: projects.map(proj => ({ ...proj, id: undefined })),
        },
      },
      include: { // Optionally include related data in the response
        personalInfo: true,
        education: true,
        experience: true,
        skills: true,
        projects: true,
      },
    });

    return NextResponse.json(newResume, { status: 201 });
  } catch (error) {
    console.error('[RESUMES_POST_API]', error);
    return new NextResponse('Internal Server Error', { status: 500 });
  }
}